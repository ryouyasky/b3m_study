ARM GAS  /tmp/ccgwJJgr.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"main.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.MX_GPIO_Init,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB133:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   ** This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * COPYRIGHT(c) 2017 STMicroelectronics
  13:Src/main.c    ****   *
  14:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    ****   * are permitted provided that the following conditions are met:
  16:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  18:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    ****   *      and/or other materials provided with the distribution.
  21:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  23:Src/main.c    ****   *      without specific prior written permission.
  24:Src/main.c    ****   *
  25:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  /tmp/ccgwJJgr.s 			page 2


  31:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  32:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:Src/main.c    ****   *
  36:Src/main.c    ****   ******************************************************************************
  37:Src/main.c    ****   */
  38:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  39:Src/main.c    **** #include "main.h"
  40:Src/main.c    **** #include "stm32f4xx_hal.h"
  41:Src/main.c    **** //#include "usart.h"
  42:Src/main.c    **** #include "B3M.h"
  43:Src/main.c    **** #include "string.h"
  44:Src/main.c    **** #include "sd_hal_mpu6050.h"
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  47:Src/main.c    **** UART_HandleTypeDef huart1;
  48:Src/main.c    **** UART_HandleTypeDef huart2;
  49:Src/main.c    **** UART_HandleTypeDef huart6;
  50:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  51:Src/main.c    **** SD_MPU6050 mpu1;
  52:Src/main.c    **** 
  53:Src/main.c    **** //WWDG_HandleTypeDef hwwdg;
  54:Src/main.c    **** 
  55:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  56:Src/main.c    **** 
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  59:Src/main.c    **** void SystemClock_Config(void);
  60:Src/main.c    **** static void MX_GPIO_Init(void);
  61:Src/main.c    **** static void MX_USART2_UART_Init(void);
  62:Src/main.c    **** static void MX_USART1_UART_Init(void);
  63:Src/main.c    **** //static void MX_WWDG_Init(void);
  64:Src/main.c    **** static void MX_USART6_UART_Init(void);
  65:Src/main.c    **** static void MX_I2C1_Init(void);
  66:Src/main.c    **** 
  67:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  68:Src/main.c    **** 
  69:Src/main.c    **** void setModeToNormal(/*unsigned char ID*/)
  70:Src/main.c    **** {
  71:Src/main.c    ****     uint8_t TxData[8];   // TransmitByteData [1 byte]
  72:Src/main.c    ****     //uint8_t CheckSum = 0; // CheckSum calculation
  73:Src/main.c    **** 
  74:Src/main.c    ****     TxData[0] = 0x08;   // All Byte
  75:Src/main.c    ****     TxData[1] = 0x04;   // Command
  76:Src/main.c    ****     TxData[2] = 0x00;   // Option/Status
  77:Src/main.c    ****     TxData[3] = 0x00;   // ID
  78:Src/main.c    ****     TxData[4] = 0x00;   // mode
  79:Src/main.c    ****     TxData[5] = 0x28;   // address
  80:Src/main.c    ****     TxData[6] = 0x01; // device number
  81:Src/main.c    ****     TxData[7] = 0x35;   // Sum
  82:Src/main.c    **** 
  83:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t*)TxData, 8, HAL_MAX_DELAY);
  84:Src/main.c    ****     HAL_Delay(1);
  85:Src/main.c    **** 
  86:Src/main.c    **** }
  87:Src/main.c    **** 
ARM GAS  /tmp/ccgwJJgr.s 			page 3


  88:Src/main.c    **** void setAngle(int16_t angle)
  89:Src/main.c    **** {
  90:Src/main.c    ****     uint8_t TxData[9];   // TransmitByteData [9 bits]
  91:Src/main.c    ****     uint8_t CheckSum = 0; // CheckSum calculation
  92:Src/main.c    ****     uint8_t RxData[9];
  93:Src/main.c    **** 
  94:Src/main.c    ****     if(angle<0)
  95:Src/main.c    ****         angle = 65535+angle+1;
  96:Src/main.c    **** 
  97:Src/main.c    ****     TxData[0] = 0x09;                 // All Byte
  98:Src/main.c    ****     TxData[1] = 0x04;                       // Command
  99:Src/main.c    ****     TxData[2] = 0x00;                       // Option/Status
 100:Src/main.c    ****     TxData[3] = 0x00;                         // ID
 101:Src/main.c    ****     TxData[4] = (uint8_t)0x00FF & angle;              //  mode
 102:Src/main.c    ****     TxData[5] = (uint8_t)0x00FF & (angle >> 8);       // address
 103:Src/main.c    ****     TxData[6] = 0x2A;                         // device number
 104:Src/main.c    ****     TxData[7] = 0x01;                     // Count
 105:Src/main.c    **** 
 106:Src/main.c    ****     // CheckSum calculation
 107:Src/main.c    ****     for(unsigned char i=0; i<=7; i++){
 108:Src/main.c    ****         CheckSum = CheckSum + TxData[i];                // XOR from ID to Data
 109:Src/main.c    ****     }
 110:Src/main.c    ****     CheckSum = (uint8_t)0x00FF & CheckSum;
 111:Src/main.c    **** 
 112:Src/main.c    ****     TxData[8] = CheckSum;
 113:Src/main.c    **** 
 114:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t*)TxData, 9, HAL_MAX_DELAY);
 115:Src/main.c    ****     HAL_Delay(1);
 116:Src/main.c    ****     HAL_UART_Receive(&huart1, (uint8_t*)RxData, 9, HAL_MAX_DELAY);
 117:Src/main.c    ****     HAL_Delay(1);
 118:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)RxData, 9, HAL_MAX_DELAY);
 119:Src/main.c    ****     HAl_Delay(1);
 120:Src/main.c    ****     /*追加*/
 121:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)TxData, 9, HAL_MAX_DELAY);
 122:Src/main.c    ****     HAL_Delay(1);
 123:Src/main.c    **** }
 124:Src/main.c    **** 
 125:Src/main.c    **** void setFree (/*unsigned char ID*/)
 126:Src/main.c    **** {
 127:Src/main.c    ****     uint8_t TxData[8];   // TransmitByteData [1byte]
 128:Src/main.c    **** 
 129:Src/main.c    ****     TxData[0] = 0x08;          // All Byte
 130:Src/main.c    ****     TxData[1] = 0x04;          // Command
 131:Src/main.c    ****     TxData[2] = 0x00;          // Option/Status
 132:Src/main.c    ****     TxData[3] = 0x00;          // ID
 133:Src/main.c    ****     TxData[4] = 0x02;          //  mode
 134:Src/main.c    ****     TxData[5] = 0x28;          // address
 135:Src/main.c    ****     TxData[6] = 0x01;          // device number
 136:Src/main.c    ****     TxData[7] = 0x37;          // Sum
 137:Src/main.c    **** 
 138:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t*)TxData, 8, HAL_MAX_DELAY);
 139:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)TxData, 8, HAL_MAX_DELAY);
 140:Src/main.c    ****     HAL_Delay(1);
 141:Src/main.c    **** }
 142:Src/main.c    **** 
 143:Src/main.c    **** //void setGain (/*unsigned char ID*/){
 144:Src/main.c    **** //  uint8_t TxData[8];   // TransmitByteData [10byte]
ARM GAS  /tmp/ccgwJJgr.s 			page 4


 145:Src/main.c    **** //
 146:Src/main.c    **** //    TxData[0] = 0x08;          // All Byte
 147:Src/main.c    **** //    TxData[1] = 0x04;          // Command
 148:Src/main.c    **** //    TxData[2] = 0x00;          // Option/Status
 149:Src/main.c    **** //    TxData[3] = 0x00;          // ID
 150:Src/main.c    **** //    TxData[4] = 0x02;          //  mode
 151:Src/main.c    **** //    TxData[5] = 0x5C;          // address
 152:Src/main.c    **** //    TxData[6] = 0x01;          // device number
 153:Src/main.c    **** //    TxData[7] = 0x69;          // Sum
 154:Src/main.c    **** //
 155:Src/main.c    **** //    HAL_UART_Transmit(&huart1, (uint8_t*)TxData, 8, HAL_MAX_DELAY);
 156:Src/main.c    **** //    HAL_UART_Transmit(&huart2, (uint8_t*)TxData, 8, HAL_MAX_DELAY);
 157:Src/main.c    **** //    HAL_Delay(1);               // Wait for transmission
 158:Src/main.c    **** //}
 159:Src/main.c    **** 
 160:Src/main.c    **** 
 161:Src/main.c    **** int main(void)
 162:Src/main.c    **** {
 163:Src/main.c    ****   SD_MPU6050_Result result ;
 164:Src/main.c    ****   uint8_t mpu_ok[15] = {"MPU WORK FINE\n"};
 165:Src/main.c    ****   uint8_t mpu_not[17] = {"MPU NOT WORKING\n"};
 166:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 167:Src/main.c    **** 
 168:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 169:Src/main.c    ****   HAL_Init();
 170:Src/main.c    **** 
 171:Src/main.c    ****   /* Configure the system clock */
 172:Src/main.c    ****   SystemClock_Config();
 173:Src/main.c    **** 
 174:Src/main.c    ****   /* Initialize all configured peripherals */
 175:Src/main.c    ****   MX_GPIO_Init();
 176:Src/main.c    ****   MX_USART1_UART_Init();
 177:Src/main.c    ****   //MX_WWDG_Init();
 178:Src/main.c    ****   MX_USART6_UART_Init();
 179:Src/main.c    ****   MX_USART2_UART_Init();
 180:Src/main.c    ****   MX_I2C1_Init();
 181:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 182:Src/main.c    **** 
 183:Src/main.c    ****   result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_16G,SD_MPU6050
 184:Src/main.c    **** 
 185:Src/main.c    ****   if(result == SD_MPU6050_Result_Ok)
 186:Src/main.c    ****   {
 187:Src/main.c    ****     HAL_UART_Transmit(&huart2,mpu_ok,(uint16_t)15, HAL_MAX_DELAY);
 188:Src/main.c    ****   }
 189:Src/main.c    ****   else
 190:Src/main.c    ****   {
 191:Src/main.c    ****     HAL_UART_Transmit(&huart2, mpu_not, (uint16_t)17, HAL_MAX_DELAY);
 192:Src/main.c    ****   }
 193:Src/main.c    **** 
 194:Src/main.c    ****   /* Infinite loop */
 195:Src/main.c    ****   while (1)
 196:Src/main.c    ****   {
 197:Src/main.c    **** 
 198:Src/main.c    ****     //setModeToNormal();
 199:Src/main.c    ****     //HAL_Delay(1000);
 200:Src/main.c    ****      B3M_RunNormal(huart1, SERVO_ID_1);
 201:Src/main.c    ****      B3M_RunNormal(huart6, SERVO_ID_6);
ARM GAS  /tmp/ccgwJJgr.s 			page 5


 202:Src/main.c    ****     // HAL_Delay(1);
 203:Src/main.c    ****     //B3M_Write_1B(huart1, SERVO_ID_0, OPERATION_MODE_RunNormal, SERVO_TORQUE_ON);
 204:Src/main.c    ****     //HAL_Delay(100);
 205:Src/main.c    **** 
 206:Src/main.c    ****     /*サーボ回転角度指定 */
 207:Src/main.c    **** 
 208:Src/main.c    **** 
 209:Src/main.c    ****   /*  B3M_SetDesirePostion(huart1, SERVO_ID_0, 1000);
 210:Src/main.c    ****     B3M_SetDesirePostion(huart6, SERVO_ID_0, 6000);
 211:Src/main.c    ****     HAL_Delay(1000);
 212:Src/main.c    **** 
 213:Src/main.c    ****     B3M_SetDesirePostion(huart1, SERVO_ID_0, -1000);
 214:Src/main.c    ****     B3M_SetDesirePostion(huart6, SERVO_ID_0, -6000);
 215:Src/main.c    ****     HAL_Delay(1000);
 216:Src/main.c    ****     */
 217:Src/main.c    **** 
 218:Src/main.c    **** 
 219:Src/main.c    **** 
 220:Src/main.c    ****     char gyro[20], acc[20];
 221:Src/main.c    ****     SD_MPU6050_ReadGyroscope(&hi2c1,&mpu1);
 222:Src/main.c    ****     int16_t g_x = mpu1.Gyroscope_X;
 223:Src/main.c    ****     int16_t g_y = mpu1.Gyroscope_Y;
 224:Src/main.c    ****     int16_t g_z = mpu1.Gyroscope_Z;
 225:Src/main.c    ****     //default int16_t
 226:Src/main.c    ****     //HAL_UART_Transmit(&huart2, (uint16_t*)(&g_x), 16,HAL_MAX_DELAY);
 227:Src/main.c    **** 
 228:Src/main.c    ****     SD_MPU6050_ReadAccelerometer(&hi2c1,&mpu1);
 229:Src/main.c    ****     int16_t a_x = mpu1.Accelerometer_X / 4095;
 230:Src/main.c    ****     int16_t a_y = mpu1.Accelerometer_Y / 4095;
 231:Src/main.c    ****     int16_t a_z = mpu1.Accelerometer_Z / 4095;
 232:Src/main.c    **** 
 233:Src/main.c    ****     int16_t acc_angle_x = atan2(mpu1.Accelerometer_X / 4095, mpu1.Accelerometer_Z / 4095) * 360 / 2
 234:Src/main.c    ****     int16_t acc_angle_y = atan2(a_y, a_z) * 360 / 2.0 / 3.1415;
 235:Src/main.c    ****     int16_t acc_angle_z = atan2(a_x, a_y) * 360 / 2.0 / 3.1415;
 236:Src/main.c    **** 
 237:Src/main.c    ****     /*ジャイロ*/
 238:Src/main.c    ****     /*
 239:Src/main.c    ****     sprintf(gyro, "gyr x: %d y: %d z: %d  \n\r", g_x, g_y, g_z);
 240:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)gyro, strlen(gyro), HAL_MAX_DELAY);
 241:Src/main.c    ****     */
 242:Src/main.c    ****     sprintf(acc, " acc x: %i y: %i z: %i\n\r\n\r", acc_angle_x, acc_angle_y, acc_angle_z);
 243:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)acc, strlen(acc), HAL_MAX_DELAY);
 244:Src/main.c    **** 
 245:Src/main.c    **** /*
 246:Src/main.c    ****     if(acc_angle_x == 90){
 247:Src/main.c    ****       B3M_SetDesirePostion(huart6, SERVO_ID_0, 0);
 248:Src/main.c    ****           HAL_Delay(10);
 249:Src/main.c    ****     }
 250:Src/main.c    ****     */
 251:Src/main.c    **** 
 252:Src/main.c    ****     int16_t diff = 67.7 * (90 - (atan2(mpu1.Accelerometer_X / 4095, mpu1.Accelerometer_Z / 4095) * 
 253:Src/main.c    **** 
 254:Src/main.c    ****     if(diff>9000)
 255:Src/main.c    ****     diff=9000;
 256:Src/main.c    ****     else if(diff<-10000)
 257:Src/main.c    ****     diff=-10000;
 258:Src/main.c    **** 
ARM GAS  /tmp/ccgwJJgr.s 			page 6


 259:Src/main.c    ****     B3M_SetDesirePostion(huart1, SERVO_ID_1, diff);
 260:Src/main.c    ****     B3M_SetDesirePostion(huart6, SERVO_ID_6, diff);
 261:Src/main.c    **** 
 262:Src/main.c    **** 
 263:Src/main.c    **** 
 264:Src/main.c    **** 
 265:Src/main.c    **** 
 266:Src/main.c    ****     /*
 267:Src/main.c    ****     else if(acc_angle_x < -140){
 268:Src/main.c    ****       B3M_SetDesirePostion(huart6, SERVO_ID_0, -3000);
 269:Src/main.c    ****           HAL_Delay(500);
 270:Src/main.c    ****     }
 271:Src/main.c    ****     else if(acc_angle_x > -40){
 272:Src/main.c    ****       B3M_SetDesirePostion(huart6, SERVO_ID_0, 5000);
 273:Src/main.c    ****           HAL_Delay(500);
 274:Src/main.c    ****         }
 275:Src/main.c    ****         */
 276:Src/main.c    **** 
 277:Src/main.c    **** 
 278:Src/main.c    ****   //  if(acc)
 279:Src/main.c    **** 
 280:Src/main.c    **** 
 281:Src/main.c    ****   }
 282:Src/main.c    **** 
 283:Src/main.c    **** }
 284:Src/main.c    **** 
 285:Src/main.c    **** /** System Clock Configuration
 286:Src/main.c    **** */
 287:Src/main.c    **** void SystemClock_Config(void)
 288:Src/main.c    **** {
 289:Src/main.c    **** 
 290:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 291:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 292:Src/main.c    **** 
 293:Src/main.c    ****     /**Configure the main internal regulator output voltage
 294:Src/main.c    ****     */
 295:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 296:Src/main.c    **** 
 297:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);//voltage smooth
 298:Src/main.c    **** 
 299:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 300:Src/main.c    ****     */
 301:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 302:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 303:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 304:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 305:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 306:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 307:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 308:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 309:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 310:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 311:Src/main.c    ****   {
 312:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 313:Src/main.c    ****   }
 314:Src/main.c    **** 
 315:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
ARM GAS  /tmp/ccgwJJgr.s 			page 7


 316:Src/main.c    ****     */
 317:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 318:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 319:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 320:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 321:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 322:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 323:Src/main.c    **** 
 324:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 325:Src/main.c    ****   {
 326:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 327:Src/main.c    ****   }
 328:Src/main.c    **** 
 329:Src/main.c    ****     /**Configure the Systick interrupt time
 330:Src/main.c    ****     */
 331:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 332:Src/main.c    **** 
 333:Src/main.c    ****     /**Configure the Systick
 334:Src/main.c    ****     */
 335:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 336:Src/main.c    **** 
 337:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 338:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 339:Src/main.c    **** }
 340:Src/main.c    **** 
 341:Src/main.c    **** /* I2C1 init function */
 342:Src/main.c    **** static void MX_I2C1_Init(void)
 343:Src/main.c    **** {
 344:Src/main.c    **** 
 345:Src/main.c    ****   hi2c1.Instance = I2C1;
 346:Src/main.c    ****   hi2c1.Init.ClockSpeed = 400000;
 347:Src/main.c    ****   //hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 348:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 349:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 350:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 351:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 352:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 353:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 354:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 355:Src/main.c    ****   {
 356:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 357:Src/main.c    ****   }
 358:Src/main.c    **** 
 359:Src/main.c    ****   HAL_I2CEx_AnalogFilter_Config(&hi2c1, I2C_ANALOGFILTER_ENABLED);
 360:Src/main.c    **** 
 361:Src/main.c    **** }
 362:Src/main.c    **** 
 363:Src/main.c    **** /* USART1 init function */
 364:Src/main.c    **** static void MX_USART1_UART_Init(void)
 365:Src/main.c    **** {
 366:Src/main.c    **** 
 367:Src/main.c    ****   huart1.Instance = USART1;
 368:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 369:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 370:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 371:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 372:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
ARM GAS  /tmp/ccgwJJgr.s 			page 8


 373:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 374:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 375:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 376:Src/main.c    ****   {
 377:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 378:Src/main.c    ****   }
 379:Src/main.c    **** 
 380:Src/main.c    **** }
 381:Src/main.c    **** 
 382:Src/main.c    **** /* USART2 init function */
 383:Src/main.c    **** 
 384:Src/main.c    **** static void MX_USART2_UART_Init(void)
 385:Src/main.c    **** {
 386:Src/main.c    **** 
 387:Src/main.c    ****   huart2.Instance = USART2;
 388:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 389:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 390:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 391:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 392:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 393:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 394:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 395:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 396:Src/main.c    ****   {
 397:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 398:Src/main.c    ****   }
 399:Src/main.c    **** 
 400:Src/main.c    **** }
 401:Src/main.c    **** 
 402:Src/main.c    **** 
 403:Src/main.c    **** /* USART6 init function */
 404:Src/main.c    **** static void MX_USART6_UART_Init(void)
 405:Src/main.c    **** {
 406:Src/main.c    **** 
 407:Src/main.c    ****   huart6.Instance = USART6;
 408:Src/main.c    ****   huart6.Init.BaudRate = 115200;
 409:Src/main.c    ****   huart6.Init.WordLength = UART_WORDLENGTH_8B;
 410:Src/main.c    ****   huart6.Init.StopBits = UART_STOPBITS_1;
 411:Src/main.c    ****   huart6.Init.Parity = UART_PARITY_NONE;
 412:Src/main.c    ****   huart6.Init.Mode = UART_MODE_TX_RX;
 413:Src/main.c    ****   huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 414:Src/main.c    ****   huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 415:Src/main.c    ****   if (HAL_UART_Init(&huart6) != HAL_OK)
 416:Src/main.c    ****   {
 417:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 418:Src/main.c    ****   }
 419:Src/main.c    **** 
 420:Src/main.c    **** }
 421:Src/main.c    **** 
 422:Src/main.c    **** /* WWDG init function */
 423:Src/main.c    **** //static void MX_WWDG_Init(void)
 424:Src/main.c    **** //{
 425:Src/main.c    **** //
 426:Src/main.c    **** //  hwwdg.Instance = WWDG;
 427:Src/main.c    **** //  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 428:Src/main.c    **** //  hwwdg.Init.Window = 64;
 429:Src/main.c    **** //  hwwdg.Init.Counter = 64;
ARM GAS  /tmp/ccgwJJgr.s 			page 9


 430:Src/main.c    **** //  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 431:Src/main.c    **** //  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 432:Src/main.c    **** //  {
 433:Src/main.c    **** //    _Error_Handler(__FILE__, __LINE__);
 434:Src/main.c    **** //  }
 435:Src/main.c    **** //
 436:Src/main.c    **** //}
 437:Src/main.c    **** 
 438:Src/main.c    **** /** Configure pins as
 439:Src/main.c    ****         * Analog
 440:Src/main.c    ****         * Input
 441:Src/main.c    ****         * Output
 442:Src/main.c    ****         * EVENT_OUT
 443:Src/main.c    ****         * EXTI
 444:Src/main.c    **** */
 445:Src/main.c    **** static void MX_GPIO_Init(void)
 446:Src/main.c    **** {
  29              		.loc 1 446 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 40
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 20
  36              		.cfi_offset 4, -20
  37              		.cfi_offset 5, -16
  38              		.cfi_offset 6, -12
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 8BB0     		sub	sp, sp, #44
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 64
  44              	.LBB2:
 447:Src/main.c    **** 
 448:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 449:Src/main.c    **** 
 450:Src/main.c    ****   /* GPIO Ports Clock Enable */
 451:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  45              		.loc 1 451 0
  46 0004 0024     		movs	r4, #0
  47 0006 0194     		str	r4, [sp, #4]
  48 0008 2A4B     		ldr	r3, .L3
  49 000a 1A6B     		ldr	r2, [r3, #48]
  50 000c 42F00402 		orr	r2, r2, #4
  51 0010 1A63     		str	r2, [r3, #48]
  52 0012 1A6B     		ldr	r2, [r3, #48]
  53 0014 02F00402 		and	r2, r2, #4
  54 0018 0192     		str	r2, [sp, #4]
  55 001a 019A     		ldr	r2, [sp, #4]
  56              	.LBE2:
  57              	.LBB3:
 452:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  58              		.loc 1 452 0
  59 001c 0294     		str	r4, [sp, #8]
  60 001e 1A6B     		ldr	r2, [r3, #48]
  61 0020 42F08002 		orr	r2, r2, #128
  62 0024 1A63     		str	r2, [r3, #48]
ARM GAS  /tmp/ccgwJJgr.s 			page 10


  63 0026 1A6B     		ldr	r2, [r3, #48]
  64 0028 02F08002 		and	r2, r2, #128
  65 002c 0292     		str	r2, [sp, #8]
  66 002e 029A     		ldr	r2, [sp, #8]
  67              	.LBE3:
  68              	.LBB4:
 453:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  69              		.loc 1 453 0
  70 0030 0394     		str	r4, [sp, #12]
  71 0032 1A6B     		ldr	r2, [r3, #48]
  72 0034 42F00102 		orr	r2, r2, #1
  73 0038 1A63     		str	r2, [r3, #48]
  74 003a 1A6B     		ldr	r2, [r3, #48]
  75 003c 02F00102 		and	r2, r2, #1
  76 0040 0392     		str	r2, [sp, #12]
  77 0042 039A     		ldr	r2, [sp, #12]
  78              	.LBE4:
  79              	.LBB5:
 454:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  80              		.loc 1 454 0
  81 0044 0494     		str	r4, [sp, #16]
  82 0046 1A6B     		ldr	r2, [r3, #48]
  83 0048 42F00202 		orr	r2, r2, #2
  84 004c 1A63     		str	r2, [r3, #48]
  85 004e 1B6B     		ldr	r3, [r3, #48]
  86 0050 03F00203 		and	r3, r3, #2
  87 0054 0493     		str	r3, [sp, #16]
  88 0056 049B     		ldr	r3, [sp, #16]
  89              	.LBE5:
 455:Src/main.c    **** 
 456:Src/main.c    ****   /*Configure GPIO pin Output Level */
 457:Src/main.c    ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
  90              		.loc 1 457 0
  91 0058 174F     		ldr	r7, .L3+4
  92 005a 2246     		mov	r2, r4
  93 005c 2021     		movs	r1, #32
  94 005e 3846     		mov	r0, r7
  95 0060 FFF7FEFF 		bl	HAL_GPIO_WritePin
  96              	.LVL0:
 458:Src/main.c    ****   /*Configure GPIO pin Output Level */
 459:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
  97              		.loc 1 459 0
  98 0064 154D     		ldr	r5, .L3+8
  99 0066 2246     		mov	r2, r4
 100 0068 4FF48071 		mov	r1, #256
 101 006c 2846     		mov	r0, r5
 102 006e FFF7FEFF 		bl	HAL_GPIO_WritePin
 103              	.LVL1:
 460:Src/main.c    **** 
 461:Src/main.c    ****   /*Configure GPIO pin : B1_Pin */
 462:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin;
 104              		.loc 1 462 0
 105 0072 4FF40053 		mov	r3, #8192
 106 0076 0593     		str	r3, [sp, #20]
 463:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 107              		.loc 1 463 0
 108 0078 114B     		ldr	r3, .L3+12
ARM GAS  /tmp/ccgwJJgr.s 			page 11


 109 007a 0693     		str	r3, [sp, #24]
 464:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 110              		.loc 1 464 0
 111 007c 0794     		str	r4, [sp, #28]
 465:Src/main.c    ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 112              		.loc 1 465 0
 113 007e 05A9     		add	r1, sp, #20
 114 0080 2846     		mov	r0, r5
 115 0082 FFF7FEFF 		bl	HAL_GPIO_Init
 116              	.LVL2:
 466:Src/main.c    **** 
 467:Src/main.c    ****   /*Configure GPIO pin : LD2_Pin */
 468:Src/main.c    ****   GPIO_InitStruct.Pin = LD2_Pin;
 117              		.loc 1 468 0
 118 0086 2023     		movs	r3, #32
 119 0088 0593     		str	r3, [sp, #20]
 469:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 120              		.loc 1 469 0
 121 008a 0126     		movs	r6, #1
 122 008c 0696     		str	r6, [sp, #24]
 470:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 123              		.loc 1 470 0
 124 008e 0794     		str	r4, [sp, #28]
 471:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 125              		.loc 1 471 0
 126 0090 0894     		str	r4, [sp, #32]
 472:Src/main.c    ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 127              		.loc 1 472 0
 128 0092 05A9     		add	r1, sp, #20
 129 0094 3846     		mov	r0, r7
 130 0096 FFF7FEFF 		bl	HAL_GPIO_Init
 131              	.LVL3:
 473:Src/main.c    **** 
 474:Src/main.c    ****     /*Configure GPIO pin : PC8 */
 475:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_8;
 132              		.loc 1 475 0
 133 009a 4FF48073 		mov	r3, #256
 134 009e 0593     		str	r3, [sp, #20]
 476:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 135              		.loc 1 476 0
 136 00a0 0696     		str	r6, [sp, #24]
 477:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 137              		.loc 1 477 0
 138 00a2 0794     		str	r4, [sp, #28]
 478:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 139              		.loc 1 478 0
 140 00a4 0894     		str	r4, [sp, #32]
 479:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 141              		.loc 1 479 0
 142 00a6 05A9     		add	r1, sp, #20
 143 00a8 2846     		mov	r0, r5
 144 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 145              	.LVL4:
 480:Src/main.c    **** 
 481:Src/main.c    **** }
 146              		.loc 1 481 0
 147 00ae 0BB0     		add	sp, sp, #44
ARM GAS  /tmp/ccgwJJgr.s 			page 12


 148              	.LCFI2:
 149              		.cfi_def_cfa_offset 20
 150              		@ sp needed
 151 00b0 F0BD     		pop	{r4, r5, r6, r7, pc}
 152              	.L4:
 153 00b2 00BF     		.align	2
 154              	.L3:
 155 00b4 00380240 		.word	1073887232
 156 00b8 00000240 		.word	1073872896
 157 00bc 00080240 		.word	1073874944
 158 00c0 00002110 		.word	270598144
 159              		.cfi_endproc
 160              	.LFE133:
 162              		.section	.text.setModeToNormal,"ax",%progbits
 163              		.align	2
 164              		.global	setModeToNormal
 165              		.thumb
 166              		.thumb_func
 168              	setModeToNormal:
 169              	.LFB124:
  70:Src/main.c    ****     uint8_t TxData[8];   // TransmitByteData [1 byte]
 170              		.loc 1 70 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 8
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174 0000 10B5     		push	{r4, lr}
 175              	.LCFI3:
 176              		.cfi_def_cfa_offset 8
 177              		.cfi_offset 4, -8
 178              		.cfi_offset 14, -4
 179 0002 82B0     		sub	sp, sp, #8
 180              	.LCFI4:
 181              		.cfi_def_cfa_offset 16
  74:Src/main.c    ****     TxData[1] = 0x04;   // Command
 182              		.loc 1 74 0
 183 0004 0822     		movs	r2, #8
 184 0006 8DF80020 		strb	r2, [sp]
  75:Src/main.c    ****     TxData[2] = 0x00;   // Option/Status
 185              		.loc 1 75 0
 186 000a 0423     		movs	r3, #4
 187 000c 8DF80130 		strb	r3, [sp, #1]
  76:Src/main.c    ****     TxData[3] = 0x00;   // ID
 188              		.loc 1 76 0
 189 0010 0023     		movs	r3, #0
 190 0012 8DF80230 		strb	r3, [sp, #2]
  77:Src/main.c    ****     TxData[4] = 0x00;   // mode
 191              		.loc 1 77 0
 192 0016 8DF80330 		strb	r3, [sp, #3]
  78:Src/main.c    ****     TxData[5] = 0x28;   // address
 193              		.loc 1 78 0
 194 001a 8DF80430 		strb	r3, [sp, #4]
  79:Src/main.c    ****     TxData[6] = 0x01; // device number
 195              		.loc 1 79 0
 196 001e 2823     		movs	r3, #40
 197 0020 8DF80530 		strb	r3, [sp, #5]
  80:Src/main.c    ****     TxData[7] = 0x35;   // Sum
 198              		.loc 1 80 0
ARM GAS  /tmp/ccgwJJgr.s 			page 13


 199 0024 0124     		movs	r4, #1
 200 0026 8DF80640 		strb	r4, [sp, #6]
  81:Src/main.c    **** 
 201              		.loc 1 81 0
 202 002a 3523     		movs	r3, #53
 203 002c 8DF80730 		strb	r3, [sp, #7]
  83:Src/main.c    ****     HAL_Delay(1);
 204              		.loc 1 83 0
 205 0030 4FF0FF33 		mov	r3, #-1
 206 0034 6946     		mov	r1, sp
 207 0036 0448     		ldr	r0, .L7
 208 0038 FFF7FEFF 		bl	HAL_UART_Transmit
 209              	.LVL5:
  84:Src/main.c    **** 
 210              		.loc 1 84 0
 211 003c 2046     		mov	r0, r4
 212 003e FFF7FEFF 		bl	HAL_Delay
 213              	.LVL6:
  86:Src/main.c    **** 
 214              		.loc 1 86 0
 215 0042 02B0     		add	sp, sp, #8
 216              	.LCFI5:
 217              		.cfi_def_cfa_offset 8
 218              		@ sp needed
 219 0044 10BD     		pop	{r4, pc}
 220              	.L8:
 221 0046 00BF     		.align	2
 222              	.L7:
 223 0048 00000000 		.word	huart1
 224              		.cfi_endproc
 225              	.LFE124:
 227              		.section	.text.setAngle,"ax",%progbits
 228              		.align	2
 229              		.global	setAngle
 230              		.thumb
 231              		.thumb_func
 233              	setAngle:
 234              	.LFB125:
  89:Src/main.c    ****     uint8_t TxData[9];   // TransmitByteData [9 bits]
 235              		.loc 1 89 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 24
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              	.LVL7:
 240 0000 10B5     		push	{r4, lr}
 241              	.LCFI6:
 242              		.cfi_def_cfa_offset 8
 243              		.cfi_offset 4, -8
 244              		.cfi_offset 14, -4
 245 0002 86B0     		sub	sp, sp, #24
 246              	.LCFI7:
 247              		.cfi_def_cfa_offset 32
 248              	.LVL8:
  97:Src/main.c    ****     TxData[1] = 0x04;                       // Command
 249              		.loc 1 97 0
 250 0004 0923     		movs	r3, #9
 251 0006 8DF80C30 		strb	r3, [sp, #12]
ARM GAS  /tmp/ccgwJJgr.s 			page 14


  98:Src/main.c    ****     TxData[2] = 0x00;                       // Option/Status
 252              		.loc 1 98 0
 253 000a 0423     		movs	r3, #4
 254 000c 8DF80D30 		strb	r3, [sp, #13]
  99:Src/main.c    ****     TxData[3] = 0x00;                         // ID
 255              		.loc 1 99 0
 256 0010 0022     		movs	r2, #0
 257 0012 8DF80E20 		strb	r2, [sp, #14]
 100:Src/main.c    ****     TxData[4] = (uint8_t)0x00FF & angle;              //  mode
 258              		.loc 1 100 0
 259 0016 8DF80F20 		strb	r2, [sp, #15]
 101:Src/main.c    ****     TxData[5] = (uint8_t)0x00FF & (angle >> 8);       // address
 260              		.loc 1 101 0
 261 001a 8DF81000 		strb	r0, [sp, #16]
 102:Src/main.c    ****     TxData[6] = 0x2A;                         // device number
 262              		.loc 1 102 0
 263 001e C0F30720 		ubfx	r0, r0, #8, #8
 264              	.LVL9:
 265 0022 8DF81100 		strb	r0, [sp, #17]
 103:Src/main.c    ****     TxData[7] = 0x01;                     // Count
 266              		.loc 1 103 0
 267 0026 2A23     		movs	r3, #42
 268 0028 8DF81230 		strb	r3, [sp, #18]
 104:Src/main.c    **** 
 269              		.loc 1 104 0
 270 002c 0123     		movs	r3, #1
 271 002e 8DF81330 		strb	r3, [sp, #19]
 272              	.LVL10:
 273              	.LBB6:
 107:Src/main.c    ****         CheckSum = CheckSum + TxData[i];                // XOR from ID to Data
 274              		.loc 1 107 0
 275 0032 1346     		mov	r3, r2
 276 0034 07E0     		b	.L10
 277              	.LVL11:
 278              	.L11:
 108:Src/main.c    ****     }
 279              		.loc 1 108 0 discriminator 3
 280 0036 06A9     		add	r1, sp, #24
 281 0038 1944     		add	r1, r1, r3
 282 003a 11F80C1C 		ldrb	r1, [r1, #-12]	@ zero_extendqisi2
 283 003e 0A44     		add	r2, r2, r1
 284              	.LVL12:
 285 0040 D2B2     		uxtb	r2, r2
 286              	.LVL13:
 107:Src/main.c    ****         CheckSum = CheckSum + TxData[i];                // XOR from ID to Data
 287              		.loc 1 107 0 discriminator 3
 288 0042 0133     		adds	r3, r3, #1
 289              	.LVL14:
 290 0044 DBB2     		uxtb	r3, r3
 291              	.LVL15:
 292              	.L10:
 107:Src/main.c    ****         CheckSum = CheckSum + TxData[i];                // XOR from ID to Data
 293              		.loc 1 107 0 is_stmt 0 discriminator 1
 294 0046 072B     		cmp	r3, #7
 295 0048 F5D9     		bls	.L11
 296              	.LBE6:
 112:Src/main.c    **** 
ARM GAS  /tmp/ccgwJJgr.s 			page 15


 297              		.loc 1 112 0 is_stmt 1
 298 004a 8DF81420 		strb	r2, [sp, #20]
 114:Src/main.c    ****     HAL_Delay(1);
 299              		.loc 1 114 0
 300 004e 164C     		ldr	r4, .L13
 301 0050 4FF0FF33 		mov	r3, #-1
 302              	.LVL16:
 303 0054 0922     		movs	r2, #9
 304              	.LVL17:
 305 0056 03A9     		add	r1, sp, #12
 306 0058 2046     		mov	r0, r4
 307 005a FFF7FEFF 		bl	HAL_UART_Transmit
 308              	.LVL18:
 115:Src/main.c    ****     HAL_UART_Receive(&huart1, (uint8_t*)RxData, 9, HAL_MAX_DELAY);
 309              		.loc 1 115 0
 310 005e 0120     		movs	r0, #1
 311 0060 FFF7FEFF 		bl	HAL_Delay
 312              	.LVL19:
 116:Src/main.c    ****     HAL_Delay(1);
 313              		.loc 1 116 0
 314 0064 4FF0FF33 		mov	r3, #-1
 315 0068 0922     		movs	r2, #9
 316 006a 6946     		mov	r1, sp
 317 006c 2046     		mov	r0, r4
 318 006e FFF7FEFF 		bl	HAL_UART_Receive
 319              	.LVL20:
 117:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)RxData, 9, HAL_MAX_DELAY);
 320              		.loc 1 117 0
 321 0072 0120     		movs	r0, #1
 322 0074 FFF7FEFF 		bl	HAL_Delay
 323              	.LVL21:
 118:Src/main.c    ****     HAl_Delay(1);
 324              		.loc 1 118 0
 325 0078 0C4C     		ldr	r4, .L13+4
 326 007a 4FF0FF33 		mov	r3, #-1
 327 007e 0922     		movs	r2, #9
 328 0080 6946     		mov	r1, sp
 329 0082 2046     		mov	r0, r4
 330 0084 FFF7FEFF 		bl	HAL_UART_Transmit
 331              	.LVL22:
 119:Src/main.c    ****     /*追加*/
 332              		.loc 1 119 0
 333 0088 0120     		movs	r0, #1
 334 008a FFF7FEFF 		bl	HAl_Delay
 335              	.LVL23:
 121:Src/main.c    ****     HAL_Delay(1);
 336              		.loc 1 121 0
 337 008e 4FF0FF33 		mov	r3, #-1
 338 0092 0922     		movs	r2, #9
 339 0094 03A9     		add	r1, sp, #12
 340 0096 2046     		mov	r0, r4
 341 0098 FFF7FEFF 		bl	HAL_UART_Transmit
 342              	.LVL24:
 122:Src/main.c    **** }
 343              		.loc 1 122 0
 344 009c 0120     		movs	r0, #1
 345 009e FFF7FEFF 		bl	HAL_Delay
ARM GAS  /tmp/ccgwJJgr.s 			page 16


 346              	.LVL25:
 123:Src/main.c    **** 
 347              		.loc 1 123 0
 348 00a2 06B0     		add	sp, sp, #24
 349              	.LCFI8:
 350              		.cfi_def_cfa_offset 8
 351              		@ sp needed
 352 00a4 10BD     		pop	{r4, pc}
 353              	.L14:
 354 00a6 00BF     		.align	2
 355              	.L13:
 356 00a8 00000000 		.word	huart1
 357 00ac 00000000 		.word	huart2
 358              		.cfi_endproc
 359              	.LFE125:
 361              		.section	.text.setFree,"ax",%progbits
 362              		.align	2
 363              		.global	setFree
 364              		.thumb
 365              		.thumb_func
 367              	setFree:
 368              	.LFB126:
 126:Src/main.c    ****     uint8_t TxData[8];   // TransmitByteData [1byte]
 369              		.loc 1 126 0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 8
 372              		@ frame_needed = 0, uses_anonymous_args = 0
 373 0000 30B5     		push	{r4, r5, lr}
 374              	.LCFI9:
 375              		.cfi_def_cfa_offset 12
 376              		.cfi_offset 4, -12
 377              		.cfi_offset 5, -8
 378              		.cfi_offset 14, -4
 379 0002 83B0     		sub	sp, sp, #12
 380              	.LCFI10:
 381              		.cfi_def_cfa_offset 24
 129:Src/main.c    ****     TxData[1] = 0x04;          // Command
 382              		.loc 1 129 0
 383 0004 0824     		movs	r4, #8
 384 0006 8DF80040 		strb	r4, [sp]
 130:Src/main.c    ****     TxData[2] = 0x00;          // Option/Status
 385              		.loc 1 130 0
 386 000a 0423     		movs	r3, #4
 387 000c 8DF80130 		strb	r3, [sp, #1]
 131:Src/main.c    ****     TxData[3] = 0x00;          // ID
 388              		.loc 1 131 0
 389 0010 0023     		movs	r3, #0
 390 0012 8DF80230 		strb	r3, [sp, #2]
 132:Src/main.c    ****     TxData[4] = 0x02;          //  mode
 391              		.loc 1 132 0
 392 0016 8DF80330 		strb	r3, [sp, #3]
 133:Src/main.c    ****     TxData[5] = 0x28;          // address
 393              		.loc 1 133 0
 394 001a 0223     		movs	r3, #2
 395 001c 8DF80430 		strb	r3, [sp, #4]
 134:Src/main.c    ****     TxData[6] = 0x01;          // device number
 396              		.loc 1 134 0
ARM GAS  /tmp/ccgwJJgr.s 			page 17


 397 0020 2823     		movs	r3, #40
 398 0022 8DF80530 		strb	r3, [sp, #5]
 135:Src/main.c    ****     TxData[7] = 0x37;          // Sum
 399              		.loc 1 135 0
 400 0026 0125     		movs	r5, #1
 401 0028 8DF80650 		strb	r5, [sp, #6]
 136:Src/main.c    **** 
 402              		.loc 1 136 0
 403 002c 3723     		movs	r3, #55
 404 002e 8DF80730 		strb	r3, [sp, #7]
 138:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)TxData, 8, HAL_MAX_DELAY);
 405              		.loc 1 138 0
 406 0032 4FF0FF33 		mov	r3, #-1
 407 0036 2246     		mov	r2, r4
 408 0038 6946     		mov	r1, sp
 409 003a 0748     		ldr	r0, .L17
 410 003c FFF7FEFF 		bl	HAL_UART_Transmit
 411              	.LVL26:
 139:Src/main.c    ****     HAL_Delay(1);
 412              		.loc 1 139 0
 413 0040 4FF0FF33 		mov	r3, #-1
 414 0044 2246     		mov	r2, r4
 415 0046 6946     		mov	r1, sp
 416 0048 0448     		ldr	r0, .L17+4
 417 004a FFF7FEFF 		bl	HAL_UART_Transmit
 418              	.LVL27:
 140:Src/main.c    **** }
 419              		.loc 1 140 0
 420 004e 2846     		mov	r0, r5
 421 0050 FFF7FEFF 		bl	HAL_Delay
 422              	.LVL28:
 141:Src/main.c    **** 
 423              		.loc 1 141 0
 424 0054 03B0     		add	sp, sp, #12
 425              	.LCFI11:
 426              		.cfi_def_cfa_offset 12
 427              		@ sp needed
 428 0056 30BD     		pop	{r4, r5, pc}
 429              	.L18:
 430              		.align	2
 431              	.L17:
 432 0058 00000000 		.word	huart1
 433 005c 00000000 		.word	huart2
 434              		.cfi_endproc
 435              	.LFE126:
 437              		.section	.text._Error_Handler,"ax",%progbits
 438              		.align	2
 439              		.global	_Error_Handler
 440              		.thumb
 441              		.thumb_func
 443              	_Error_Handler:
 444              	.LFB134:
 482:Src/main.c    **** 
 483:Src/main.c    **** 
 484:Src/main.c    **** /**
 485:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 486:Src/main.c    ****   * @param  None
ARM GAS  /tmp/ccgwJJgr.s 			page 18


 487:Src/main.c    ****   * @retval None
 488:Src/main.c    ****   */
 489:Src/main.c    **** void _Error_Handler(char * file, int line)
 490:Src/main.c    **** {
 445              		.loc 1 490 0
 446              		.cfi_startproc
 447              		@ Volatile: function does not return.
 448              		@ args = 0, pretend = 0, frame = 0
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450              		@ link register save eliminated.
 451              	.LVL29:
 452              	.L20:
 453 0000 FEE7     		b	.L20
 454              		.cfi_endproc
 455              	.LFE134:
 457 0002 00BF     		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 458              		.align	2
 459              		.thumb
 460              		.thumb_func
 462              	MX_USART1_UART_Init:
 463              	.LFB130:
 365:Src/main.c    **** 
 464              		.loc 1 365 0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 0
 467              		@ frame_needed = 0, uses_anonymous_args = 0
 365:Src/main.c    **** 
 468              		.loc 1 365 0
 469 0000 08B5     		push	{r3, lr}
 470              	.LCFI12:
 471              		.cfi_def_cfa_offset 8
 472              		.cfi_offset 3, -8
 473              		.cfi_offset 14, -4
 367:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 474              		.loc 1 367 0
 475 0002 0B48     		ldr	r0, .L24
 476 0004 0B4B     		ldr	r3, .L24+4
 477 0006 0360     		str	r3, [r0]
 368:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 478              		.loc 1 368 0
 479 0008 4FF4E133 		mov	r3, #115200
 480 000c 4360     		str	r3, [r0, #4]
 369:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 481              		.loc 1 369 0
 482 000e 0023     		movs	r3, #0
 483 0010 8360     		str	r3, [r0, #8]
 370:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 484              		.loc 1 370 0
 485 0012 C360     		str	r3, [r0, #12]
 371:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 486              		.loc 1 371 0
 487 0014 0361     		str	r3, [r0, #16]
 372:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 488              		.loc 1 372 0
 489 0016 0C22     		movs	r2, #12
 490 0018 4261     		str	r2, [r0, #20]
 373:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
ARM GAS  /tmp/ccgwJJgr.s 			page 19


 491              		.loc 1 373 0
 492 001a 8361     		str	r3, [r0, #24]
 374:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 493              		.loc 1 374 0
 494 001c C361     		str	r3, [r0, #28]
 375:Src/main.c    ****   {
 495              		.loc 1 375 0
 496 001e FFF7FEFF 		bl	HAL_UART_Init
 497              	.LVL30:
 498 0022 20B1     		cbz	r0, .L21
 377:Src/main.c    ****   }
 499              		.loc 1 377 0
 500 0024 40F27911 		movw	r1, #377
 501 0028 0348     		ldr	r0, .L24+8
 502 002a FFF7FEFF 		bl	_Error_Handler
 503              	.LVL31:
 504              	.L21:
 505 002e 08BD     		pop	{r3, pc}
 506              	.L25:
 507              		.align	2
 508              	.L24:
 509 0030 00000000 		.word	huart1
 510 0034 00100140 		.word	1073811456
 511 0038 00000000 		.word	.LC0
 512              		.cfi_endproc
 513              	.LFE130:
 515              		.section	.text.MX_USART6_UART_Init,"ax",%progbits
 516              		.align	2
 517              		.thumb
 518              		.thumb_func
 520              	MX_USART6_UART_Init:
 521              	.LFB132:
 405:Src/main.c    **** 
 522              		.loc 1 405 0
 523              		.cfi_startproc
 524              		@ args = 0, pretend = 0, frame = 0
 525              		@ frame_needed = 0, uses_anonymous_args = 0
 526 0000 08B5     		push	{r3, lr}
 527              	.LCFI13:
 528              		.cfi_def_cfa_offset 8
 529              		.cfi_offset 3, -8
 530              		.cfi_offset 14, -4
 407:Src/main.c    ****   huart6.Init.BaudRate = 115200;
 531              		.loc 1 407 0
 532 0002 0B48     		ldr	r0, .L29
 533 0004 0B4B     		ldr	r3, .L29+4
 534 0006 0360     		str	r3, [r0]
 408:Src/main.c    ****   huart6.Init.WordLength = UART_WORDLENGTH_8B;
 535              		.loc 1 408 0
 536 0008 4FF4E133 		mov	r3, #115200
 537 000c 4360     		str	r3, [r0, #4]
 409:Src/main.c    ****   huart6.Init.StopBits = UART_STOPBITS_1;
 538              		.loc 1 409 0
 539 000e 0023     		movs	r3, #0
 540 0010 8360     		str	r3, [r0, #8]
 410:Src/main.c    ****   huart6.Init.Parity = UART_PARITY_NONE;
 541              		.loc 1 410 0
ARM GAS  /tmp/ccgwJJgr.s 			page 20


 542 0012 C360     		str	r3, [r0, #12]
 411:Src/main.c    ****   huart6.Init.Mode = UART_MODE_TX_RX;
 543              		.loc 1 411 0
 544 0014 0361     		str	r3, [r0, #16]
 412:Src/main.c    ****   huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 545              		.loc 1 412 0
 546 0016 0C22     		movs	r2, #12
 547 0018 4261     		str	r2, [r0, #20]
 413:Src/main.c    ****   huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 548              		.loc 1 413 0
 549 001a 8361     		str	r3, [r0, #24]
 414:Src/main.c    ****   if (HAL_UART_Init(&huart6) != HAL_OK)
 550              		.loc 1 414 0
 551 001c C361     		str	r3, [r0, #28]
 415:Src/main.c    ****   {
 552              		.loc 1 415 0
 553 001e FFF7FEFF 		bl	HAL_UART_Init
 554              	.LVL32:
 555 0022 20B1     		cbz	r0, .L26
 417:Src/main.c    ****   }
 556              		.loc 1 417 0
 557 0024 40F2A111 		movw	r1, #417
 558 0028 0348     		ldr	r0, .L29+8
 559 002a FFF7FEFF 		bl	_Error_Handler
 560              	.LVL33:
 561              	.L26:
 562 002e 08BD     		pop	{r3, pc}
 563              	.L30:
 564              		.align	2
 565              	.L29:
 566 0030 00000000 		.word	huart6
 567 0034 00140140 		.word	1073812480
 568 0038 00000000 		.word	.LC0
 569              		.cfi_endproc
 570              	.LFE132:
 572              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 573              		.align	2
 574              		.thumb
 575              		.thumb_func
 577              	MX_USART2_UART_Init:
 578              	.LFB131:
 385:Src/main.c    **** 
 579              		.loc 1 385 0
 580              		.cfi_startproc
 581              		@ args = 0, pretend = 0, frame = 0
 582              		@ frame_needed = 0, uses_anonymous_args = 0
 583 0000 08B5     		push	{r3, lr}
 584              	.LCFI14:
 585              		.cfi_def_cfa_offset 8
 586              		.cfi_offset 3, -8
 587              		.cfi_offset 14, -4
 387:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 588              		.loc 1 387 0
 589 0002 0B48     		ldr	r0, .L34
 590 0004 0B4B     		ldr	r3, .L34+4
 591 0006 0360     		str	r3, [r0]
 388:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
ARM GAS  /tmp/ccgwJJgr.s 			page 21


 592              		.loc 1 388 0
 593 0008 4FF4E133 		mov	r3, #115200
 594 000c 4360     		str	r3, [r0, #4]
 389:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 595              		.loc 1 389 0
 596 000e 0023     		movs	r3, #0
 597 0010 8360     		str	r3, [r0, #8]
 390:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 598              		.loc 1 390 0
 599 0012 C360     		str	r3, [r0, #12]
 391:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 600              		.loc 1 391 0
 601 0014 0361     		str	r3, [r0, #16]
 392:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 602              		.loc 1 392 0
 603 0016 0C22     		movs	r2, #12
 604 0018 4261     		str	r2, [r0, #20]
 393:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 605              		.loc 1 393 0
 606 001a 8361     		str	r3, [r0, #24]
 394:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 607              		.loc 1 394 0
 608 001c C361     		str	r3, [r0, #28]
 395:Src/main.c    ****   {
 609              		.loc 1 395 0
 610 001e FFF7FEFF 		bl	HAL_UART_Init
 611              	.LVL34:
 612 0022 20B1     		cbz	r0, .L31
 397:Src/main.c    ****   }
 613              		.loc 1 397 0
 614 0024 40F28D11 		movw	r1, #397
 615 0028 0348     		ldr	r0, .L34+8
 616 002a FFF7FEFF 		bl	_Error_Handler
 617              	.LVL35:
 618              	.L31:
 619 002e 08BD     		pop	{r3, pc}
 620              	.L35:
 621              		.align	2
 622              	.L34:
 623 0030 00000000 		.word	huart2
 624 0034 00440040 		.word	1073759232
 625 0038 00000000 		.word	.LC0
 626              		.cfi_endproc
 627              	.LFE131:
 629              		.section	.text.MX_I2C1_Init,"ax",%progbits
 630              		.align	2
 631              		.thumb
 632              		.thumb_func
 634              	MX_I2C1_Init:
 635              	.LFB129:
 343:Src/main.c    **** 
 636              		.loc 1 343 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 0
 639              		@ frame_needed = 0, uses_anonymous_args = 0
 640 0000 08B5     		push	{r3, lr}
 641              	.LCFI15:
ARM GAS  /tmp/ccgwJJgr.s 			page 22


 642              		.cfi_def_cfa_offset 8
 643              		.cfi_offset 3, -8
 644              		.cfi_offset 14, -4
 345:Src/main.c    ****   hi2c1.Init.ClockSpeed = 400000;
 645              		.loc 1 345 0
 646 0002 0D48     		ldr	r0, .L39
 647 0004 0D4B     		ldr	r3, .L39+4
 648 0006 0360     		str	r3, [r0]
 346:Src/main.c    ****   //hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 649              		.loc 1 346 0
 650 0008 0D4B     		ldr	r3, .L39+8
 651 000a 4360     		str	r3, [r0, #4]
 348:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 652              		.loc 1 348 0
 653 000c 0023     		movs	r3, #0
 654 000e C360     		str	r3, [r0, #12]
 349:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 655              		.loc 1 349 0
 656 0010 4FF48042 		mov	r2, #16384
 657 0014 0261     		str	r2, [r0, #16]
 350:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 658              		.loc 1 350 0
 659 0016 4361     		str	r3, [r0, #20]
 351:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 660              		.loc 1 351 0
 661 0018 8361     		str	r3, [r0, #24]
 352:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 662              		.loc 1 352 0
 663 001a C361     		str	r3, [r0, #28]
 353:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 664              		.loc 1 353 0
 665 001c 0362     		str	r3, [r0, #32]
 354:Src/main.c    ****   {
 666              		.loc 1 354 0
 667 001e FFF7FEFF 		bl	HAL_I2C_Init
 668              	.LVL36:
 669 0022 20B1     		cbz	r0, .L37
 356:Src/main.c    ****   }
 670              		.loc 1 356 0
 671 0024 4FF4B271 		mov	r1, #356
 672 0028 0648     		ldr	r0, .L39+12
 673 002a FFF7FEFF 		bl	_Error_Handler
 674              	.LVL37:
 675              	.L37:
 359:Src/main.c    **** 
 676              		.loc 1 359 0
 677 002e 0021     		movs	r1, #0
 678 0030 0148     		ldr	r0, .L39
 679 0032 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 680              	.LVL38:
 681 0036 08BD     		pop	{r3, pc}
 682              	.L40:
 683              		.align	2
 684              	.L39:
 685 0038 00000000 		.word	hi2c1
 686 003c 00540040 		.word	1073763328
 687 0040 801A0600 		.word	400000
ARM GAS  /tmp/ccgwJJgr.s 			page 23


 688 0044 00000000 		.word	.LC0
 689              		.cfi_endproc
 690              	.LFE129:
 692              		.section	.text.SystemClock_Config,"ax",%progbits
 693              		.align	2
 694              		.global	SystemClock_Config
 695              		.thumb
 696              		.thumb_func
 698              	SystemClock_Config:
 699              	.LFB128:
 288:Src/main.c    **** 
 700              		.loc 1 288 0
 701              		.cfi_startproc
 702              		@ args = 0, pretend = 0, frame = 80
 703              		@ frame_needed = 0, uses_anonymous_args = 0
 704 0000 00B5     		push	{lr}
 705              	.LCFI16:
 706              		.cfi_def_cfa_offset 4
 707              		.cfi_offset 14, -4
 708 0002 95B0     		sub	sp, sp, #84
 709              	.LCFI17:
 710              		.cfi_def_cfa_offset 88
 711              	.LBB7:
 295:Src/main.c    **** 
 712              		.loc 1 295 0
 713 0004 0022     		movs	r2, #0
 714 0006 0192     		str	r2, [sp, #4]
 715 0008 2B4B     		ldr	r3, .L45
 716 000a 196C     		ldr	r1, [r3, #64]
 717 000c 41F08051 		orr	r1, r1, #268435456
 718 0010 1964     		str	r1, [r3, #64]
 719 0012 1B6C     		ldr	r3, [r3, #64]
 720 0014 03F08053 		and	r3, r3, #268435456
 721 0018 0193     		str	r3, [sp, #4]
 722 001a 019B     		ldr	r3, [sp, #4]
 723              	.LBE7:
 724              	.LBB8:
 297:Src/main.c    **** 
 725              		.loc 1 297 0
 726 001c 0292     		str	r2, [sp, #8]
 727 001e 2749     		ldr	r1, .L45+4
 728 0020 0B68     		ldr	r3, [r1]
 729 0022 23F44043 		bic	r3, r3, #49152
 730 0026 43F40043 		orr	r3, r3, #32768
 731 002a 0B60     		str	r3, [r1]
 732 002c 0B68     		ldr	r3, [r1]
 733 002e 03F44043 		and	r3, r3, #49152
 734 0032 0293     		str	r3, [sp, #8]
 735 0034 029B     		ldr	r3, [sp, #8]
 736              	.LBE8:
 301:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 737              		.loc 1 301 0
 738 0036 0221     		movs	r1, #2
 739 0038 0891     		str	r1, [sp, #32]
 302:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 740              		.loc 1 302 0
 741 003a 0123     		movs	r3, #1
ARM GAS  /tmp/ccgwJJgr.s 			page 24


 742 003c 0B93     		str	r3, [sp, #44]
 303:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 743              		.loc 1 303 0
 744 003e 1023     		movs	r3, #16
 745 0040 0C93     		str	r3, [sp, #48]
 304:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 746              		.loc 1 304 0
 747 0042 0E91     		str	r1, [sp, #56]
 305:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 748              		.loc 1 305 0
 749 0044 0F92     		str	r2, [sp, #60]
 306:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 750              		.loc 1 306 0
 751 0046 1093     		str	r3, [sp, #64]
 307:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 752              		.loc 1 307 0
 753 0048 4FF4A873 		mov	r3, #336
 754 004c 1193     		str	r3, [sp, #68]
 308:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 755              		.loc 1 308 0
 756 004e 0423     		movs	r3, #4
 757 0050 1293     		str	r3, [sp, #72]
 309:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 758              		.loc 1 309 0
 759 0052 0723     		movs	r3, #7
 760 0054 1393     		str	r3, [sp, #76]
 310:Src/main.c    ****   {
 761              		.loc 1 310 0
 762 0056 08A8     		add	r0, sp, #32
 763 0058 FFF7FEFF 		bl	HAL_RCC_OscConfig
 764              	.LVL39:
 765 005c 20B1     		cbz	r0, .L42
 312:Src/main.c    ****   }
 766              		.loc 1 312 0
 767 005e 4FF49C71 		mov	r1, #312
 768 0062 1748     		ldr	r0, .L45+8
 769 0064 FFF7FEFF 		bl	_Error_Handler
 770              	.LVL40:
 771              	.L42:
 317:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 772              		.loc 1 317 0
 773 0068 0F23     		movs	r3, #15
 774 006a 0393     		str	r3, [sp, #12]
 319:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 775              		.loc 1 319 0
 776 006c 0221     		movs	r1, #2
 777 006e 0491     		str	r1, [sp, #16]
 320:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 778              		.loc 1 320 0
 779 0070 0023     		movs	r3, #0
 780 0072 0593     		str	r3, [sp, #20]
 321:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 781              		.loc 1 321 0
 782 0074 4FF48052 		mov	r2, #4096
 783 0078 0692     		str	r2, [sp, #24]
 322:Src/main.c    **** 
 784              		.loc 1 322 0
ARM GAS  /tmp/ccgwJJgr.s 			page 25


 785 007a 0793     		str	r3, [sp, #28]
 324:Src/main.c    ****   {
 786              		.loc 1 324 0
 787 007c 03A8     		add	r0, sp, #12
 788 007e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 789              	.LVL41:
 790 0082 20B1     		cbz	r0, .L43
 326:Src/main.c    ****   }
 791              		.loc 1 326 0
 792 0084 4FF4A371 		mov	r1, #326
 793 0088 0D48     		ldr	r0, .L45+8
 794 008a FFF7FEFF 		bl	_Error_Handler
 795              	.LVL42:
 796              	.L43:
 331:Src/main.c    **** 
 797              		.loc 1 331 0
 798 008e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 799              	.LVL43:
 800 0092 0C4B     		ldr	r3, .L45+12
 801 0094 A3FB0030 		umull	r3, r0, r3, r0
 802 0098 8009     		lsrs	r0, r0, #6
 803 009a FFF7FEFF 		bl	HAL_SYSTICK_Config
 804              	.LVL44:
 335:Src/main.c    **** 
 805              		.loc 1 335 0
 806 009e 0420     		movs	r0, #4
 807 00a0 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 808              	.LVL45:
 338:Src/main.c    **** }
 809              		.loc 1 338 0
 810 00a4 0022     		movs	r2, #0
 811 00a6 1146     		mov	r1, r2
 812 00a8 4FF0FF30 		mov	r0, #-1
 813 00ac FFF7FEFF 		bl	HAL_NVIC_SetPriority
 814              	.LVL46:
 339:Src/main.c    **** 
 815              		.loc 1 339 0
 816 00b0 15B0     		add	sp, sp, #84
 817              	.LCFI18:
 818              		.cfi_def_cfa_offset 4
 819              		@ sp needed
 820 00b2 5DF804FB 		ldr	pc, [sp], #4
 821              	.L46:
 822 00b6 00BF     		.align	2
 823              	.L45:
 824 00b8 00380240 		.word	1073887232
 825 00bc 00700040 		.word	1073770496
 826 00c0 00000000 		.word	.LC0
 827 00c4 D34D6210 		.word	274877907
 828              		.cfi_endproc
 829              	.LFE128:
 831              		.global	__aeabi_i2d
 832              		.global	__aeabi_dmul
 833              		.global	__aeabi_ddiv
 834              		.global	__aeabi_d2iz
 835              		.global	__aeabi_dsub
 836              		.section	.text.main,"ax",%progbits
ARM GAS  /tmp/ccgwJJgr.s 			page 26


 837              		.align	2
 838              		.global	main
 839              		.thumb
 840              		.thumb_func
 842              	main:
 843              	.LFB127:
 162:Src/main.c    ****   SD_MPU6050_Result result ;
 844              		.loc 1 162 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 56
 847              		@ frame_needed = 0, uses_anonymous_args = 0
 848 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 849              	.LCFI19:
 850              		.cfi_def_cfa_offset 20
 851              		.cfi_offset 4, -20
 852              		.cfi_offset 5, -16
 853              		.cfi_offset 6, -12
 854              		.cfi_offset 7, -8
 855              		.cfi_offset 14, -4
 856 0002 2DED068B 		vpush.64	{d8, d9, d10}
 857              	.LCFI20:
 858              		.cfi_def_cfa_offset 44
 859              		.cfi_offset 80, -44
 860              		.cfi_offset 81, -40
 861              		.cfi_offset 82, -36
 862              		.cfi_offset 83, -32
 863              		.cfi_offset 84, -28
 864              		.cfi_offset 85, -24
 865 0006 9DB0     		sub	sp, sp, #116
 866              	.LCFI21:
 867              		.cfi_def_cfa_offset 160
 164:Src/main.c    ****   uint8_t mpu_not[17] = {"MPU NOT WORKING\n"};
 868              		.loc 1 164 0
 869 0008 B34B     		ldr	r3, .L55+16
 870 000a 18AC     		add	r4, sp, #96
 871 000c 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 872 000e 07C4     		stmia	r4!, {r0, r1, r2}
 873 0010 24F8023B 		strh	r3, [r4], #2	@ movhi
 874 0014 1B0C     		lsrs	r3, r3, #16
 875 0016 2370     		strb	r3, [r4]
 165:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 876              		.loc 1 165 0
 877 0018 13AC     		add	r4, sp, #76
 878 001a B04D     		ldr	r5, .L55+20
 879 001c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 880 001e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 881 0020 2B68     		ldr	r3, [r5]
 882 0022 2370     		strb	r3, [r4]
 169:Src/main.c    **** 
 883              		.loc 1 169 0
 884 0024 FFF7FEFF 		bl	HAL_Init
 885              	.LVL47:
 172:Src/main.c    **** 
 886              		.loc 1 172 0
 887 0028 FFF7FEFF 		bl	SystemClock_Config
 888              	.LVL48:
 175:Src/main.c    ****   MX_USART1_UART_Init();
ARM GAS  /tmp/ccgwJJgr.s 			page 27


 889              		.loc 1 175 0
 890 002c FFF7FEFF 		bl	MX_GPIO_Init
 891              	.LVL49:
 176:Src/main.c    ****   //MX_WWDG_Init();
 892              		.loc 1 176 0
 893 0030 FFF7FEFF 		bl	MX_USART1_UART_Init
 894              	.LVL50:
 178:Src/main.c    ****   MX_USART2_UART_Init();
 895              		.loc 1 178 0
 896 0034 FFF7FEFF 		bl	MX_USART6_UART_Init
 897              	.LVL51:
 179:Src/main.c    ****   MX_I2C1_Init();
 898              		.loc 1 179 0
 899 0038 FFF7FEFF 		bl	MX_USART2_UART_Init
 900              	.LVL52:
 180:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 901              		.loc 1 180 0
 902 003c FFF7FEFF 		bl	MX_I2C1_Init
 903              	.LVL53:
 181:Src/main.c    **** 
 904              		.loc 1 181 0
 905 0040 0122     		movs	r2, #1
 906 0042 4FF48071 		mov	r1, #256
 907 0046 A648     		ldr	r0, .L55+24
 908 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
 909              	.LVL54:
 183:Src/main.c    **** 
 910              		.loc 1 183 0
 911 004c 0323     		movs	r3, #3
 912 004e 0093     		str	r3, [sp]
 913 0050 0022     		movs	r2, #0
 914 0052 A449     		ldr	r1, .L55+28
 915 0054 A448     		ldr	r0, .L55+32
 916 0056 FFF7FEFF 		bl	SD_MPU6050_Init
 917              	.LVL55:
 185:Src/main.c    ****   {
 918              		.loc 1 185 0
 919 005a 38B9     		cbnz	r0, .L48
 187:Src/main.c    ****   }
 920              		.loc 1 187 0
 921 005c 4FF0FF33 		mov	r3, #-1
 922 0060 0F22     		movs	r2, #15
 923 0062 18A9     		add	r1, sp, #96
 924 0064 A148     		ldr	r0, .L55+36
 925              	.LVL56:
 926 0066 FFF7FEFF 		bl	HAL_UART_Transmit
 927              	.LVL57:
 928 006a 06E0     		b	.L51
 929              	.LVL58:
 930              	.L48:
 191:Src/main.c    ****   }
 931              		.loc 1 191 0
 932 006c 4FF0FF33 		mov	r3, #-1
 933 0070 1122     		movs	r2, #17
 934 0072 13A9     		add	r1, sp, #76
 935 0074 9D48     		ldr	r0, .L55+36
 936              	.LVL59:
ARM GAS  /tmp/ccgwJJgr.s 			page 28


 937 0076 FFF7FEFF 		bl	HAL_UART_Transmit
 938              	.LVL60:
 939              	.L51:
 940              	.LBB9:
 200:Src/main.c    ****      B3M_RunNormal(huart6, SERVO_ID_6);
 941              		.loc 1 200 0
 942 007a 9D4E     		ldr	r6, .L55+40
 943 007c 0123     		movs	r3, #1
 944 007e 0C93     		str	r3, [sp, #48]
 945 0080 6C46     		mov	r4, sp
 946 0082 06F11005 		add	r5, r6, #16
 947 0086 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 948 0088 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 949 008a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 950 008c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 951 008e 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 952 0092 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 953 0096 96E80F00 		ldmia	r6, {r0, r1, r2, r3}
 954 009a FFF7FEFF 		bl	B3M_RunNormal
 955              	.LVL61:
 201:Src/main.c    ****     // HAL_Delay(1);
 956              		.loc 1 201 0
 957 009e 954E     		ldr	r6, .L55+44
 958 00a0 0623     		movs	r3, #6
 959 00a2 0C93     		str	r3, [sp, #48]
 960 00a4 6C46     		mov	r4, sp
 961 00a6 06F11005 		add	r5, r6, #16
 962 00aa 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 963 00ac 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 964 00ae 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 965 00b0 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 966 00b2 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 967 00b6 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 968 00ba 96E80F00 		ldmia	r6, {r0, r1, r2, r3}
 969 00be FFF7FEFF 		bl	B3M_RunNormal
 970              	.LVL62:
 221:Src/main.c    ****     int16_t g_x = mpu1.Gyroscope_X;
 971              		.loc 1 221 0
 972 00c2 884F     		ldr	r7, .L55+28
 973 00c4 884C     		ldr	r4, .L55+32
 974 00c6 3946     		mov	r1, r7
 975 00c8 2046     		mov	r0, r4
 976 00ca FFF7FEFF 		bl	SD_MPU6050_ReadGyroscope
 977              	.LVL63:
 228:Src/main.c    ****     int16_t a_x = mpu1.Accelerometer_X / 4095;
 978              		.loc 1 228 0
 979 00ce 3946     		mov	r1, r7
 980 00d0 2046     		mov	r0, r4
 981 00d2 FFF7FEFF 		bl	SD_MPU6050_ReadAccelerometer
 982              	.LVL64:
 229:Src/main.c    ****     int16_t a_y = mpu1.Accelerometer_Y / 4095;
 983              		.loc 1 229 0
 984 00d6 B7F90C30 		ldrsh	r3, [r7, #12]
 985 00da 874C     		ldr	r4, .L55+48
 986 00dc 84FB0320 		smull	r2, r0, r4, r3
 987 00e0 1844     		add	r0, r0, r3
 988 00e2 DB17     		asrs	r3, r3, #31
ARM GAS  /tmp/ccgwJJgr.s 			page 29


 989 00e4 C3EBE020 		rsb	r0, r3, r0, asr #11
 990              	.LVL65:
 230:Src/main.c    ****     int16_t a_z = mpu1.Accelerometer_Z / 4095;
 991              		.loc 1 230 0
 992 00e8 B7F90E30 		ldrsh	r3, [r7, #14]
 993 00ec 84FB0326 		smull	r2, r6, r4, r3
 994 00f0 1E44     		add	r6, r6, r3
 995 00f2 DB17     		asrs	r3, r3, #31
 996 00f4 C3EBE626 		rsb	r6, r3, r6, asr #11
 997 00f8 36B2     		sxth	r6, r6
 998              	.LVL66:
 231:Src/main.c    **** 
 999              		.loc 1 231 0
 1000 00fa B7F91030 		ldrsh	r3, [r7, #16]
 1001 00fe 84FB0325 		smull	r2, r5, r4, r3
 1002 0102 1D44     		add	r5, r5, r3
 1003 0104 DB17     		asrs	r3, r3, #31
 1004 0106 C3EBE525 		rsb	r5, r3, r5, asr #11
 1005 010a 2DB2     		sxth	r5, r5
 1006              	.LVL67:
 233:Src/main.c    ****     int16_t acc_angle_y = atan2(a_y, a_z) * 360 / 2.0 / 3.1415;
 1007              		.loc 1 233 0
 1008 010c 00B2     		sxth	r0, r0
 1009 010e FFF7FEFF 		bl	__aeabi_i2d
 1010              	.LVL68:
 1011 0112 41EC180B 		vmov	d8, r0, r1
 1012 0116 2846     		mov	r0, r5
 1013 0118 FFF7FEFF 		bl	__aeabi_i2d
 1014              	.LVL69:
 1015 011c 41EC1A0B 		vmov	d10, r0, r1
 1016 0120 41EC110B 		vmov	d1, r0, r1
 1017 0124 B0EE480A 		vmov.f32	s0, s16
 1018 0128 F0EE680A 		vmov.f32	s1, s17
 1019 012c FFF7FEFF 		bl	atan2
 1020              	.LVL70:
 1021 0130 0022     		movs	r2, #0
 1022 0132 724B     		ldr	r3, .L55+52
 1023 0134 51EC100B 		vmov	r0, r1, d0
 1024 0138 FFF7FEFF 		bl	__aeabi_dmul
 1025              	.LVL71:
 1026 013c 0022     		movs	r2, #0
 1027 013e 704B     		ldr	r3, .L55+56
 1028 0140 FFF7FEFF 		bl	__aeabi_dmul
 1029              	.LVL72:
 1030 0144 60A3     		adr	r3, .L55
 1031 0146 D3E90023 		ldrd	r2, [r3]
 1032 014a FFF7FEFF 		bl	__aeabi_ddiv
 1033              	.LVL73:
 1034 014e FFF7FEFF 		bl	__aeabi_d2iz
 1035              	.LVL74:
 1036 0152 05B2     		sxth	r5, r0
 1037              	.LVL75:
 234:Src/main.c    ****     int16_t acc_angle_z = atan2(a_x, a_y) * 360 / 2.0 / 3.1415;
 1038              		.loc 1 234 0
 1039 0154 3046     		mov	r0, r6
 1040 0156 FFF7FEFF 		bl	__aeabi_i2d
 1041              	.LVL76:
ARM GAS  /tmp/ccgwJJgr.s 			page 30


 1042 015a 41EC190B 		vmov	d9, r0, r1
 1043 015e B0EE4A1A 		vmov.f32	s2, s20
 1044 0162 F0EE6A1A 		vmov.f32	s3, s21
 1045 0166 41EC100B 		vmov	d0, r0, r1
 1046 016a FFF7FEFF 		bl	atan2
 1047              	.LVL77:
 1048 016e 0022     		movs	r2, #0
 1049 0170 624B     		ldr	r3, .L55+52
 1050 0172 51EC100B 		vmov	r0, r1, d0
 1051 0176 FFF7FEFF 		bl	__aeabi_dmul
 1052              	.LVL78:
 1053 017a 0022     		movs	r2, #0
 1054 017c 604B     		ldr	r3, .L55+56
 1055 017e FFF7FEFF 		bl	__aeabi_dmul
 1056              	.LVL79:
 1057 0182 51A3     		adr	r3, .L55
 1058 0184 D3E90023 		ldrd	r2, [r3]
 1059 0188 FFF7FEFF 		bl	__aeabi_ddiv
 1060              	.LVL80:
 1061 018c FFF7FEFF 		bl	__aeabi_d2iz
 1062              	.LVL81:
 1063 0190 06B2     		sxth	r6, r0
 1064              	.LVL82:
 235:Src/main.c    **** 
 1065              		.loc 1 235 0
 1066 0192 B0EE491A 		vmov.f32	s2, s18
 1067 0196 F0EE691A 		vmov.f32	s3, s19
 1068 019a B0EE480A 		vmov.f32	s0, s16
 1069 019e F0EE680A 		vmov.f32	s1, s17
 1070 01a2 FFF7FEFF 		bl	atan2
 1071              	.LVL83:
 1072 01a6 0022     		movs	r2, #0
 1073 01a8 544B     		ldr	r3, .L55+52
 1074 01aa 51EC100B 		vmov	r0, r1, d0
 1075 01ae FFF7FEFF 		bl	__aeabi_dmul
 1076              	.LVL84:
 1077 01b2 0022     		movs	r2, #0
 1078 01b4 524B     		ldr	r3, .L55+56
 1079 01b6 FFF7FEFF 		bl	__aeabi_dmul
 1080              	.LVL85:
 1081 01ba 43A3     		adr	r3, .L55
 1082 01bc D3E90023 		ldrd	r2, [r3]
 1083 01c0 FFF7FEFF 		bl	__aeabi_ddiv
 1084              	.LVL86:
 1085 01c4 FFF7FEFF 		bl	__aeabi_d2iz
 1086              	.LVL87:
 1087 01c8 00B2     		sxth	r0, r0
 1088              	.LVL88:
 242:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)acc, strlen(acc), HAL_MAX_DELAY);
 1089              		.loc 1 242 0
 1090 01ca 0090     		str	r0, [sp]
 1091 01cc 3346     		mov	r3, r6
 1092 01ce 2A46     		mov	r2, r5
 1093 01d0 4C49     		ldr	r1, .L55+60
 1094 01d2 0EA8     		add	r0, sp, #56
 1095              	.LVL89:
 1096 01d4 FFF7FEFF 		bl	sprintf
ARM GAS  /tmp/ccgwJJgr.s 			page 31


 1097              	.LVL90:
 243:Src/main.c    **** 
 1098              		.loc 1 243 0
 1099 01d8 0EA8     		add	r0, sp, #56
 1100 01da FFF7FEFF 		bl	strlen
 1101              	.LVL91:
 1102 01de 4FF0FF33 		mov	r3, #-1
 1103 01e2 82B2     		uxth	r2, r0
 1104 01e4 0EA9     		add	r1, sp, #56
 1105 01e6 4148     		ldr	r0, .L55+36
 1106 01e8 FFF7FEFF 		bl	HAL_UART_Transmit
 1107              	.LVL92:
 252:Src/main.c    **** 
 1108              		.loc 1 252 0
 1109 01ec B7F90C50 		ldrsh	r5, [r7, #12]
 1110              	.LVL93:
 1111 01f0 B7F91030 		ldrsh	r3, [r7, #16]
 1112 01f4 84FB0320 		smull	r2, r0, r4, r3
 1113 01f8 1844     		add	r0, r0, r3
 1114 01fa DB17     		asrs	r3, r3, #31
 1115 01fc C3EBE020 		rsb	r0, r3, r0, asr #11
 1116 0200 00B2     		sxth	r0, r0
 1117 0202 FFF7FEFF 		bl	__aeabi_i2d
 1118              	.LVL94:
 1119 0206 0646     		mov	r6, r0
 1120              	.LVL95:
 1121 0208 0F46     		mov	r7, r1
 1122 020a 84FB0534 		smull	r3, r4, r4, r5
 1123 020e 2C44     		add	r4, r4, r5
 1124 0210 E817     		asrs	r0, r5, #31
 1125 0212 C0EBE420 		rsb	r0, r0, r4, asr #11
 1126 0216 00B2     		sxth	r0, r0
 1127 0218 FFF7FEFF 		bl	__aeabi_i2d
 1128              	.LVL96:
 1129 021c 47EC116B 		vmov	d1, r6, r7
 1130 0220 41EC100B 		vmov	d0, r0, r1
 1131 0224 FFF7FEFF 		bl	atan2
 1132              	.LVL97:
 1133 0228 0022     		movs	r2, #0
 1134 022a 344B     		ldr	r3, .L55+52
 1135 022c 51EC100B 		vmov	r0, r1, d0
 1136 0230 FFF7FEFF 		bl	__aeabi_dmul
 1137              	.LVL98:
 1138 0234 0022     		movs	r2, #0
 1139 0236 324B     		ldr	r3, .L55+56
 1140 0238 FFF7FEFF 		bl	__aeabi_dmul
 1141              	.LVL99:
 1142 023c 22A3     		adr	r3, .L55
 1143 023e D3E90023 		ldrd	r2, [r3]
 1144 0242 FFF7FEFF 		bl	__aeabi_ddiv
 1145              	.LVL100:
 1146 0246 0246     		mov	r2, r0
 1147 0248 0B46     		mov	r3, r1
 1148 024a 0020     		movs	r0, #0
 1149 024c 2E49     		ldr	r1, .L55+64
 1150 024e FFF7FEFF 		bl	__aeabi_dsub
 1151              	.LVL101:
ARM GAS  /tmp/ccgwJJgr.s 			page 32


 1152 0252 1FA3     		adr	r3, .L55+8
 1153 0254 D3E90023 		ldrd	r2, [r3]
 1154 0258 FFF7FEFF 		bl	__aeabi_dmul
 1155              	.LVL102:
 1156 025c FFF7FEFF 		bl	__aeabi_d2iz
 1157              	.LVL103:
 1158 0260 07B2     		sxth	r7, r0
 1159              	.LVL104:
 254:Src/main.c    ****     diff=9000;
 1160              		.loc 1 254 0
 1161 0262 42F22833 		movw	r3, #9000
 1162 0266 9F42     		cmp	r7, r3
 1163 0268 03DC     		bgt	.L52
 256:Src/main.c    ****     diff=-10000;
 1164              		.loc 1 256 0
 1165 026a 284B     		ldr	r3, .L55+68
 1166 026c 9F42     		cmp	r7, r3
 1167 026e 03DB     		blt	.L53
 1168 0270 03E0     		b	.L50
 1169              	.L52:
 255:Src/main.c    ****     else if(diff<-10000)
 1170              		.loc 1 255 0
 1171 0272 42F22837 		movw	r7, #9000
 1172              	.LVL105:
 1173 0276 00E0     		b	.L50
 1174              	.LVL106:
 1175              	.L53:
 257:Src/main.c    **** 
 1176              		.loc 1 257 0
 1177 0278 244F     		ldr	r7, .L55+68
 1178              	.LVL107:
 1179              	.L50:
 259:Src/main.c    ****     B3M_SetDesirePostion(huart6, SERVO_ID_6, diff);
 1180              		.loc 1 259 0
 1181 027a 1D4E     		ldr	r6, .L55+40
 1182 027c 0D97     		str	r7, [sp, #52]
 1183 027e 0123     		movs	r3, #1
 1184 0280 0C93     		str	r3, [sp, #48]
 1185 0282 6C46     		mov	r4, sp
 1186 0284 06F11005 		add	r5, r6, #16
 1187 0288 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1188 028a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1189 028c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1190 028e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1191 0290 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1192 0294 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 1193 0298 96E80F00 		ldmia	r6, {r0, r1, r2, r3}
 1194 029c FFF7FEFF 		bl	B3M_SetDesirePostion
 1195              	.LVL108:
 260:Src/main.c    **** 
 1196              		.loc 1 260 0
 1197 02a0 144E     		ldr	r6, .L55+44
 1198 02a2 0D97     		str	r7, [sp, #52]
 1199 02a4 0623     		movs	r3, #6
 1200 02a6 0C93     		str	r3, [sp, #48]
 1201 02a8 6C46     		mov	r4, sp
 1202 02aa 06F11005 		add	r5, r6, #16
ARM GAS  /tmp/ccgwJJgr.s 			page 33


 1203 02ae 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1204 02b0 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1205 02b2 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1206 02b4 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1207 02b6 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1208 02ba 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 1209 02be 96E80F00 		ldmia	r6, {r0, r1, r2, r3}
 1210 02c2 FFF7FEFF 		bl	B3M_SetDesirePostion
 1211              	.LVL109:
 1212              	.LBE9:
 281:Src/main.c    **** 
 1213              		.loc 1 281 0
 1214 02c6 D8E6     		b	.L51
 1215              	.L56:
 1216              		.align	3
 1217              	.L55:
 1218 02c8 6F1283C0 		.word	-1065151889
 1219 02cc CA210940 		.word	1074340298
 1220 02d0 CDCCCCCC 		.word	-858993459
 1221 02d4 CCEC5040 		.word	1079045324
 1222 02d8 28000000 		.word	.LC1
 1223 02dc 38000000 		.word	.LC2
 1224 02e0 00080240 		.word	1073874944
 1225 02e4 00000000 		.word	mpu1
 1226 02e8 00000000 		.word	hi2c1
 1227 02ec 00000000 		.word	huart2
 1228 02f0 00000000 		.word	huart1
 1229 02f4 00000000 		.word	huart6
 1230 02f8 81000880 		.word	-2146959231
 1231 02fc 00807640 		.word	1081507840
 1232 0300 0000E03F 		.word	1071644672
 1233 0304 0C000000 		.word	.LC3
 1234 0308 00805640 		.word	1079410688
 1235 030c F0D8FFFF 		.word	-10000
 1236              		.cfi_endproc
 1237              	.LFE127:
 1239              		.comm	mpu1,28,4
 1240              		.comm	hi2c1,84,4
 1241              		.comm	huart6,64,4
 1242              		.comm	huart2,64,4
 1243              		.comm	huart1,64,4
 1244              		.section	.rodata.str1.4,"aMS",%progbits,1
 1245              		.align	2
 1246              	.LC0:
 1247 0000 5372632F 		.ascii	"Src/main.c\000"
 1247      6D61696E 
 1247      2E6300
 1248 000b 00       		.space	1
 1249              	.LC3:
 1250 000c 20616363 		.ascii	" acc x: %i y: %i z: %i\012\015\012\015\000"
 1250      20783A20 
 1250      25692079 
 1250      3A202569 
 1250      207A3A20 
 1251 0027 00       		.space	1
 1252              	.LC1:
 1253 0028 4D505520 		.ascii	"MPU WORK FINE\012\000"
ARM GAS  /tmp/ccgwJJgr.s 			page 34


 1253      574F524B 
 1253      2046494E 
 1253      450A00
 1254 0037 00       		.space	1
 1255              	.LC2:
 1256 0038 4D505520 		.ascii	"MPU NOT WORKING\012\000"
 1256      4E4F5420 
 1256      574F524B 
 1256      494E470A 
 1256      00
 1257              		.text
 1258              	.Letext0:
 1259              		.file 2 "/home/ryouya/STM32Toolchain/gcc-arm-none-eabi-5_4-2016q3.2/arm-none-eabi/include/machine/
 1260              		.file 3 "/home/ryouya/STM32Toolchain/gcc-arm-none-eabi-5_4-2016q3.2/arm-none-eabi/include/sys/_std
 1261              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1262              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1263              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1264              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1265              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1266              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1267              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 1268              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1269              		.file 12 "Inc/sd_hal_mpu6050.h"
 1270              		.file 13 "Drivers/CMSIS/Include/core_cm4.h"
 1271              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1272              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c_ex.h"
 1273              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1274              		.file 17 "Inc/B3M.h"
 1275              		.file 18 "<built-in>"
 1276              		.file 19 "/home/ryouya/STM32Toolchain/gcc-arm-none-eabi-5_4-2016q3.2/arm-none-eabi/include/stdio.h
 1277              		.file 20 "/home/ryouya/STM32Toolchain/gcc-arm-none-eabi-5_4-2016q3.2/arm-none-eabi/include/string.
ARM GAS  /tmp/ccgwJJgr.s 			page 35


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccgwJJgr.s:22     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccgwJJgr.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccgwJJgr.s:155    .text.MX_GPIO_Init:000000b4 $d
     /tmp/ccgwJJgr.s:163    .text.setModeToNormal:00000000 $t
     /tmp/ccgwJJgr.s:168    .text.setModeToNormal:00000000 setModeToNormal
     /tmp/ccgwJJgr.s:223    .text.setModeToNormal:00000048 $d
                            *COM*:00000040 huart1
     /tmp/ccgwJJgr.s:228    .text.setAngle:00000000 $t
     /tmp/ccgwJJgr.s:233    .text.setAngle:00000000 setAngle
     /tmp/ccgwJJgr.s:356    .text.setAngle:000000a8 $d
                            *COM*:00000040 huart2
     /tmp/ccgwJJgr.s:362    .text.setFree:00000000 $t
     /tmp/ccgwJJgr.s:367    .text.setFree:00000000 setFree
     /tmp/ccgwJJgr.s:432    .text.setFree:00000058 $d
     /tmp/ccgwJJgr.s:438    .text._Error_Handler:00000000 $t
     /tmp/ccgwJJgr.s:443    .text._Error_Handler:00000000 _Error_Handler
     /tmp/ccgwJJgr.s:458    .text.MX_USART1_UART_Init:00000000 $t
     /tmp/ccgwJJgr.s:462    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
     /tmp/ccgwJJgr.s:509    .text.MX_USART1_UART_Init:00000030 $d
     /tmp/ccgwJJgr.s:516    .text.MX_USART6_UART_Init:00000000 $t
     /tmp/ccgwJJgr.s:520    .text.MX_USART6_UART_Init:00000000 MX_USART6_UART_Init
     /tmp/ccgwJJgr.s:566    .text.MX_USART6_UART_Init:00000030 $d
                            *COM*:00000040 huart6
     /tmp/ccgwJJgr.s:573    .text.MX_USART2_UART_Init:00000000 $t
     /tmp/ccgwJJgr.s:577    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
     /tmp/ccgwJJgr.s:623    .text.MX_USART2_UART_Init:00000030 $d
     /tmp/ccgwJJgr.s:630    .text.MX_I2C1_Init:00000000 $t
     /tmp/ccgwJJgr.s:634    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
     /tmp/ccgwJJgr.s:685    .text.MX_I2C1_Init:00000038 $d
                            *COM*:00000054 hi2c1
     /tmp/ccgwJJgr.s:693    .text.SystemClock_Config:00000000 $t
     /tmp/ccgwJJgr.s:698    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccgwJJgr.s:824    .text.SystemClock_Config:000000b8 $d
     /tmp/ccgwJJgr.s:837    .text.main:00000000 $t
     /tmp/ccgwJJgr.s:842    .text.main:00000000 main
     /tmp/ccgwJJgr.s:1218   .text.main:000002c8 $d
                            *COM*:0000001c mpu1
     /tmp/ccgwJJgr.s:1245   .rodata.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Transmit
HAL_Delay
HAL_UART_Receive
HAl_Delay
HAL_UART_Init
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
ARM GAS  /tmp/ccgwJJgr.s 			page 36


HAL_NVIC_SetPriority
__aeabi_i2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2iz
__aeabi_dsub
HAL_Init
SD_MPU6050_Init
B3M_RunNormal
SD_MPU6050_ReadGyroscope
SD_MPU6050_ReadAccelerometer
atan2
sprintf
strlen
B3M_SetDesirePostion
