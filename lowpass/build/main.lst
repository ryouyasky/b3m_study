ARM GAS  /tmp/ccSR0QsN.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"main.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.MX_GPIO_Init,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB133:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   ** This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * COPYRIGHT(c) 2017 STMicroelectronics
  13:Src/main.c    ****   *
  14:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    ****   * are permitted provided that the following conditions are met:
  16:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  18:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    ****   *      and/or other materials provided with the distribution.
  21:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  23:Src/main.c    ****   *      without specific prior written permission.
  24:Src/main.c    ****   *
  25:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  /tmp/ccSR0QsN.s 			page 2


  31:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  32:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:Src/main.c    ****   *
  36:Src/main.c    ****   ******************************************************************************
  37:Src/main.c    ****   */
  38:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  39:Src/main.c    **** #include "main.h"
  40:Src/main.c    **** #include "stm32f4xx_hal.h"
  41:Src/main.c    **** //#include "usart.h"
  42:Src/main.c    **** #include "B3M.h"
  43:Src/main.c    **** #include "string.h"
  44:Src/main.c    **** #include "sd_hal_mpu6050.h"
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  47:Src/main.c    **** UART_HandleTypeDef huart1;
  48:Src/main.c    **** UART_HandleTypeDef huart2;
  49:Src/main.c    **** UART_HandleTypeDef huart6;
  50:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  51:Src/main.c    **** SD_MPU6050 mpu1;
  52:Src/main.c    **** 
  53:Src/main.c    **** //WWDG_HandleTypeDef hwwdg;
  54:Src/main.c    **** 
  55:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  56:Src/main.c    **** 
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  59:Src/main.c    **** void SystemClock_Config(void);
  60:Src/main.c    **** static void MX_GPIO_Init(void);
  61:Src/main.c    **** static void MX_USART2_UART_Init(void);
  62:Src/main.c    **** static void MX_USART1_UART_Init(void);
  63:Src/main.c    **** //static void MX_WWDG_Init(void);
  64:Src/main.c    **** static void MX_USART6_UART_Init(void);
  65:Src/main.c    **** static void MX_I2C1_Init(void);
  66:Src/main.c    **** 
  67:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  68:Src/main.c    **** 
  69:Src/main.c    **** void setModeToNormal(/*unsigned char ID*/)
  70:Src/main.c    **** {
  71:Src/main.c    ****     uint8_t TxData[8];   // TransmitByteData [1 byte]
  72:Src/main.c    ****     //uint8_t CheckSum = 0; // CheckSum calculation
  73:Src/main.c    **** 
  74:Src/main.c    ****     TxData[0] = 0x08;   // All Byte
  75:Src/main.c    ****     TxData[1] = 0x04;   // Command
  76:Src/main.c    ****     TxData[2] = 0x00;   // Option/Status
  77:Src/main.c    ****     TxData[3] = 0x00;   // ID
  78:Src/main.c    ****     TxData[4] = 0x00;   // mode
  79:Src/main.c    ****     TxData[5] = 0x28;   // address
  80:Src/main.c    ****     TxData[6] = 0x01; // device number
  81:Src/main.c    ****     TxData[7] = 0x35;   // Sum
  82:Src/main.c    **** 
  83:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t*)TxData, 8, HAL_MAX_DELAY);
  84:Src/main.c    ****     HAL_Delay(1);
  85:Src/main.c    **** 
  86:Src/main.c    **** }
  87:Src/main.c    **** 
ARM GAS  /tmp/ccSR0QsN.s 			page 3


  88:Src/main.c    **** void setAngle(int16_t angle)
  89:Src/main.c    **** {
  90:Src/main.c    ****     uint8_t TxData[9];   // TransmitByteData [9 bits]
  91:Src/main.c    ****     uint8_t CheckSum = 0; // CheckSum calculation
  92:Src/main.c    ****     uint8_t RxData[9];
  93:Src/main.c    **** 
  94:Src/main.c    ****     if(angle<0)
  95:Src/main.c    ****         angle = 65535+angle+1;
  96:Src/main.c    **** 
  97:Src/main.c    ****     TxData[0] = 0x09;                 // All Byte
  98:Src/main.c    ****     TxData[1] = 0x04;                       // Command
  99:Src/main.c    ****     TxData[2] = 0x00;                       // Option/Status
 100:Src/main.c    ****     TxData[3] = 0x00;                         // ID
 101:Src/main.c    ****     TxData[4] = (uint8_t)0x00FF & angle;              //  mode
 102:Src/main.c    ****     TxData[5] = (uint8_t)0x00FF & (angle >> 8);       // address
 103:Src/main.c    ****     TxData[6] = 0x2A;                         // device number
 104:Src/main.c    ****     TxData[7] = 0x01;                     // Count
 105:Src/main.c    **** 
 106:Src/main.c    ****     // CheckSum calculation
 107:Src/main.c    ****     for(unsigned char i=0; i<=7; i++){
 108:Src/main.c    ****         CheckSum = CheckSum + TxData[i];                // XOR from ID to Data
 109:Src/main.c    ****     }
 110:Src/main.c    ****     CheckSum = (uint8_t)0x00FF & CheckSum;
 111:Src/main.c    **** 
 112:Src/main.c    ****     TxData[8] = CheckSum;
 113:Src/main.c    **** 
 114:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t*)TxData, 9, HAL_MAX_DELAY);
 115:Src/main.c    ****     HAL_Delay(1);
 116:Src/main.c    ****     HAL_UART_Receive(&huart1, (uint8_t*)RxData, 9, HAL_MAX_DELAY);
 117:Src/main.c    ****     HAL_Delay(1);
 118:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)RxData, 9, HAL_MAX_DELAY);
 119:Src/main.c    ****     HAl_Delay(1);
 120:Src/main.c    ****     /*追加*/
 121:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)TxData, 9, HAL_MAX_DELAY);
 122:Src/main.c    ****     HAL_Delay(1);
 123:Src/main.c    **** }
 124:Src/main.c    **** 
 125:Src/main.c    **** void setFree (/*unsigned char ID*/)
 126:Src/main.c    **** {
 127:Src/main.c    ****     uint8_t TxData[8];   // TransmitByteData [1byte]
 128:Src/main.c    **** 
 129:Src/main.c    ****     TxData[0] = 0x08;          // All Byte
 130:Src/main.c    ****     TxData[1] = 0x04;          // Command
 131:Src/main.c    ****     TxData[2] = 0x00;          // Option/Status
 132:Src/main.c    ****     TxData[3] = 0x00;          // ID
 133:Src/main.c    ****     TxData[4] = 0x02;          //  mode
 134:Src/main.c    ****     TxData[5] = 0x28;          // address
 135:Src/main.c    ****     TxData[6] = 0x01;          // device number
 136:Src/main.c    ****     TxData[7] = 0x37;          // Sum
 137:Src/main.c    **** 
 138:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t*)TxData, 8, HAL_MAX_DELAY);
 139:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)TxData, 8, HAL_MAX_DELAY);
 140:Src/main.c    ****     HAL_Delay(1);
 141:Src/main.c    **** }
 142:Src/main.c    **** 
 143:Src/main.c    **** //void setGain (/*unsigned char ID*/){
 144:Src/main.c    **** //  uint8_t TxData[8];   // TransmitByteData [10byte]
ARM GAS  /tmp/ccSR0QsN.s 			page 4


 145:Src/main.c    **** //
 146:Src/main.c    **** //    TxData[0] = 0x08;          // All Byte
 147:Src/main.c    **** //    TxData[1] = 0x04;          // Command
 148:Src/main.c    **** //    TxData[2] = 0x00;          // Option/Status
 149:Src/main.c    **** //    TxData[3] = 0x00;          // ID
 150:Src/main.c    **** //    TxData[4] = 0x02;          //  mode
 151:Src/main.c    **** //    TxData[5] = 0x5C;          // address
 152:Src/main.c    **** //    TxData[6] = 0x01;          // device number
 153:Src/main.c    **** //    TxData[7] = 0x69;          // Sum
 154:Src/main.c    **** //
 155:Src/main.c    **** //    HAL_UART_Transmit(&huart1, (uint8_t*)TxData, 8, HAL_MAX_DELAY);
 156:Src/main.c    **** //    HAL_UART_Transmit(&huart2, (uint8_t*)TxData, 8, HAL_MAX_DELAY);
 157:Src/main.c    **** //    HAL_Delay(1);               // Wait for transmission
 158:Src/main.c    **** //}
 159:Src/main.c    **** 
 160:Src/main.c    **** 
 161:Src/main.c    **** int main(void)
 162:Src/main.c    **** {
 163:Src/main.c    ****   SD_MPU6050_Result result ;
 164:Src/main.c    ****   uint8_t mpu_ok[15] = {"MPU WORK FINE\n"};
 165:Src/main.c    ****   uint8_t mpu_not[17] = {"MPU NOT WORKING\n"};
 166:Src/main.c    **** 
 167:Src/main.c    ****   int16_t diff = 0; //IMU出力角度
 168:Src/main.c    ****   int16_t before = 0;
 169:Src/main.c    ****   int16_t tf = 0.95;
 170:Src/main.c    ****   int16_t lp = 0;
 171:Src/main.c    **** 
 172:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 173:Src/main.c    **** 
 174:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 175:Src/main.c    ****   HAL_Init();
 176:Src/main.c    **** 
 177:Src/main.c    ****   /* Configure the system clock */
 178:Src/main.c    ****   SystemClock_Config();
 179:Src/main.c    **** 
 180:Src/main.c    ****   /* Initialize all configured peripherals */
 181:Src/main.c    ****   MX_GPIO_Init();
 182:Src/main.c    ****   MX_USART1_UART_Init();
 183:Src/main.c    ****   //MX_WWDG_Init();
 184:Src/main.c    ****   MX_USART6_UART_Init();
 185:Src/main.c    ****   MX_USART2_UART_Init();
 186:Src/main.c    ****   MX_I2C1_Init();
 187:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 188:Src/main.c    **** 
 189:Src/main.c    **** 
 190:Src/main.c    ****   result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_16G,SD_MPU6050
 191:Src/main.c    **** 
 192:Src/main.c    ****   if(result == SD_MPU6050_Result_Ok)
 193:Src/main.c    ****   {
 194:Src/main.c    ****     HAL_UART_Transmit(&huart2,mpu_ok,(uint16_t)15, HAL_MAX_DELAY);
 195:Src/main.c    ****   }
 196:Src/main.c    ****   else
 197:Src/main.c    ****   {
 198:Src/main.c    ****     HAL_UART_Transmit(&huart2, mpu_not, (uint16_t)17, HAL_MAX_DELAY);
 199:Src/main.c    ****   }
 200:Src/main.c    **** 
 201:Src/main.c    ****   B3M_RunNormal(huart1, SERVO_ID_1);
ARM GAS  /tmp/ccSR0QsN.s 			page 5


 202:Src/main.c    ****   B3M_RunNormal(huart6, SERVO_ID_6);
 203:Src/main.c    ****   //SD_MPU6050_ReadAccelerometer(&hi2c1,&mpu1);
 204:Src/main.c    **** 
 205:Src/main.c    ****   /* Infinite loop */
 206:Src/main.c    ****   while (1)
 207:Src/main.c    ****   {
 208:Src/main.c    **** 
 209:Src/main.c    ****     if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==GPIO_PIN_RESET){
 210:Src/main.c    ****       B3M_RunNormal(huart1, SERVO_ID_1);
 211:Src/main.c    ****       B3M_RunNormal(huart6, SERVO_ID_6);
 212:Src/main.c    ****       HAL_Delay(200);
 213:Src/main.c    ****     }
 214:Src/main.c    **** 
 215:Src/main.c    ****     B3M_RunNormal(huart1, SERVO_ID_1);
 216:Src/main.c    ****     B3M_RunNormal(huart6, SERVO_ID_6);
 217:Src/main.c    ****     //setModeToNormal();
 218:Src/main.c    ****     //HAL_Delay(1000);
 219:Src/main.c    ****     // HAL_Delay(1);
 220:Src/main.c    ****     //B3M_Write_1B(huart1, SERVO_ID_0, OPERATION_MODE_RunNormal, SERVO_TORQUE_ON);
 221:Src/main.c    ****     //HAL_Delay(100);
 222:Src/main.c    **** 
 223:Src/main.c    ****     /*サーボ回転角度指定 */
 224:Src/main.c    **** 
 225:Src/main.c    ****     B3M_SetDesirePostion(huart1, SERVO_ID_1, 1000);
 226:Src/main.c    ****     B3M_SetDesirePostion(huart6, SERVO_ID_6, 6000);
 227:Src/main.c    ****     HAL_Delay(1000);
 228:Src/main.c    **** 
 229:Src/main.c    ****     B3M_SetDesirePostion(huart1, SERVO_ID_1, -1000);
 230:Src/main.c    ****     B3M_SetDesirePostion(huart6, SERVO_ID_6, -6000);
 231:Src/main.c    ****     HAL_Delay(1000);
 232:Src/main.c    **** 
 233:Src/main.c    **** 
 234:Src/main.c    ****     char gyro[20], acc[20];
 235:Src/main.c    ****     /*
 236:Src/main.c    ****     SD_MPU6050_ReadGyroscope(&hi2c1,&mpu1);
 237:Src/main.c    ****     int16_t g_x = mpu1.Gyroscope_X;
 238:Src/main.c    ****     int16_t g_y = mpu1.Gyroscope_Y;
 239:Src/main.c    ****     int16_t g_z = mpu1.Gyroscope_Z;
 240:Src/main.c    ****     */
 241:Src/main.c    ****     //default int16_t
 242:Src/main.c    ****     //HAL_UART_Transmit(&huart2, (uint16_t*)(&g_x), 16,HAL_MAX_DELAY);
 243:Src/main.c    ****     //before = mpu1.Accelerometer_X;
 244:Src/main.c    ****     SD_MPU6050_ReadAccelerometer(&hi2c1,&mpu1);
 245:Src/main.c    ****     /*
 246:Src/main.c    ****     int16_t a_x = mpu1.Accelerometer_X / 4095;
 247:Src/main.c    ****     int16_t a_y = mpu1.Accelerometer_Y / 4095;
 248:Src/main.c    ****     int16_t a_z = mpu1.Accelerometer_Z / 4095;
 249:Src/main.c    **** 
 250:Src/main.c    ****     int16_t acc_angle_x = atan2(a_x, a_z) * 360 / 2.0 / 3.1415;
 251:Src/main.c    ****     int16_t acc_angle_y = atan2(a_y, a_z) * 360 / 2.0 / 3.1415;
 252:Src/main.c    ****     int16_t acc_angle_z = atan2(a_x, a_y) * 360 / 2.0 / 3.1415;
 253:Src/main.c    ****     */
 254:Src/main.c    ****     /*
 255:Src/main.c    ****     収縮化
 256:Src/main.c    ****     for(u_int i=0; i<10; i++){
 257:Src/main.c    ****       SD_MPU6050_ReadAccelerometer(&hi2c1,&mpu1);
 258:Src/main.c    ****       diff = mpu1.Accelerometer_X + diff;
ARM GAS  /tmp/ccSR0QsN.s 			page 6


 259:Src/main.c    ****     }
 260:Src/main.c    **** 
 261:Src/main.c    ****     diff = diff * 0.5 / 10 ;
 262:Src/main.c    ****     */
 263:Src/main.c    **** 
 264:Src/main.c    ****     /*ジャイロ
 265:Src/main.c    ****     sprintf(gyro, "gyr x: %d y: %d z: %d  \n\r", g_x, g_y, g_z);
 266:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)gyro, strlen(gyro), HAL_MAX_DELAY);
 267:Src/main.c    ****     */
 268:Src/main.c    **** 
 269:Src/main.c    ****     //ローパスフィルタ
 270:Src/main.c    ****     //y = exp(-st/tc) * (x-1) + (1-exp(-st/tc)) * val
 271:Src/main.c    ****     //lp = tf * before + (1 - tf) * mpu1.Accelerometer_X;
 272:Src/main.c    ****     lp = tf * before + (1 - tf) * mpu1.Accelerometer_X;
 273:Src/main.c    **** 
 274:Src/main.c    ****     //加速度角度表記
 275:Src/main.c    ****     sprintf(acc, "%i\n\r", lp);
 276:Src/main.c    ****     //sprintf(acc, " acc x: %i y: %i z: %i\n\r\n\r", acc_angle_x, acc_angle_y, acc_angle_z);
 277:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)acc, strlen(acc), HAL_MAX_DELAY);
 278:Src/main.c    ****     //HAL_Delay(50);
 279:Src/main.c    **** 
 280:Src/main.c    ****     diff   = tf * before + (1 - tf) * mpu1.Accelerometer_X ;
 281:Src/main.c    ****     before = diff;
 282:Src/main.c    ****     diff   = diff * 0.55;
 283:Src/main.c    ****     if(diff > 9000)
 284:Src/main.c    ****       diff = 9000;
 285:Src/main.c    **** 
 286:Src/main.c    ****     if(diff < -10000)
 287:Src/main.c    ****       diff = -10000;
 288:Src/main.c    **** 
 289:Src/main.c    ****     B3M_SetDesirePostion(huart1, SERVO_ID_1, diff);
 290:Src/main.c    ****    //B3M_SetDesirePostion(huart6, SERVO_ID_6, diff);
 291:Src/main.c    **** 
 292:Src/main.c    **** 
 293:Src/main.c    ****     /*
 294:Src/main.c    ****     if(acc_angle_x == 90){
 295:Src/main.c    ****       B3M_SetDesirePostion(huart6, SERVO_ID_0, 0);
 296:Src/main.c    ****           HAL_Delay(10);
 297:Src/main.c    ****     }
 298:Src/main.c    ****     */
 299:Src/main.c    ****     /*
 300:Src/main.c    ****     for(u_int i=0; i<90; i++){
 301:Src/main.c    ****       B3M_SetDesirePostion(huart1, SERVO_ID_1, diff);
 302:Src/main.c    ****       diff = diff + 100;
 303:Src/main.c    ****     }
 304:Src/main.c    ****     B3M_SetDesirePostion(huart1, SERVO_ID_1, 0);
 305:Src/main.c    ****     diff =0;
 306:Src/main.c    ****     HAL_Delay(250);
 307:Src/main.c    **** 
 308:Src/main.c    ****     B3M_SetDesirePostion(huart1, SERVO_ID_1, -4000);
 309:Src/main.c    ****     HAL_Delay(250);
 310:Src/main.c    ****     B3M_SetDesirePostion(huart1, SERVO_ID_1, 4000);
 311:Src/main.c    ****     HAL_Delay(250);
 312:Src/main.c    ****     */
 313:Src/main.c    **** 
 314:Src/main.c    ****   }
 315:Src/main.c    **** 
ARM GAS  /tmp/ccSR0QsN.s 			page 7


 316:Src/main.c    **** }
 317:Src/main.c    **** 
 318:Src/main.c    **** /** System Clock Configuration　
 319:Src/main.c    **** */
 320:Src/main.c    **** void SystemClock_Config(void)
 321:Src/main.c    **** {
 322:Src/main.c    **** 
 323:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 324:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 325:Src/main.c    **** 
 326:Src/main.c    ****     /**Configure the main internal regulator output voltage
 327:Src/main.c    ****     */
 328:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 329:Src/main.c    **** 
 330:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);//voltage smooth
 331:Src/main.c    **** 
 332:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 333:Src/main.c    ****     */
 334:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 335:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 336:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 337:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 338:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 339:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 340:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 341:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 342:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 343:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 344:Src/main.c    ****   {
 345:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 346:Src/main.c    ****   }
 347:Src/main.c    **** 
 348:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 349:Src/main.c    ****     */
 350:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 351:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 352:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 353:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 354:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 355:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 356:Src/main.c    **** 
 357:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 358:Src/main.c    ****   {
 359:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 360:Src/main.c    ****   }
 361:Src/main.c    **** 
 362:Src/main.c    ****     /**Configure the Systick interrupt time
 363:Src/main.c    ****     */
 364:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 365:Src/main.c    **** 
 366:Src/main.c    ****     /**Configure the Systick
 367:Src/main.c    ****     */
 368:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 369:Src/main.c    **** 
 370:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 371:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 372:Src/main.c    **** }
ARM GAS  /tmp/ccSR0QsN.s 			page 8


 373:Src/main.c    **** 
 374:Src/main.c    **** /* I2C1 init function */
 375:Src/main.c    **** static void MX_I2C1_Init(void)
 376:Src/main.c    **** {
 377:Src/main.c    **** 
 378:Src/main.c    ****   hi2c1.Instance = I2C1;
 379:Src/main.c    ****   hi2c1.Init.ClockSpeed = 400000;
 380:Src/main.c    ****   //hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 381:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 382:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 383:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 384:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 385:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 386:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 387:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 388:Src/main.c    ****   {
 389:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 390:Src/main.c    ****   }
 391:Src/main.c    **** 
 392:Src/main.c    ****   HAL_I2CEx_AnalogFilter_Config(&hi2c1, I2C_ANALOGFILTER_ENABLED);
 393:Src/main.c    **** 
 394:Src/main.c    **** }
 395:Src/main.c    **** 
 396:Src/main.c    **** /* USART1 init function */
 397:Src/main.c    **** static void MX_USART1_UART_Init(void)
 398:Src/main.c    **** {
 399:Src/main.c    **** 
 400:Src/main.c    ****   huart1.Instance = USART1;
 401:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 402:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 403:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 404:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 405:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 406:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 407:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 408:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 409:Src/main.c    ****   {
 410:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 411:Src/main.c    ****   }
 412:Src/main.c    **** 
 413:Src/main.c    **** }
 414:Src/main.c    **** 
 415:Src/main.c    **** /* USART2 init function */
 416:Src/main.c    **** 
 417:Src/main.c    **** static void MX_USART2_UART_Init(void)
 418:Src/main.c    **** {
 419:Src/main.c    **** 
 420:Src/main.c    ****   huart2.Instance = USART2;
 421:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 422:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 423:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 424:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 425:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 426:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 427:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 428:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 429:Src/main.c    ****   {
ARM GAS  /tmp/ccSR0QsN.s 			page 9


 430:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 431:Src/main.c    ****   }
 432:Src/main.c    **** 
 433:Src/main.c    **** }
 434:Src/main.c    **** 
 435:Src/main.c    **** 
 436:Src/main.c    **** /* USART6 init function */
 437:Src/main.c    **** static void MX_USART6_UART_Init(void)
 438:Src/main.c    **** {
 439:Src/main.c    **** 
 440:Src/main.c    ****   huart6.Instance = USART6;
 441:Src/main.c    ****   huart6.Init.BaudRate = 115200;
 442:Src/main.c    ****   huart6.Init.WordLength = UART_WORDLENGTH_8B;
 443:Src/main.c    ****   huart6.Init.StopBits = UART_STOPBITS_1;
 444:Src/main.c    ****   huart6.Init.Parity = UART_PARITY_NONE;
 445:Src/main.c    ****   huart6.Init.Mode = UART_MODE_TX_RX;
 446:Src/main.c    ****   huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 447:Src/main.c    ****   huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 448:Src/main.c    ****   if (HAL_UART_Init(&huart6) != HAL_OK)
 449:Src/main.c    ****   {
 450:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 451:Src/main.c    ****   }
 452:Src/main.c    **** 
 453:Src/main.c    **** }
 454:Src/main.c    **** 
 455:Src/main.c    **** /* WWDG init function */
 456:Src/main.c    **** //static void MX_WWDG_Init(void)
 457:Src/main.c    **** //{
 458:Src/main.c    **** //
 459:Src/main.c    **** //  hwwdg.Instance = WWDG;
 460:Src/main.c    **** //  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 461:Src/main.c    **** //  hwwdg.Init.Window = 64;
 462:Src/main.c    **** //  hwwdg.Init.Counter = 64;
 463:Src/main.c    **** //  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 464:Src/main.c    **** //  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 465:Src/main.c    **** //  {
 466:Src/main.c    **** //    _Error_Handler(__FILE__, __LINE__);
 467:Src/main.c    **** //  }
 468:Src/main.c    **** //
 469:Src/main.c    **** //}
 470:Src/main.c    **** 
 471:Src/main.c    **** /** Configure pins as
 472:Src/main.c    ****         * Analog
 473:Src/main.c    ****         * Input
 474:Src/main.c    ****         * Output
 475:Src/main.c    ****         * EVENT_OUT
 476:Src/main.c    ****         * EXTI
 477:Src/main.c    **** */
 478:Src/main.c    **** static void MX_GPIO_Init(void)
 479:Src/main.c    **** {
  29              		.loc 1 479 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 40
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/ccSR0QsN.s 			page 10


  36              		.cfi_offset 4, -20
  37              		.cfi_offset 5, -16
  38              		.cfi_offset 6, -12
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 8BB0     		sub	sp, sp, #44
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 64
  44              	.LBB2:
 480:Src/main.c    **** 
 481:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 482:Src/main.c    **** 
 483:Src/main.c    ****   /* GPIO Ports Clock Enable */
 484:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  45              		.loc 1 484 0
  46 0004 0024     		movs	r4, #0
  47 0006 0194     		str	r4, [sp, #4]
  48 0008 2A4B     		ldr	r3, .L3
  49 000a 1A6B     		ldr	r2, [r3, #48]
  50 000c 42F00402 		orr	r2, r2, #4
  51 0010 1A63     		str	r2, [r3, #48]
  52 0012 1A6B     		ldr	r2, [r3, #48]
  53 0014 02F00402 		and	r2, r2, #4
  54 0018 0192     		str	r2, [sp, #4]
  55 001a 019A     		ldr	r2, [sp, #4]
  56              	.LBE2:
  57              	.LBB3:
 485:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  58              		.loc 1 485 0
  59 001c 0294     		str	r4, [sp, #8]
  60 001e 1A6B     		ldr	r2, [r3, #48]
  61 0020 42F08002 		orr	r2, r2, #128
  62 0024 1A63     		str	r2, [r3, #48]
  63 0026 1A6B     		ldr	r2, [r3, #48]
  64 0028 02F08002 		and	r2, r2, #128
  65 002c 0292     		str	r2, [sp, #8]
  66 002e 029A     		ldr	r2, [sp, #8]
  67              	.LBE3:
  68              	.LBB4:
 486:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  69              		.loc 1 486 0
  70 0030 0394     		str	r4, [sp, #12]
  71 0032 1A6B     		ldr	r2, [r3, #48]
  72 0034 42F00102 		orr	r2, r2, #1
  73 0038 1A63     		str	r2, [r3, #48]
  74 003a 1A6B     		ldr	r2, [r3, #48]
  75 003c 02F00102 		and	r2, r2, #1
  76 0040 0392     		str	r2, [sp, #12]
  77 0042 039A     		ldr	r2, [sp, #12]
  78              	.LBE4:
  79              	.LBB5:
 487:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  80              		.loc 1 487 0
  81 0044 0494     		str	r4, [sp, #16]
  82 0046 1A6B     		ldr	r2, [r3, #48]
  83 0048 42F00202 		orr	r2, r2, #2
  84 004c 1A63     		str	r2, [r3, #48]
ARM GAS  /tmp/ccSR0QsN.s 			page 11


  85 004e 1B6B     		ldr	r3, [r3, #48]
  86 0050 03F00203 		and	r3, r3, #2
  87 0054 0493     		str	r3, [sp, #16]
  88 0056 049B     		ldr	r3, [sp, #16]
  89              	.LBE5:
 488:Src/main.c    **** 
 489:Src/main.c    ****   /*Configure GPIO pin Output Level */
 490:Src/main.c    ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
  90              		.loc 1 490 0
  91 0058 174F     		ldr	r7, .L3+4
  92 005a 2246     		mov	r2, r4
  93 005c 2021     		movs	r1, #32
  94 005e 3846     		mov	r0, r7
  95 0060 FFF7FEFF 		bl	HAL_GPIO_WritePin
  96              	.LVL0:
 491:Src/main.c    ****   /*Configure GPIO pin Output Level */
 492:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
  97              		.loc 1 492 0
  98 0064 154D     		ldr	r5, .L3+8
  99 0066 2246     		mov	r2, r4
 100 0068 4FF48071 		mov	r1, #256
 101 006c 2846     		mov	r0, r5
 102 006e FFF7FEFF 		bl	HAL_GPIO_WritePin
 103              	.LVL1:
 493:Src/main.c    **** 
 494:Src/main.c    ****   /*Configure GPIO pin : B1_Pin */
 495:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin;
 104              		.loc 1 495 0
 105 0072 4FF40053 		mov	r3, #8192
 106 0076 0593     		str	r3, [sp, #20]
 496:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 107              		.loc 1 496 0
 108 0078 114B     		ldr	r3, .L3+12
 109 007a 0693     		str	r3, [sp, #24]
 497:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 110              		.loc 1 497 0
 111 007c 0794     		str	r4, [sp, #28]
 498:Src/main.c    ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 112              		.loc 1 498 0
 113 007e 05A9     		add	r1, sp, #20
 114 0080 2846     		mov	r0, r5
 115 0082 FFF7FEFF 		bl	HAL_GPIO_Init
 116              	.LVL2:
 499:Src/main.c    **** 
 500:Src/main.c    ****   /*Configure GPIO pin : LD2_Pin */
 501:Src/main.c    ****   GPIO_InitStruct.Pin = LD2_Pin;
 117              		.loc 1 501 0
 118 0086 2023     		movs	r3, #32
 119 0088 0593     		str	r3, [sp, #20]
 502:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 120              		.loc 1 502 0
 121 008a 0126     		movs	r6, #1
 122 008c 0696     		str	r6, [sp, #24]
 503:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 123              		.loc 1 503 0
 124 008e 0794     		str	r4, [sp, #28]
 504:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
ARM GAS  /tmp/ccSR0QsN.s 			page 12


 125              		.loc 1 504 0
 126 0090 0894     		str	r4, [sp, #32]
 505:Src/main.c    ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 127              		.loc 1 505 0
 128 0092 05A9     		add	r1, sp, #20
 129 0094 3846     		mov	r0, r7
 130 0096 FFF7FEFF 		bl	HAL_GPIO_Init
 131              	.LVL3:
 506:Src/main.c    **** 
 507:Src/main.c    ****     /*Configure GPIO pin : PC8 */
 508:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_8;
 132              		.loc 1 508 0
 133 009a 4FF48073 		mov	r3, #256
 134 009e 0593     		str	r3, [sp, #20]
 509:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 135              		.loc 1 509 0
 136 00a0 0696     		str	r6, [sp, #24]
 510:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 137              		.loc 1 510 0
 138 00a2 0794     		str	r4, [sp, #28]
 511:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 139              		.loc 1 511 0
 140 00a4 0894     		str	r4, [sp, #32]
 512:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 141              		.loc 1 512 0
 142 00a6 05A9     		add	r1, sp, #20
 143 00a8 2846     		mov	r0, r5
 144 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 145              	.LVL4:
 513:Src/main.c    **** 
 514:Src/main.c    **** }
 146              		.loc 1 514 0
 147 00ae 0BB0     		add	sp, sp, #44
 148              	.LCFI2:
 149              		.cfi_def_cfa_offset 20
 150              		@ sp needed
 151 00b0 F0BD     		pop	{r4, r5, r6, r7, pc}
 152              	.L4:
 153 00b2 00BF     		.align	2
 154              	.L3:
 155 00b4 00380240 		.word	1073887232
 156 00b8 00000240 		.word	1073872896
 157 00bc 00080240 		.word	1073874944
 158 00c0 00002110 		.word	270598144
 159              		.cfi_endproc
 160              	.LFE133:
 162              		.section	.text.setModeToNormal,"ax",%progbits
 163              		.align	2
 164              		.global	setModeToNormal
 165              		.thumb
 166              		.thumb_func
 168              	setModeToNormal:
 169              	.LFB124:
  70:Src/main.c    ****     uint8_t TxData[8];   // TransmitByteData [1 byte]
 170              		.loc 1 70 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccSR0QsN.s 			page 13


 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174 0000 10B5     		push	{r4, lr}
 175              	.LCFI3:
 176              		.cfi_def_cfa_offset 8
 177              		.cfi_offset 4, -8
 178              		.cfi_offset 14, -4
 179 0002 82B0     		sub	sp, sp, #8
 180              	.LCFI4:
 181              		.cfi_def_cfa_offset 16
  74:Src/main.c    ****     TxData[1] = 0x04;   // Command
 182              		.loc 1 74 0
 183 0004 0822     		movs	r2, #8
 184 0006 8DF80020 		strb	r2, [sp]
  75:Src/main.c    ****     TxData[2] = 0x00;   // Option/Status
 185              		.loc 1 75 0
 186 000a 0423     		movs	r3, #4
 187 000c 8DF80130 		strb	r3, [sp, #1]
  76:Src/main.c    ****     TxData[3] = 0x00;   // ID
 188              		.loc 1 76 0
 189 0010 0023     		movs	r3, #0
 190 0012 8DF80230 		strb	r3, [sp, #2]
  77:Src/main.c    ****     TxData[4] = 0x00;   // mode
 191              		.loc 1 77 0
 192 0016 8DF80330 		strb	r3, [sp, #3]
  78:Src/main.c    ****     TxData[5] = 0x28;   // address
 193              		.loc 1 78 0
 194 001a 8DF80430 		strb	r3, [sp, #4]
  79:Src/main.c    ****     TxData[6] = 0x01; // device number
 195              		.loc 1 79 0
 196 001e 2823     		movs	r3, #40
 197 0020 8DF80530 		strb	r3, [sp, #5]
  80:Src/main.c    ****     TxData[7] = 0x35;   // Sum
 198              		.loc 1 80 0
 199 0024 0124     		movs	r4, #1
 200 0026 8DF80640 		strb	r4, [sp, #6]
  81:Src/main.c    **** 
 201              		.loc 1 81 0
 202 002a 3523     		movs	r3, #53
 203 002c 8DF80730 		strb	r3, [sp, #7]
  83:Src/main.c    ****     HAL_Delay(1);
 204              		.loc 1 83 0
 205 0030 4FF0FF33 		mov	r3, #-1
 206 0034 6946     		mov	r1, sp
 207 0036 0448     		ldr	r0, .L7
 208 0038 FFF7FEFF 		bl	HAL_UART_Transmit
 209              	.LVL5:
  84:Src/main.c    **** 
 210              		.loc 1 84 0
 211 003c 2046     		mov	r0, r4
 212 003e FFF7FEFF 		bl	HAL_Delay
 213              	.LVL6:
  86:Src/main.c    **** 
 214              		.loc 1 86 0
 215 0042 02B0     		add	sp, sp, #8
 216              	.LCFI5:
 217              		.cfi_def_cfa_offset 8
 218              		@ sp needed
ARM GAS  /tmp/ccSR0QsN.s 			page 14


 219 0044 10BD     		pop	{r4, pc}
 220              	.L8:
 221 0046 00BF     		.align	2
 222              	.L7:
 223 0048 00000000 		.word	huart1
 224              		.cfi_endproc
 225              	.LFE124:
 227              		.section	.text.setAngle,"ax",%progbits
 228              		.align	2
 229              		.global	setAngle
 230              		.thumb
 231              		.thumb_func
 233              	setAngle:
 234              	.LFB125:
  89:Src/main.c    ****     uint8_t TxData[9];   // TransmitByteData [9 bits]
 235              		.loc 1 89 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 24
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              	.LVL7:
 240 0000 10B5     		push	{r4, lr}
 241              	.LCFI6:
 242              		.cfi_def_cfa_offset 8
 243              		.cfi_offset 4, -8
 244              		.cfi_offset 14, -4
 245 0002 86B0     		sub	sp, sp, #24
 246              	.LCFI7:
 247              		.cfi_def_cfa_offset 32
 248              	.LVL8:
  97:Src/main.c    ****     TxData[1] = 0x04;                       // Command
 249              		.loc 1 97 0
 250 0004 0923     		movs	r3, #9
 251 0006 8DF80C30 		strb	r3, [sp, #12]
  98:Src/main.c    ****     TxData[2] = 0x00;                       // Option/Status
 252              		.loc 1 98 0
 253 000a 0423     		movs	r3, #4
 254 000c 8DF80D30 		strb	r3, [sp, #13]
  99:Src/main.c    ****     TxData[3] = 0x00;                         // ID
 255              		.loc 1 99 0
 256 0010 0022     		movs	r2, #0
 257 0012 8DF80E20 		strb	r2, [sp, #14]
 100:Src/main.c    ****     TxData[4] = (uint8_t)0x00FF & angle;              //  mode
 258              		.loc 1 100 0
 259 0016 8DF80F20 		strb	r2, [sp, #15]
 101:Src/main.c    ****     TxData[5] = (uint8_t)0x00FF & (angle >> 8);       // address
 260              		.loc 1 101 0
 261 001a 8DF81000 		strb	r0, [sp, #16]
 102:Src/main.c    ****     TxData[6] = 0x2A;                         // device number
 262              		.loc 1 102 0
 263 001e C0F30720 		ubfx	r0, r0, #8, #8
 264              	.LVL9:
 265 0022 8DF81100 		strb	r0, [sp, #17]
 103:Src/main.c    ****     TxData[7] = 0x01;                     // Count
 266              		.loc 1 103 0
 267 0026 2A23     		movs	r3, #42
 268 0028 8DF81230 		strb	r3, [sp, #18]
 104:Src/main.c    **** 
ARM GAS  /tmp/ccSR0QsN.s 			page 15


 269              		.loc 1 104 0
 270 002c 0123     		movs	r3, #1
 271 002e 8DF81330 		strb	r3, [sp, #19]
 272              	.LVL10:
 273              	.LBB6:
 107:Src/main.c    ****         CheckSum = CheckSum + TxData[i];                // XOR from ID to Data
 274              		.loc 1 107 0
 275 0032 1346     		mov	r3, r2
 276 0034 07E0     		b	.L10
 277              	.LVL11:
 278              	.L11:
 108:Src/main.c    ****     }
 279              		.loc 1 108 0 discriminator 3
 280 0036 06A9     		add	r1, sp, #24
 281 0038 1944     		add	r1, r1, r3
 282 003a 11F80C1C 		ldrb	r1, [r1, #-12]	@ zero_extendqisi2
 283 003e 0A44     		add	r2, r2, r1
 284              	.LVL12:
 285 0040 D2B2     		uxtb	r2, r2
 286              	.LVL13:
 107:Src/main.c    ****         CheckSum = CheckSum + TxData[i];                // XOR from ID to Data
 287              		.loc 1 107 0 discriminator 3
 288 0042 0133     		adds	r3, r3, #1
 289              	.LVL14:
 290 0044 DBB2     		uxtb	r3, r3
 291              	.LVL15:
 292              	.L10:
 107:Src/main.c    ****         CheckSum = CheckSum + TxData[i];                // XOR from ID to Data
 293              		.loc 1 107 0 is_stmt 0 discriminator 1
 294 0046 072B     		cmp	r3, #7
 295 0048 F5D9     		bls	.L11
 296              	.LBE6:
 112:Src/main.c    **** 
 297              		.loc 1 112 0 is_stmt 1
 298 004a 8DF81420 		strb	r2, [sp, #20]
 114:Src/main.c    ****     HAL_Delay(1);
 299              		.loc 1 114 0
 300 004e 164C     		ldr	r4, .L13
 301 0050 4FF0FF33 		mov	r3, #-1
 302              	.LVL16:
 303 0054 0922     		movs	r2, #9
 304              	.LVL17:
 305 0056 03A9     		add	r1, sp, #12
 306 0058 2046     		mov	r0, r4
 307 005a FFF7FEFF 		bl	HAL_UART_Transmit
 308              	.LVL18:
 115:Src/main.c    ****     HAL_UART_Receive(&huart1, (uint8_t*)RxData, 9, HAL_MAX_DELAY);
 309              		.loc 1 115 0
 310 005e 0120     		movs	r0, #1
 311 0060 FFF7FEFF 		bl	HAL_Delay
 312              	.LVL19:
 116:Src/main.c    ****     HAL_Delay(1);
 313              		.loc 1 116 0
 314 0064 4FF0FF33 		mov	r3, #-1
 315 0068 0922     		movs	r2, #9
 316 006a 6946     		mov	r1, sp
 317 006c 2046     		mov	r0, r4
ARM GAS  /tmp/ccSR0QsN.s 			page 16


 318 006e FFF7FEFF 		bl	HAL_UART_Receive
 319              	.LVL20:
 117:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)RxData, 9, HAL_MAX_DELAY);
 320              		.loc 1 117 0
 321 0072 0120     		movs	r0, #1
 322 0074 FFF7FEFF 		bl	HAL_Delay
 323              	.LVL21:
 118:Src/main.c    ****     HAl_Delay(1);
 324              		.loc 1 118 0
 325 0078 0C4C     		ldr	r4, .L13+4
 326 007a 4FF0FF33 		mov	r3, #-1
 327 007e 0922     		movs	r2, #9
 328 0080 6946     		mov	r1, sp
 329 0082 2046     		mov	r0, r4
 330 0084 FFF7FEFF 		bl	HAL_UART_Transmit
 331              	.LVL22:
 119:Src/main.c    ****     /*追加*/
 332              		.loc 1 119 0
 333 0088 0120     		movs	r0, #1
 334 008a FFF7FEFF 		bl	HAl_Delay
 335              	.LVL23:
 121:Src/main.c    ****     HAL_Delay(1);
 336              		.loc 1 121 0
 337 008e 4FF0FF33 		mov	r3, #-1
 338 0092 0922     		movs	r2, #9
 339 0094 03A9     		add	r1, sp, #12
 340 0096 2046     		mov	r0, r4
 341 0098 FFF7FEFF 		bl	HAL_UART_Transmit
 342              	.LVL24:
 122:Src/main.c    **** }
 343              		.loc 1 122 0
 344 009c 0120     		movs	r0, #1
 345 009e FFF7FEFF 		bl	HAL_Delay
 346              	.LVL25:
 123:Src/main.c    **** 
 347              		.loc 1 123 0
 348 00a2 06B0     		add	sp, sp, #24
 349              	.LCFI8:
 350              		.cfi_def_cfa_offset 8
 351              		@ sp needed
 352 00a4 10BD     		pop	{r4, pc}
 353              	.L14:
 354 00a6 00BF     		.align	2
 355              	.L13:
 356 00a8 00000000 		.word	huart1
 357 00ac 00000000 		.word	huart2
 358              		.cfi_endproc
 359              	.LFE125:
 361              		.section	.text.setFree,"ax",%progbits
 362              		.align	2
 363              		.global	setFree
 364              		.thumb
 365              		.thumb_func
 367              	setFree:
 368              	.LFB126:
 126:Src/main.c    ****     uint8_t TxData[8];   // TransmitByteData [1byte]
 369              		.loc 1 126 0
ARM GAS  /tmp/ccSR0QsN.s 			page 17


 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 8
 372              		@ frame_needed = 0, uses_anonymous_args = 0
 373 0000 30B5     		push	{r4, r5, lr}
 374              	.LCFI9:
 375              		.cfi_def_cfa_offset 12
 376              		.cfi_offset 4, -12
 377              		.cfi_offset 5, -8
 378              		.cfi_offset 14, -4
 379 0002 83B0     		sub	sp, sp, #12
 380              	.LCFI10:
 381              		.cfi_def_cfa_offset 24
 129:Src/main.c    ****     TxData[1] = 0x04;          // Command
 382              		.loc 1 129 0
 383 0004 0824     		movs	r4, #8
 384 0006 8DF80040 		strb	r4, [sp]
 130:Src/main.c    ****     TxData[2] = 0x00;          // Option/Status
 385              		.loc 1 130 0
 386 000a 0423     		movs	r3, #4
 387 000c 8DF80130 		strb	r3, [sp, #1]
 131:Src/main.c    ****     TxData[3] = 0x00;          // ID
 388              		.loc 1 131 0
 389 0010 0023     		movs	r3, #0
 390 0012 8DF80230 		strb	r3, [sp, #2]
 132:Src/main.c    ****     TxData[4] = 0x02;          //  mode
 391              		.loc 1 132 0
 392 0016 8DF80330 		strb	r3, [sp, #3]
 133:Src/main.c    ****     TxData[5] = 0x28;          // address
 393              		.loc 1 133 0
 394 001a 0223     		movs	r3, #2
 395 001c 8DF80430 		strb	r3, [sp, #4]
 134:Src/main.c    ****     TxData[6] = 0x01;          // device number
 396              		.loc 1 134 0
 397 0020 2823     		movs	r3, #40
 398 0022 8DF80530 		strb	r3, [sp, #5]
 135:Src/main.c    ****     TxData[7] = 0x37;          // Sum
 399              		.loc 1 135 0
 400 0026 0125     		movs	r5, #1
 401 0028 8DF80650 		strb	r5, [sp, #6]
 136:Src/main.c    **** 
 402              		.loc 1 136 0
 403 002c 3723     		movs	r3, #55
 404 002e 8DF80730 		strb	r3, [sp, #7]
 138:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)TxData, 8, HAL_MAX_DELAY);
 405              		.loc 1 138 0
 406 0032 4FF0FF33 		mov	r3, #-1
 407 0036 2246     		mov	r2, r4
 408 0038 6946     		mov	r1, sp
 409 003a 0748     		ldr	r0, .L17
 410 003c FFF7FEFF 		bl	HAL_UART_Transmit
 411              	.LVL26:
 139:Src/main.c    ****     HAL_Delay(1);
 412              		.loc 1 139 0
 413 0040 4FF0FF33 		mov	r3, #-1
 414 0044 2246     		mov	r2, r4
 415 0046 6946     		mov	r1, sp
 416 0048 0448     		ldr	r0, .L17+4
ARM GAS  /tmp/ccSR0QsN.s 			page 18


 417 004a FFF7FEFF 		bl	HAL_UART_Transmit
 418              	.LVL27:
 140:Src/main.c    **** }
 419              		.loc 1 140 0
 420 004e 2846     		mov	r0, r5
 421 0050 FFF7FEFF 		bl	HAL_Delay
 422              	.LVL28:
 141:Src/main.c    **** 
 423              		.loc 1 141 0
 424 0054 03B0     		add	sp, sp, #12
 425              	.LCFI11:
 426              		.cfi_def_cfa_offset 12
 427              		@ sp needed
 428 0056 30BD     		pop	{r4, r5, pc}
 429              	.L18:
 430              		.align	2
 431              	.L17:
 432 0058 00000000 		.word	huart1
 433 005c 00000000 		.word	huart2
 434              		.cfi_endproc
 435              	.LFE126:
 437              		.section	.text._Error_Handler,"ax",%progbits
 438              		.align	2
 439              		.global	_Error_Handler
 440              		.thumb
 441              		.thumb_func
 443              	_Error_Handler:
 444              	.LFB134:
 515:Src/main.c    **** 
 516:Src/main.c    **** 
 517:Src/main.c    **** /**
 518:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 519:Src/main.c    ****   * @param  None
 520:Src/main.c    ****   * @retval None
 521:Src/main.c    ****   */
 522:Src/main.c    **** void _Error_Handler(char * file, int line)
 523:Src/main.c    **** {
 445              		.loc 1 523 0
 446              		.cfi_startproc
 447              		@ Volatile: function does not return.
 448              		@ args = 0, pretend = 0, frame = 0
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450              		@ link register save eliminated.
 451              	.LVL29:
 452              	.L20:
 453 0000 FEE7     		b	.L20
 454              		.cfi_endproc
 455              	.LFE134:
 457 0002 00BF     		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 458              		.align	2
 459              		.thumb
 460              		.thumb_func
 462              	MX_USART1_UART_Init:
 463              	.LFB130:
 398:Src/main.c    **** 
 464              		.loc 1 398 0
 465              		.cfi_startproc
ARM GAS  /tmp/ccSR0QsN.s 			page 19


 466              		@ args = 0, pretend = 0, frame = 0
 467              		@ frame_needed = 0, uses_anonymous_args = 0
 398:Src/main.c    **** 
 468              		.loc 1 398 0
 469 0000 08B5     		push	{r3, lr}
 470              	.LCFI12:
 471              		.cfi_def_cfa_offset 8
 472              		.cfi_offset 3, -8
 473              		.cfi_offset 14, -4
 400:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 474              		.loc 1 400 0
 475 0002 0B48     		ldr	r0, .L24
 476 0004 0B4B     		ldr	r3, .L24+4
 477 0006 0360     		str	r3, [r0]
 401:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 478              		.loc 1 401 0
 479 0008 4FF4E133 		mov	r3, #115200
 480 000c 4360     		str	r3, [r0, #4]
 402:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 481              		.loc 1 402 0
 482 000e 0023     		movs	r3, #0
 483 0010 8360     		str	r3, [r0, #8]
 403:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 484              		.loc 1 403 0
 485 0012 C360     		str	r3, [r0, #12]
 404:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 486              		.loc 1 404 0
 487 0014 0361     		str	r3, [r0, #16]
 405:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 488              		.loc 1 405 0
 489 0016 0C22     		movs	r2, #12
 490 0018 4261     		str	r2, [r0, #20]
 406:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 491              		.loc 1 406 0
 492 001a 8361     		str	r3, [r0, #24]
 407:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 493              		.loc 1 407 0
 494 001c C361     		str	r3, [r0, #28]
 408:Src/main.c    ****   {
 495              		.loc 1 408 0
 496 001e FFF7FEFF 		bl	HAL_UART_Init
 497              	.LVL30:
 498 0022 20B1     		cbz	r0, .L21
 410:Src/main.c    ****   }
 499              		.loc 1 410 0
 500 0024 4FF4CD71 		mov	r1, #410
 501 0028 0348     		ldr	r0, .L24+8
 502 002a FFF7FEFF 		bl	_Error_Handler
 503              	.LVL31:
 504              	.L21:
 505 002e 08BD     		pop	{r3, pc}
 506              	.L25:
 507              		.align	2
 508              	.L24:
 509 0030 00000000 		.word	huart1
 510 0034 00100140 		.word	1073811456
 511 0038 00000000 		.word	.LC0
ARM GAS  /tmp/ccSR0QsN.s 			page 20


 512              		.cfi_endproc
 513              	.LFE130:
 515              		.section	.text.MX_USART6_UART_Init,"ax",%progbits
 516              		.align	2
 517              		.thumb
 518              		.thumb_func
 520              	MX_USART6_UART_Init:
 521              	.LFB132:
 438:Src/main.c    **** 
 522              		.loc 1 438 0
 523              		.cfi_startproc
 524              		@ args = 0, pretend = 0, frame = 0
 525              		@ frame_needed = 0, uses_anonymous_args = 0
 526 0000 08B5     		push	{r3, lr}
 527              	.LCFI13:
 528              		.cfi_def_cfa_offset 8
 529              		.cfi_offset 3, -8
 530              		.cfi_offset 14, -4
 440:Src/main.c    ****   huart6.Init.BaudRate = 115200;
 531              		.loc 1 440 0
 532 0002 0B48     		ldr	r0, .L29
 533 0004 0B4B     		ldr	r3, .L29+4
 534 0006 0360     		str	r3, [r0]
 441:Src/main.c    ****   huart6.Init.WordLength = UART_WORDLENGTH_8B;
 535              		.loc 1 441 0
 536 0008 4FF4E133 		mov	r3, #115200
 537 000c 4360     		str	r3, [r0, #4]
 442:Src/main.c    ****   huart6.Init.StopBits = UART_STOPBITS_1;
 538              		.loc 1 442 0
 539 000e 0023     		movs	r3, #0
 540 0010 8360     		str	r3, [r0, #8]
 443:Src/main.c    ****   huart6.Init.Parity = UART_PARITY_NONE;
 541              		.loc 1 443 0
 542 0012 C360     		str	r3, [r0, #12]
 444:Src/main.c    ****   huart6.Init.Mode = UART_MODE_TX_RX;
 543              		.loc 1 444 0
 544 0014 0361     		str	r3, [r0, #16]
 445:Src/main.c    ****   huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 545              		.loc 1 445 0
 546 0016 0C22     		movs	r2, #12
 547 0018 4261     		str	r2, [r0, #20]
 446:Src/main.c    ****   huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 548              		.loc 1 446 0
 549 001a 8361     		str	r3, [r0, #24]
 447:Src/main.c    ****   if (HAL_UART_Init(&huart6) != HAL_OK)
 550              		.loc 1 447 0
 551 001c C361     		str	r3, [r0, #28]
 448:Src/main.c    ****   {
 552              		.loc 1 448 0
 553 001e FFF7FEFF 		bl	HAL_UART_Init
 554              	.LVL32:
 555 0022 20B1     		cbz	r0, .L26
 450:Src/main.c    ****   }
 556              		.loc 1 450 0
 557 0024 4FF4E171 		mov	r1, #450
 558 0028 0348     		ldr	r0, .L29+8
 559 002a FFF7FEFF 		bl	_Error_Handler
ARM GAS  /tmp/ccSR0QsN.s 			page 21


 560              	.LVL33:
 561              	.L26:
 562 002e 08BD     		pop	{r3, pc}
 563              	.L30:
 564              		.align	2
 565              	.L29:
 566 0030 00000000 		.word	huart6
 567 0034 00140140 		.word	1073812480
 568 0038 00000000 		.word	.LC0
 569              		.cfi_endproc
 570              	.LFE132:
 572              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 573              		.align	2
 574              		.thumb
 575              		.thumb_func
 577              	MX_USART2_UART_Init:
 578              	.LFB131:
 418:Src/main.c    **** 
 579              		.loc 1 418 0
 580              		.cfi_startproc
 581              		@ args = 0, pretend = 0, frame = 0
 582              		@ frame_needed = 0, uses_anonymous_args = 0
 583 0000 08B5     		push	{r3, lr}
 584              	.LCFI14:
 585              		.cfi_def_cfa_offset 8
 586              		.cfi_offset 3, -8
 587              		.cfi_offset 14, -4
 420:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 588              		.loc 1 420 0
 589 0002 0B48     		ldr	r0, .L34
 590 0004 0B4B     		ldr	r3, .L34+4
 591 0006 0360     		str	r3, [r0]
 421:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 592              		.loc 1 421 0
 593 0008 4FF4E133 		mov	r3, #115200
 594 000c 4360     		str	r3, [r0, #4]
 422:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 595              		.loc 1 422 0
 596 000e 0023     		movs	r3, #0
 597 0010 8360     		str	r3, [r0, #8]
 423:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 598              		.loc 1 423 0
 599 0012 C360     		str	r3, [r0, #12]
 424:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 600              		.loc 1 424 0
 601 0014 0361     		str	r3, [r0, #16]
 425:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 602              		.loc 1 425 0
 603 0016 0C22     		movs	r2, #12
 604 0018 4261     		str	r2, [r0, #20]
 426:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 605              		.loc 1 426 0
 606 001a 8361     		str	r3, [r0, #24]
 427:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 607              		.loc 1 427 0
 608 001c C361     		str	r3, [r0, #28]
 428:Src/main.c    ****   {
ARM GAS  /tmp/ccSR0QsN.s 			page 22


 609              		.loc 1 428 0
 610 001e FFF7FEFF 		bl	HAL_UART_Init
 611              	.LVL34:
 612 0022 20B1     		cbz	r0, .L31
 430:Src/main.c    ****   }
 613              		.loc 1 430 0
 614 0024 4FF4D771 		mov	r1, #430
 615 0028 0348     		ldr	r0, .L34+8
 616 002a FFF7FEFF 		bl	_Error_Handler
 617              	.LVL35:
 618              	.L31:
 619 002e 08BD     		pop	{r3, pc}
 620              	.L35:
 621              		.align	2
 622              	.L34:
 623 0030 00000000 		.word	huart2
 624 0034 00440040 		.word	1073759232
 625 0038 00000000 		.word	.LC0
 626              		.cfi_endproc
 627              	.LFE131:
 629              		.section	.text.MX_I2C1_Init,"ax",%progbits
 630              		.align	2
 631              		.thumb
 632              		.thumb_func
 634              	MX_I2C1_Init:
 635              	.LFB129:
 376:Src/main.c    **** 
 636              		.loc 1 376 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 0
 639              		@ frame_needed = 0, uses_anonymous_args = 0
 640 0000 08B5     		push	{r3, lr}
 641              	.LCFI15:
 642              		.cfi_def_cfa_offset 8
 643              		.cfi_offset 3, -8
 644              		.cfi_offset 14, -4
 378:Src/main.c    ****   hi2c1.Init.ClockSpeed = 400000;
 645              		.loc 1 378 0
 646 0002 0D48     		ldr	r0, .L39
 647 0004 0D4B     		ldr	r3, .L39+4
 648 0006 0360     		str	r3, [r0]
 379:Src/main.c    ****   //hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 649              		.loc 1 379 0
 650 0008 0D4B     		ldr	r3, .L39+8
 651 000a 4360     		str	r3, [r0, #4]
 381:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 652              		.loc 1 381 0
 653 000c 0023     		movs	r3, #0
 654 000e C360     		str	r3, [r0, #12]
 382:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 655              		.loc 1 382 0
 656 0010 4FF48042 		mov	r2, #16384
 657 0014 0261     		str	r2, [r0, #16]
 383:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 658              		.loc 1 383 0
 659 0016 4361     		str	r3, [r0, #20]
 384:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
ARM GAS  /tmp/ccSR0QsN.s 			page 23


 660              		.loc 1 384 0
 661 0018 8361     		str	r3, [r0, #24]
 385:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 662              		.loc 1 385 0
 663 001a C361     		str	r3, [r0, #28]
 386:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 664              		.loc 1 386 0
 665 001c 0362     		str	r3, [r0, #32]
 387:Src/main.c    ****   {
 666              		.loc 1 387 0
 667 001e FFF7FEFF 		bl	HAL_I2C_Init
 668              	.LVL36:
 669 0022 20B1     		cbz	r0, .L37
 389:Src/main.c    ****   }
 670              		.loc 1 389 0
 671 0024 40F28511 		movw	r1, #389
 672 0028 0648     		ldr	r0, .L39+12
 673 002a FFF7FEFF 		bl	_Error_Handler
 674              	.LVL37:
 675              	.L37:
 392:Src/main.c    **** 
 676              		.loc 1 392 0
 677 002e 0021     		movs	r1, #0
 678 0030 0148     		ldr	r0, .L39
 679 0032 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 680              	.LVL38:
 681 0036 08BD     		pop	{r3, pc}
 682              	.L40:
 683              		.align	2
 684              	.L39:
 685 0038 00000000 		.word	hi2c1
 686 003c 00540040 		.word	1073763328
 687 0040 801A0600 		.word	400000
 688 0044 00000000 		.word	.LC0
 689              		.cfi_endproc
 690              	.LFE129:
 692              		.section	.text.SystemClock_Config,"ax",%progbits
 693              		.align	2
 694              		.global	SystemClock_Config
 695              		.thumb
 696              		.thumb_func
 698              	SystemClock_Config:
 699              	.LFB128:
 321:Src/main.c    **** 
 700              		.loc 1 321 0
 701              		.cfi_startproc
 702              		@ args = 0, pretend = 0, frame = 80
 703              		@ frame_needed = 0, uses_anonymous_args = 0
 704 0000 00B5     		push	{lr}
 705              	.LCFI16:
 706              		.cfi_def_cfa_offset 4
 707              		.cfi_offset 14, -4
 708 0002 95B0     		sub	sp, sp, #84
 709              	.LCFI17:
 710              		.cfi_def_cfa_offset 88
 711              	.LBB7:
 328:Src/main.c    **** 
ARM GAS  /tmp/ccSR0QsN.s 			page 24


 712              		.loc 1 328 0
 713 0004 0022     		movs	r2, #0
 714 0006 0192     		str	r2, [sp, #4]
 715 0008 2B4B     		ldr	r3, .L45
 716 000a 196C     		ldr	r1, [r3, #64]
 717 000c 41F08051 		orr	r1, r1, #268435456
 718 0010 1964     		str	r1, [r3, #64]
 719 0012 1B6C     		ldr	r3, [r3, #64]
 720 0014 03F08053 		and	r3, r3, #268435456
 721 0018 0193     		str	r3, [sp, #4]
 722 001a 019B     		ldr	r3, [sp, #4]
 723              	.LBE7:
 724              	.LBB8:
 330:Src/main.c    **** 
 725              		.loc 1 330 0
 726 001c 0292     		str	r2, [sp, #8]
 727 001e 2749     		ldr	r1, .L45+4
 728 0020 0B68     		ldr	r3, [r1]
 729 0022 23F44043 		bic	r3, r3, #49152
 730 0026 43F40043 		orr	r3, r3, #32768
 731 002a 0B60     		str	r3, [r1]
 732 002c 0B68     		ldr	r3, [r1]
 733 002e 03F44043 		and	r3, r3, #49152
 734 0032 0293     		str	r3, [sp, #8]
 735 0034 029B     		ldr	r3, [sp, #8]
 736              	.LBE8:
 334:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 737              		.loc 1 334 0
 738 0036 0221     		movs	r1, #2
 739 0038 0891     		str	r1, [sp, #32]
 335:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 740              		.loc 1 335 0
 741 003a 0123     		movs	r3, #1
 742 003c 0B93     		str	r3, [sp, #44]
 336:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 743              		.loc 1 336 0
 744 003e 1023     		movs	r3, #16
 745 0040 0C93     		str	r3, [sp, #48]
 337:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 746              		.loc 1 337 0
 747 0042 0E91     		str	r1, [sp, #56]
 338:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 748              		.loc 1 338 0
 749 0044 0F92     		str	r2, [sp, #60]
 339:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 750              		.loc 1 339 0
 751 0046 1093     		str	r3, [sp, #64]
 340:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 752              		.loc 1 340 0
 753 0048 4FF4A873 		mov	r3, #336
 754 004c 1193     		str	r3, [sp, #68]
 341:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 755              		.loc 1 341 0
 756 004e 0423     		movs	r3, #4
 757 0050 1293     		str	r3, [sp, #72]
 342:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 758              		.loc 1 342 0
ARM GAS  /tmp/ccSR0QsN.s 			page 25


 759 0052 0723     		movs	r3, #7
 760 0054 1393     		str	r3, [sp, #76]
 343:Src/main.c    ****   {
 761              		.loc 1 343 0
 762 0056 08A8     		add	r0, sp, #32
 763 0058 FFF7FEFF 		bl	HAL_RCC_OscConfig
 764              	.LVL39:
 765 005c 20B1     		cbz	r0, .L42
 345:Src/main.c    ****   }
 766              		.loc 1 345 0
 767 005e 40F25911 		movw	r1, #345
 768 0062 1748     		ldr	r0, .L45+8
 769 0064 FFF7FEFF 		bl	_Error_Handler
 770              	.LVL40:
 771              	.L42:
 350:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 772              		.loc 1 350 0
 773 0068 0F23     		movs	r3, #15
 774 006a 0393     		str	r3, [sp, #12]
 352:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 775              		.loc 1 352 0
 776 006c 0221     		movs	r1, #2
 777 006e 0491     		str	r1, [sp, #16]
 353:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 778              		.loc 1 353 0
 779 0070 0023     		movs	r3, #0
 780 0072 0593     		str	r3, [sp, #20]
 354:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 781              		.loc 1 354 0
 782 0074 4FF48052 		mov	r2, #4096
 783 0078 0692     		str	r2, [sp, #24]
 355:Src/main.c    **** 
 784              		.loc 1 355 0
 785 007a 0793     		str	r3, [sp, #28]
 357:Src/main.c    ****   {
 786              		.loc 1 357 0
 787 007c 03A8     		add	r0, sp, #12
 788 007e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 789              	.LVL41:
 790 0082 20B1     		cbz	r0, .L43
 359:Src/main.c    ****   }
 791              		.loc 1 359 0
 792 0084 40F26711 		movw	r1, #359
 793 0088 0D48     		ldr	r0, .L45+8
 794 008a FFF7FEFF 		bl	_Error_Handler
 795              	.LVL42:
 796              	.L43:
 364:Src/main.c    **** 
 797              		.loc 1 364 0
 798 008e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 799              	.LVL43:
 800 0092 0C4B     		ldr	r3, .L45+12
 801 0094 A3FB0030 		umull	r3, r0, r3, r0
 802 0098 8009     		lsrs	r0, r0, #6
 803 009a FFF7FEFF 		bl	HAL_SYSTICK_Config
 804              	.LVL44:
 368:Src/main.c    **** 
ARM GAS  /tmp/ccSR0QsN.s 			page 26


 805              		.loc 1 368 0
 806 009e 0420     		movs	r0, #4
 807 00a0 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 808              	.LVL45:
 371:Src/main.c    **** }
 809              		.loc 1 371 0
 810 00a4 0022     		movs	r2, #0
 811 00a6 1146     		mov	r1, r2
 812 00a8 4FF0FF30 		mov	r0, #-1
 813 00ac FFF7FEFF 		bl	HAL_NVIC_SetPriority
 814              	.LVL46:
 372:Src/main.c    **** 
 815              		.loc 1 372 0
 816 00b0 15B0     		add	sp, sp, #84
 817              	.LCFI18:
 818              		.cfi_def_cfa_offset 4
 819              		@ sp needed
 820 00b2 5DF804FB 		ldr	pc, [sp], #4
 821              	.L46:
 822 00b6 00BF     		.align	2
 823              	.L45:
 824 00b8 00380240 		.word	1073887232
 825 00bc 00700040 		.word	1073770496
 826 00c0 00000000 		.word	.LC0
 827 00c4 D34D6210 		.word	274877907
 828              		.cfi_endproc
 829              	.LFE128:
 831              		.global	__aeabi_i2d
 832              		.global	__aeabi_dmul
 833              		.global	__aeabi_d2iz
 834              		.section	.text.main,"ax",%progbits
 835              		.align	2
 836              		.global	main
 837              		.thumb
 838              		.thumb_func
 840              	main:
 841              	.LFB127:
 162:Src/main.c    ****   SD_MPU6050_Result result ;
 842              		.loc 1 162 0
 843              		.cfi_startproc
 844              		@ args = 0, pretend = 0, frame = 56
 845              		@ frame_needed = 0, uses_anonymous_args = 0
 846 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 847              	.LCFI19:
 848              		.cfi_def_cfa_offset 36
 849              		.cfi_offset 4, -36
 850              		.cfi_offset 5, -32
 851              		.cfi_offset 6, -28
 852              		.cfi_offset 7, -24
 853              		.cfi_offset 8, -20
 854              		.cfi_offset 9, -16
 855              		.cfi_offset 10, -12
 856              		.cfi_offset 11, -8
 857              		.cfi_offset 14, -4
 858 0004 9DB0     		sub	sp, sp, #116
 859              	.LCFI20:
 860              		.cfi_def_cfa_offset 152
ARM GAS  /tmp/ccSR0QsN.s 			page 27


 164:Src/main.c    ****   uint8_t mpu_not[17] = {"MPU NOT WORKING\n"};
 861              		.loc 1 164 0
 862 0006 A84B     		ldr	r3, .L57+8
 863 0008 18AC     		add	r4, sp, #96
 864 000a 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 865 000c 07C4     		stmia	r4!, {r0, r1, r2}
 866 000e 24F8023B 		strh	r3, [r4], #2	@ movhi
 867 0012 1B0C     		lsrs	r3, r3, #16
 868 0014 2370     		strb	r3, [r4]
 165:Src/main.c    **** 
 869              		.loc 1 165 0
 870 0016 13AC     		add	r4, sp, #76
 871 0018 A44D     		ldr	r5, .L57+12
 872 001a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 873 001c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 874 001e 2B68     		ldr	r3, [r5]
 875 0020 2370     		strb	r3, [r4]
 876              	.LVL47:
 175:Src/main.c    **** 
 877              		.loc 1 175 0
 878 0022 FFF7FEFF 		bl	HAL_Init
 879              	.LVL48:
 178:Src/main.c    **** 
 880              		.loc 1 178 0
 881 0026 FFF7FEFF 		bl	SystemClock_Config
 882              	.LVL49:
 181:Src/main.c    ****   MX_USART1_UART_Init();
 883              		.loc 1 181 0
 884 002a FFF7FEFF 		bl	MX_GPIO_Init
 885              	.LVL50:
 182:Src/main.c    ****   //MX_WWDG_Init();
 886              		.loc 1 182 0
 887 002e FFF7FEFF 		bl	MX_USART1_UART_Init
 888              	.LVL51:
 184:Src/main.c    ****   MX_USART2_UART_Init();
 889              		.loc 1 184 0
 890 0032 FFF7FEFF 		bl	MX_USART6_UART_Init
 891              	.LVL52:
 185:Src/main.c    ****   MX_I2C1_Init();
 892              		.loc 1 185 0
 893 0036 FFF7FEFF 		bl	MX_USART2_UART_Init
 894              	.LVL53:
 186:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 895              		.loc 1 186 0
 896 003a FFF7FEFF 		bl	MX_I2C1_Init
 897              	.LVL54:
 187:Src/main.c    **** 
 898              		.loc 1 187 0
 899 003e 0122     		movs	r2, #1
 900 0040 4FF48071 		mov	r1, #256
 901 0044 9A48     		ldr	r0, .L57+16
 902 0046 FFF7FEFF 		bl	HAL_GPIO_WritePin
 903              	.LVL55:
 190:Src/main.c    **** 
 904              		.loc 1 190 0
 905 004a 0323     		movs	r3, #3
 906 004c 0093     		str	r3, [sp]
ARM GAS  /tmp/ccSR0QsN.s 			page 28


 907 004e 0022     		movs	r2, #0
 908 0050 9849     		ldr	r1, .L57+20
 909 0052 9948     		ldr	r0, .L57+24
 910 0054 FFF7FEFF 		bl	SD_MPU6050_Init
 911              	.LVL56:
 192:Src/main.c    ****   {
 912              		.loc 1 192 0
 913 0058 38B9     		cbnz	r0, .L48
 194:Src/main.c    ****   }
 914              		.loc 1 194 0
 915 005a 4FF0FF33 		mov	r3, #-1
 916 005e 0F22     		movs	r2, #15
 917 0060 18A9     		add	r1, sp, #96
 918 0062 9648     		ldr	r0, .L57+28
 919              	.LVL57:
 920 0064 FFF7FEFF 		bl	HAL_UART_Transmit
 921              	.LVL58:
 922 0068 06E0     		b	.L49
 923              	.LVL59:
 924              	.L48:
 198:Src/main.c    ****   }
 925              		.loc 1 198 0
 926 006a 4FF0FF33 		mov	r3, #-1
 927 006e 1122     		movs	r2, #17
 928 0070 13A9     		add	r1, sp, #76
 929 0072 9248     		ldr	r0, .L57+28
 930              	.LVL60:
 931 0074 FFF7FEFF 		bl	HAL_UART_Transmit
 932              	.LVL61:
 933              	.L49:
 201:Src/main.c    ****   B3M_RunNormal(huart6, SERVO_ID_6);
 934              		.loc 1 201 0
 935 0078 914E     		ldr	r6, .L57+32
 936 007a 0123     		movs	r3, #1
 937 007c 0C93     		str	r3, [sp, #48]
 938 007e 6C46     		mov	r4, sp
 939 0080 06F11005 		add	r5, r6, #16
 940 0084 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 941 0086 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 942 0088 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 943 008a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 944 008c 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 945 0090 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 946 0094 96E80F00 		ldmia	r6, {r0, r1, r2, r3}
 947 0098 FFF7FEFF 		bl	B3M_RunNormal
 948              	.LVL62:
 202:Src/main.c    ****   //SD_MPU6050_ReadAccelerometer(&hi2c1,&mpu1);
 949              		.loc 1 202 0
 950 009c 894E     		ldr	r6, .L57+36
 951 009e 0623     		movs	r3, #6
 952 00a0 0C93     		str	r3, [sp, #48]
 953 00a2 6C46     		mov	r4, sp
 954 00a4 06F11005 		add	r5, r6, #16
 955 00a8 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 956 00aa 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 957 00ac 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 958 00ae 0FC4     		stmia	r4!, {r0, r1, r2, r3}
ARM GAS  /tmp/ccSR0QsN.s 			page 29


 959 00b0 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 960 00b4 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 961 00b8 96E80F00 		ldmia	r6, {r0, r1, r2, r3}
 962 00bc FFF7FEFF 		bl	B3M_RunNormal
 963              	.LVL63:
 964              	.L53:
 965              	.LBB9:
 209:Src/main.c    ****       B3M_RunNormal(huart1, SERVO_ID_1);
 966              		.loc 1 209 0
 967 00c0 4FF40051 		mov	r1, #8192
 968 00c4 7A48     		ldr	r0, .L57+16
 969 00c6 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 970              	.LVL64:
 971 00ca 30BB     		cbnz	r0, .L50
 210:Src/main.c    ****       B3M_RunNormal(huart6, SERVO_ID_6);
 972              		.loc 1 210 0
 973 00cc 7C4E     		ldr	r6, .L57+32
 974 00ce 0123     		movs	r3, #1
 975 00d0 0C93     		str	r3, [sp, #48]
 976 00d2 6C46     		mov	r4, sp
 977 00d4 06F11005 		add	r5, r6, #16
 978 00d8 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 979 00da 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 980 00dc 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 981 00de 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 982 00e0 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 983 00e4 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 984 00e8 96E80F00 		ldmia	r6, {r0, r1, r2, r3}
 985 00ec FFF7FEFF 		bl	B3M_RunNormal
 986              	.LVL65:
 211:Src/main.c    ****       HAL_Delay(200);
 987              		.loc 1 211 0
 988 00f0 744E     		ldr	r6, .L57+36
 989 00f2 0623     		movs	r3, #6
 990 00f4 0C93     		str	r3, [sp, #48]
 991 00f6 6C46     		mov	r4, sp
 992 00f8 06F11005 		add	r5, r6, #16
 993 00fc 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 994 00fe 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 995 0100 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 996 0102 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 997 0104 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 998 0108 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 999 010c 96E80F00 		ldmia	r6, {r0, r1, r2, r3}
 1000 0110 FFF7FEFF 		bl	B3M_RunNormal
 1001              	.LVL66:
 212:Src/main.c    ****     }
 1002              		.loc 1 212 0
 1003 0114 C820     		movs	r0, #200
 1004 0116 FFF7FEFF 		bl	HAL_Delay
 1005              	.LVL67:
 1006              	.L50:
 215:Src/main.c    ****     B3M_RunNormal(huart6, SERVO_ID_6);
 1007              		.loc 1 215 0
 1008 011a DFF8A481 		ldr	r8, .L57+32
 1009 011e 4FF0010B 		mov	fp, #1
 1010 0122 CDF830B0 		str	fp, [sp, #48]
ARM GAS  /tmp/ccSR0QsN.s 			page 30


 1011 0126 6C46     		mov	r4, sp
 1012 0128 08F11005 		add	r5, r8, #16
 1013 012c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1014 012e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1015 0130 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1016 0132 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1017 0134 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1018 0138 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 1019 013c 98E80F00 		ldmia	r8, {r0, r1, r2, r3}
 1020 0140 FFF7FEFF 		bl	B3M_RunNormal
 1021              	.LVL68:
 216:Src/main.c    ****     //setModeToNormal();
 1022              		.loc 1 216 0
 1023 0144 5F4F     		ldr	r7, .L57+36
 1024 0146 4FF0060A 		mov	r10, #6
 1025 014a CDF830A0 		str	r10, [sp, #48]
 1026 014e 6E46     		mov	r6, sp
 1027 0150 07F11004 		add	r4, r7, #16
 1028 0154 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1029 0156 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 1030 0158 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1031 015a 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 1032 015c 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 1033 0160 86E80F00 		stmia	r6, {r0, r1, r2, r3}
 1034 0164 97E80F00 		ldmia	r7, {r0, r1, r2, r3}
 1035 0168 FFF7FEFF 		bl	B3M_RunNormal
 1036              	.LVL69:
 225:Src/main.c    ****     B3M_SetDesirePostion(huart6, SERVO_ID_6, 6000);
 1037              		.loc 1 225 0
 1038 016c 4FF47A79 		mov	r9, #1000
 1039 0170 CDF83490 		str	r9, [sp, #52]
 1040 0174 CDF830B0 		str	fp, [sp, #48]
 1041 0178 6E46     		mov	r6, sp
 1042 017a 08F1100E 		add	lr, r8, #16
 1043 017e BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1044 0182 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 1045 0184 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1046 0188 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 1047 018a 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1048 018e 86E80F00 		stmia	r6, {r0, r1, r2, r3}
 1049 0192 98E80F00 		ldmia	r8, {r0, r1, r2, r3}
 1050 0196 FFF7FEFF 		bl	B3M_SetDesirePostion
 1051              	.LVL70:
 226:Src/main.c    ****     HAL_Delay(1000);
 1052              		.loc 1 226 0
 1053 019a 41F27073 		movw	r3, #6000
 1054 019e 0D93     		str	r3, [sp, #52]
 1055 01a0 CDF830A0 		str	r10, [sp, #48]
 1056 01a4 6E46     		mov	r6, sp
 1057 01a6 07F1100E 		add	lr, r7, #16
 1058 01aa BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1059 01ae 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 1060 01b0 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1061 01b4 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 1062 01b6 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 1063 01ba 86E80F00 		stmia	r6, {r0, r1, r2, r3}
 1064 01be 97E80F00 		ldmia	r7, {r0, r1, r2, r3}
ARM GAS  /tmp/ccSR0QsN.s 			page 31


 1065 01c2 FFF7FEFF 		bl	B3M_SetDesirePostion
 1066              	.LVL71:
 227:Src/main.c    **** 
 1067              		.loc 1 227 0
 1068 01c6 4846     		mov	r0, r9
 1069 01c8 FFF7FEFF 		bl	HAL_Delay
 1070              	.LVL72:
 229:Src/main.c    ****     B3M_SetDesirePostion(huart6, SERVO_ID_6, -6000);
 1071              		.loc 1 229 0
 1072 01cc 3E4B     		ldr	r3, .L57+40
 1073 01ce 0D93     		str	r3, [sp, #52]
 1074 01d0 CDF830B0 		str	fp, [sp, #48]
 1075 01d4 6E46     		mov	r6, sp
 1076 01d6 08F1100E 		add	lr, r8, #16
 1077 01da BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1078 01de 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 1079 01e0 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1080 01e4 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 1081 01e6 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1082 01ea 86E80F00 		stmia	r6, {r0, r1, r2, r3}
 1083 01ee 98E80F00 		ldmia	r8, {r0, r1, r2, r3}
 1084 01f2 FFF7FEFF 		bl	B3M_SetDesirePostion
 1085              	.LVL73:
 230:Src/main.c    ****     HAL_Delay(1000);
 1086              		.loc 1 230 0
 1087 01f6 354B     		ldr	r3, .L57+44
 1088 01f8 0D93     		str	r3, [sp, #52]
 1089 01fa CDF830A0 		str	r10, [sp, #48]
 1090 01fe 6D46     		mov	r5, sp
 1091 0200 07F11006 		add	r6, r7, #16
 1092 0204 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 1093 0206 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1094 0208 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 1095 020a 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1096 020c 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 1097 0210 85E80F00 		stmia	r5, {r0, r1, r2, r3}
 1098 0214 97E80F00 		ldmia	r7, {r0, r1, r2, r3}
 1099 0218 FFF7FEFF 		bl	B3M_SetDesirePostion
 1100              	.LVL74:
 231:Src/main.c    **** 
 1101              		.loc 1 231 0
 1102 021c 4846     		mov	r0, r9
 1103 021e FFF7FEFF 		bl	HAL_Delay
 1104              	.LVL75:
 244:Src/main.c    ****     /*
 1105              		.loc 1 244 0
 1106 0222 244C     		ldr	r4, .L57+20
 1107 0224 2146     		mov	r1, r4
 1108 0226 2448     		ldr	r0, .L57+24
 1109 0228 FFF7FEFF 		bl	SD_MPU6050_ReadAccelerometer
 1110              	.LVL76:
 275:Src/main.c    ****     //sprintf(acc, " acc x: %i y: %i z: %i\n\r\n\r", acc_angle_x, acc_angle_y, acc_angle_z);
 1111              		.loc 1 275 0
 1112 022c B4F90C20 		ldrsh	r2, [r4, #12]
 1113 0230 2749     		ldr	r1, .L57+48
 1114 0232 0EA8     		add	r0, sp, #56
 1115 0234 FFF7FEFF 		bl	sprintf
ARM GAS  /tmp/ccSR0QsN.s 			page 32


 1116              	.LVL77:
 277:Src/main.c    ****     //HAL_Delay(50);
 1117              		.loc 1 277 0
 1118 0238 0EA8     		add	r0, sp, #56
 1119 023a FFF7FEFF 		bl	strlen
 1120              	.LVL78:
 1121 023e 4FF0FF33 		mov	r3, #-1
 1122 0242 82B2     		uxth	r2, r0
 1123 0244 0EA9     		add	r1, sp, #56
 1124 0246 1D48     		ldr	r0, .L57+28
 1125 0248 FFF7FEFF 		bl	HAL_UART_Transmit
 1126              	.LVL79:
 282:Src/main.c    ****     if(diff > 9000)
 1127              		.loc 1 282 0
 1128 024c B4F90C00 		ldrsh	r0, [r4, #12]
 1129 0250 FFF7FEFF 		bl	__aeabi_i2d
 1130              	.LVL80:
 1131 0254 12A3     		adr	r3, .L57
 1132 0256 D3E90023 		ldrd	r2, [r3]
 1133 025a FFF7FEFF 		bl	__aeabi_dmul
 1134              	.LVL81:
 1135 025e FFF7FEFF 		bl	__aeabi_d2iz
 1136              	.LVL82:
 1137 0262 00B2     		sxth	r0, r0
 1138              	.LVL83:
 283:Src/main.c    ****       diff = 9000;
 1139              		.loc 1 283 0
 1140 0264 42F22833 		movw	r3, #9000
 1141 0268 9842     		cmp	r0, r3
 1142 026a 00DD     		ble	.L51
 284:Src/main.c    **** 
 1143              		.loc 1 284 0
 1144 026c 1846     		mov	r0, r3
 1145              	.LVL84:
 1146              	.L51:
 286:Src/main.c    ****       diff = -10000;
 1147              		.loc 1 286 0
 1148 026e 194B     		ldr	r3, .L57+52
 1149 0270 9842     		cmp	r0, r3
 1150 0272 00DA     		bge	.L52
 287:Src/main.c    **** 
 1151              		.loc 1 287 0
 1152 0274 1846     		mov	r0, r3
 1153              	.LVL85:
 1154              	.L52:
 289:Src/main.c    ****    //B3M_SetDesirePostion(huart6, SERVO_ID_6, diff);
 1155              		.loc 1 289 0
 1156 0276 124E     		ldr	r6, .L57+32
 1157 0278 0D90     		str	r0, [sp, #52]
 1158 027a 0123     		movs	r3, #1
 1159 027c 0C93     		str	r3, [sp, #48]
 1160 027e 6C46     		mov	r4, sp
 1161 0280 06F11005 		add	r5, r6, #16
 1162 0284 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1163              	.LVL86:
 1164 0286 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1165 0288 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
ARM GAS  /tmp/ccSR0QsN.s 			page 33


 1166 028a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1167 028c 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1168 0290 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 1169 0294 96E80F00 		ldmia	r6, {r0, r1, r2, r3}
 1170 0298 FFF7FEFF 		bl	B3M_SetDesirePostion
 1171              	.LVL87:
 1172              	.LBE9:
 314:Src/main.c    **** 
 1173              		.loc 1 314 0
 1174 029c 10E7     		b	.L53
 1175              	.L58:
 1176 029e 00BF     		.align	3
 1177              	.L57:
 1178 02a0 9A999999 		.word	-1717986918
 1179 02a4 9999E13F 		.word	1071749529
 1180 02a8 14000000 		.word	.LC1
 1181 02ac 24000000 		.word	.LC2
 1182 02b0 00080240 		.word	1073874944
 1183 02b4 00000000 		.word	mpu1
 1184 02b8 00000000 		.word	hi2c1
 1185 02bc 00000000 		.word	huart2
 1186 02c0 00000000 		.word	huart1
 1187 02c4 00000000 		.word	huart6
 1188 02c8 18FCFFFF 		.word	-1000
 1189 02cc 90E8FFFF 		.word	-6000
 1190 02d0 0C000000 		.word	.LC3
 1191 02d4 F0D8FFFF 		.word	-10000
 1192              		.cfi_endproc
 1193              	.LFE127:
 1195              		.comm	mpu1,28,4
 1196              		.comm	hi2c1,84,4
 1197              		.comm	huart6,64,4
 1198              		.comm	huart2,64,4
 1199              		.comm	huart1,64,4
 1200              		.section	.rodata.str1.4,"aMS",%progbits,1
 1201              		.align	2
 1202              	.LC0:
 1203 0000 5372632F 		.ascii	"Src/main.c\000"
 1203      6D61696E 
 1203      2E6300
 1204 000b 00       		.space	1
 1205              	.LC3:
 1206 000c 25690A0D 		.ascii	"%i\012\015\000"
 1206      00
 1207 0011 000000   		.space	3
 1208              	.LC1:
 1209 0014 4D505520 		.ascii	"MPU WORK FINE\012\000"
 1209      574F524B 
 1209      2046494E 
 1209      450A00
 1210 0023 00       		.space	1
 1211              	.LC2:
 1212 0024 4D505520 		.ascii	"MPU NOT WORKING\012\000"
 1212      4E4F5420 
 1212      574F524B 
 1212      494E470A 
 1212      00
ARM GAS  /tmp/ccSR0QsN.s 			page 34


 1213              		.text
 1214              	.Letext0:
 1215              		.file 2 "/home/ryouya/STM32Toolchain/gcc-arm-none-eabi-5_4-2016q3.2/arm-none-eabi/include/machine/
 1216              		.file 3 "/home/ryouya/STM32Toolchain/gcc-arm-none-eabi-5_4-2016q3.2/arm-none-eabi/include/sys/_std
 1217              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1218              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1219              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1220              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1221              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1222              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1223              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 1224              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1225              		.file 12 "Inc/sd_hal_mpu6050.h"
 1226              		.file 13 "Drivers/CMSIS/Include/core_cm4.h"
 1227              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1228              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c_ex.h"
 1229              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1230              		.file 17 "Inc/B3M.h"
 1231              		.file 18 "/home/ryouya/STM32Toolchain/gcc-arm-none-eabi-5_4-2016q3.2/arm-none-eabi/include/stdio.h
 1232              		.file 19 "/home/ryouya/STM32Toolchain/gcc-arm-none-eabi-5_4-2016q3.2/arm-none-eabi/include/string.
ARM GAS  /tmp/ccSR0QsN.s 			page 35


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccSR0QsN.s:22     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccSR0QsN.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccSR0QsN.s:155    .text.MX_GPIO_Init:000000b4 $d
     /tmp/ccSR0QsN.s:163    .text.setModeToNormal:00000000 $t
     /tmp/ccSR0QsN.s:168    .text.setModeToNormal:00000000 setModeToNormal
     /tmp/ccSR0QsN.s:223    .text.setModeToNormal:00000048 $d
                            *COM*:00000040 huart1
     /tmp/ccSR0QsN.s:228    .text.setAngle:00000000 $t
     /tmp/ccSR0QsN.s:233    .text.setAngle:00000000 setAngle
     /tmp/ccSR0QsN.s:356    .text.setAngle:000000a8 $d
                            *COM*:00000040 huart2
     /tmp/ccSR0QsN.s:362    .text.setFree:00000000 $t
     /tmp/ccSR0QsN.s:367    .text.setFree:00000000 setFree
     /tmp/ccSR0QsN.s:432    .text.setFree:00000058 $d
     /tmp/ccSR0QsN.s:438    .text._Error_Handler:00000000 $t
     /tmp/ccSR0QsN.s:443    .text._Error_Handler:00000000 _Error_Handler
     /tmp/ccSR0QsN.s:458    .text.MX_USART1_UART_Init:00000000 $t
     /tmp/ccSR0QsN.s:462    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
     /tmp/ccSR0QsN.s:509    .text.MX_USART1_UART_Init:00000030 $d
     /tmp/ccSR0QsN.s:516    .text.MX_USART6_UART_Init:00000000 $t
     /tmp/ccSR0QsN.s:520    .text.MX_USART6_UART_Init:00000000 MX_USART6_UART_Init
     /tmp/ccSR0QsN.s:566    .text.MX_USART6_UART_Init:00000030 $d
                            *COM*:00000040 huart6
     /tmp/ccSR0QsN.s:573    .text.MX_USART2_UART_Init:00000000 $t
     /tmp/ccSR0QsN.s:577    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
     /tmp/ccSR0QsN.s:623    .text.MX_USART2_UART_Init:00000030 $d
     /tmp/ccSR0QsN.s:630    .text.MX_I2C1_Init:00000000 $t
     /tmp/ccSR0QsN.s:634    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
     /tmp/ccSR0QsN.s:685    .text.MX_I2C1_Init:00000038 $d
                            *COM*:00000054 hi2c1
     /tmp/ccSR0QsN.s:693    .text.SystemClock_Config:00000000 $t
     /tmp/ccSR0QsN.s:698    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccSR0QsN.s:824    .text.SystemClock_Config:000000b8 $d
     /tmp/ccSR0QsN.s:835    .text.main:00000000 $t
     /tmp/ccSR0QsN.s:840    .text.main:00000000 main
     /tmp/ccSR0QsN.s:1178   .text.main:000002a0 $d
                            *COM*:0000001c mpu1
     /tmp/ccSR0QsN.s:1201   .rodata.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Transmit
HAL_Delay
HAL_UART_Receive
HAl_Delay
HAL_UART_Init
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
ARM GAS  /tmp/ccSR0QsN.s 			page 36


HAL_NVIC_SetPriority
__aeabi_i2d
__aeabi_dmul
__aeabi_d2iz
HAL_Init
SD_MPU6050_Init
B3M_RunNormal
HAL_GPIO_ReadPin
B3M_SetDesirePostion
SD_MPU6050_ReadAccelerometer
sprintf
strlen
