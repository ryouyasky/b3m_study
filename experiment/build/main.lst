ARM GAS  /tmp/cc5rO5YX.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"main.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.MX_GPIO_Init,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB133:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   ** This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * COPYRIGHT(c) 2017 STMicroelectronics
  13:Src/main.c    ****   *
  14:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    ****   * are permitted provided that the following conditions are met:
  16:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  18:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    ****   *      and/or other materials provided with the distribution.
  21:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  23:Src/main.c    ****   *      without specific prior written permission.
  24:Src/main.c    ****   *
  25:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  /tmp/cc5rO5YX.s 			page 2


  31:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  32:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:Src/main.c    ****   *
  36:Src/main.c    ****   ******************************************************************************
  37:Src/main.c    ****   */
  38:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  39:Src/main.c    **** #include "main.h"
  40:Src/main.c    **** #include "stm32f4xx_hal.h"
  41:Src/main.c    **** //#include "usart.h"
  42:Src/main.c    **** #include "B3M.h"
  43:Src/main.c    **** #include "string.h"
  44:Src/main.c    **** #include "sd_hal_mpu6050.h"
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  47:Src/main.c    **** UART_HandleTypeDef huart1;
  48:Src/main.c    **** UART_HandleTypeDef huart2;
  49:Src/main.c    **** UART_HandleTypeDef huart6;
  50:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  51:Src/main.c    **** SD_MPU6050 mpu1;
  52:Src/main.c    **** 
  53:Src/main.c    **** //WWDG_HandleTypeDef hwwdg;
  54:Src/main.c    **** 
  55:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  56:Src/main.c    **** 
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  59:Src/main.c    **** void SystemClock_Config(void);
  60:Src/main.c    **** static void MX_GPIO_Init(void);
  61:Src/main.c    **** static void MX_USART2_UART_Init(void);
  62:Src/main.c    **** static void MX_USART1_UART_Init(void);
  63:Src/main.c    **** //static void MX_WWDG_Init(void);
  64:Src/main.c    **** static void MX_USART6_UART_Init(void);
  65:Src/main.c    **** static void MX_I2C1_Init(void);
  66:Src/main.c    **** 
  67:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  68:Src/main.c    **** 
  69:Src/main.c    **** void setModeToNormal(/*unsigned char ID*/)
  70:Src/main.c    **** {
  71:Src/main.c    ****     uint8_t TxData[8];   // TransmitByteData [1 byte]
  72:Src/main.c    ****     //uint8_t CheckSum = 0; // CheckSum calculation
  73:Src/main.c    **** 
  74:Src/main.c    ****     TxData[0] = 0x08;   // All Byte
  75:Src/main.c    ****     TxData[1] = 0x04;   // Command
  76:Src/main.c    ****     TxData[2] = 0x00;   // Option/Status
  77:Src/main.c    ****     TxData[3] = 0x00;   // ID
  78:Src/main.c    ****     TxData[4] = 0x00;   // mode
  79:Src/main.c    ****     TxData[5] = 0x28;   // address
  80:Src/main.c    ****     TxData[6] = 0x01; // device number
  81:Src/main.c    ****     TxData[7] = 0x35;   // Sum
  82:Src/main.c    **** 
  83:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t*)TxData, 8, HAL_MAX_DELAY);
  84:Src/main.c    ****     HAL_Delay(1);
  85:Src/main.c    **** 
  86:Src/main.c    **** }
  87:Src/main.c    **** 
ARM GAS  /tmp/cc5rO5YX.s 			page 3


  88:Src/main.c    **** void setAngle(int16_t angle)
  89:Src/main.c    **** {
  90:Src/main.c    ****     uint8_t TxData[9];   // TransmitByteData [9 bits]
  91:Src/main.c    ****     uint8_t CheckSum = 0; // CheckSum calculation
  92:Src/main.c    ****     uint8_t RxData[9];
  93:Src/main.c    **** 
  94:Src/main.c    ****     if(angle<0)
  95:Src/main.c    ****         angle = 65535+angle+1;
  96:Src/main.c    **** 
  97:Src/main.c    ****     TxData[0] = 0x09;                 // All Byte
  98:Src/main.c    ****     TxData[1] = 0x04;                       // Command
  99:Src/main.c    ****     TxData[2] = 0x00;                       // Option/Status
 100:Src/main.c    ****     TxData[3] = 0x00;                         // ID
 101:Src/main.c    ****     TxData[4] = (uint8_t)0x00FF & angle;              //  mode
 102:Src/main.c    ****     TxData[5] = (uint8_t)0x00FF & (angle >> 8);       // address
 103:Src/main.c    ****     TxData[6] = 0x2A;                         // device number
 104:Src/main.c    ****     TxData[7] = 0x01;                     // Count
 105:Src/main.c    **** 
 106:Src/main.c    ****     // CheckSum calculation
 107:Src/main.c    ****     for(unsigned char i=0; i<=7; i++){
 108:Src/main.c    ****         CheckSum = CheckSum + TxData[i];                // XOR from ID to Data
 109:Src/main.c    ****     }
 110:Src/main.c    ****     CheckSum = (uint8_t)0x00FF & CheckSum;
 111:Src/main.c    **** 
 112:Src/main.c    ****     TxData[8] = CheckSum;
 113:Src/main.c    **** 
 114:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t*)TxData, 9, HAL_MAX_DELAY);
 115:Src/main.c    ****     HAL_Delay(1);
 116:Src/main.c    ****     HAL_UART_Receive(&huart1, (uint8_t*)RxData, 9, HAL_MAX_DELAY);
 117:Src/main.c    ****     HAL_Delay(1);
 118:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)RxData, 9, HAL_MAX_DELAY);
 119:Src/main.c    ****     HAl_Delay(1);
 120:Src/main.c    ****     /*追加*/
 121:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)TxData, 9, HAL_MAX_DELAY);
 122:Src/main.c    ****     HAL_Delay(1);
 123:Src/main.c    **** }
 124:Src/main.c    **** 
 125:Src/main.c    **** void setFree (/*unsigned char ID*/)
 126:Src/main.c    **** {
 127:Src/main.c    ****     uint8_t TxData[8];   // TransmitByteData [1byte]
 128:Src/main.c    **** 
 129:Src/main.c    ****     TxData[0] = 0x08;          // All Byte
 130:Src/main.c    ****     TxData[1] = 0x04;          // Command
 131:Src/main.c    ****     TxData[2] = 0x00;          // Option/Status
 132:Src/main.c    ****     TxData[3] = 0x00;          // ID
 133:Src/main.c    ****     TxData[4] = 0x02;          //  mode
 134:Src/main.c    ****     TxData[5] = 0x28;          // address
 135:Src/main.c    ****     TxData[6] = 0x01;          // device number
 136:Src/main.c    ****     TxData[7] = 0x37;          // Sum
 137:Src/main.c    **** 
 138:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t*)TxData, 8, HAL_MAX_DELAY);
 139:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)TxData, 8, HAL_MAX_DELAY);
 140:Src/main.c    ****     HAL_Delay(1);
 141:Src/main.c    **** }
 142:Src/main.c    **** 
 143:Src/main.c    **** //void setGain (/*unsigned char ID*/){
 144:Src/main.c    **** //  uint8_t TxData[8];   // TransmitByteData [10byte]
ARM GAS  /tmp/cc5rO5YX.s 			page 4


 145:Src/main.c    **** //
 146:Src/main.c    **** //    TxData[0] = 0x08;          // All Byte
 147:Src/main.c    **** //    TxData[1] = 0x04;          // Command
 148:Src/main.c    **** //    TxData[2] = 0x00;          // Option/Status
 149:Src/main.c    **** //    TxData[3] = 0x00;          // ID
 150:Src/main.c    **** //    TxData[4] = 0x02;          //  mode
 151:Src/main.c    **** //    TxData[5] = 0x5C;          // address
 152:Src/main.c    **** //    TxData[6] = 0x01;          // device number
 153:Src/main.c    **** //    TxData[7] = 0x69;          // Sum
 154:Src/main.c    **** //
 155:Src/main.c    **** //    HAL_UART_Transmit(&huart1, (uint8_t*)TxData, 8, HAL_MAX_DELAY);
 156:Src/main.c    **** //    HAL_UART_Transmit(&huart2, (uint8_t*)TxData, 8, HAL_MAX_DELAY);
 157:Src/main.c    **** //    HAL_Delay(1);               // Wait for transmission
 158:Src/main.c    **** //}
 159:Src/main.c    **** 
 160:Src/main.c    **** 
 161:Src/main.c    **** int main(void)
 162:Src/main.c    **** {
 163:Src/main.c    ****   SD_MPU6050_Result result ;
 164:Src/main.c    ****   uint8_t mpu_ok[15] = {"MPU WORK FINE\n"};
 165:Src/main.c    ****   uint8_t mpu_not[17] = {"MPU NOT WORKING\n"};
 166:Src/main.c    **** 
 167:Src/main.c    ****   float diff = 0; //IMU出力角度
 168:Src/main.c    ****   float dig_x = 0;
 169:Src/main.c    ****   float dig_y = 0;
 170:Src/main.c    ****   float dig_z = 0;
 171:Src/main.c    ****   float lp;
 172:Src/main.c    ****   uint32_t i = 0;
 173:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 174:Src/main.c    **** 
 175:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 176:Src/main.c    ****   HAL_Init();
 177:Src/main.c    **** 
 178:Src/main.c    ****   /* Configure the system clock */
 179:Src/main.c    ****   SystemClock_Config();
 180:Src/main.c    **** 
 181:Src/main.c    ****   /* Initialize all configured peripherals */
 182:Src/main.c    ****   MX_GPIO_Init();
 183:Src/main.c    ****   MX_USART1_UART_Init();
 184:Src/main.c    ****   //MX_WWDG_Init();
 185:Src/main.c    ****   MX_USART6_UART_Init();
 186:Src/main.c    ****   MX_USART2_UART_Init();
 187:Src/main.c    ****   MX_I2C1_Init();
 188:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 189:Src/main.c    **** 
 190:Src/main.c    **** 
 191:Src/main.c    ****   result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_16G,SD_MPU6050
 192:Src/main.c    **** 
 193:Src/main.c    ****   if(result == SD_MPU6050_Result_Ok)
 194:Src/main.c    ****   {
 195:Src/main.c    ****     HAL_UART_Transmit(&huart2,mpu_ok,(uint16_t)15, HAL_MAX_DELAY);
 196:Src/main.c    ****   }
 197:Src/main.c    ****   else
 198:Src/main.c    ****   {
 199:Src/main.c    ****     HAL_UART_Transmit(&huart2, mpu_not, (uint16_t)17, HAL_MAX_DELAY);
 200:Src/main.c    ****   }
 201:Src/main.c    **** 
ARM GAS  /tmp/cc5rO5YX.s 			page 5


 202:Src/main.c    ****   B3M_RunNormal(huart1, SERVO_ID_1);
 203:Src/main.c    ****   B3M_RunNormal(huart6, SERVO_ID_1);
 204:Src/main.c    **** 
 205:Src/main.c    ****   SD_MPU6050_ReadAccelerometer(&hi2c1,&mpu1);
 206:Src/main.c    ****   SD_MPU6050_ReadGyroscope(&hi2c1,&mpu1);
 207:Src/main.c    **** 
 208:Src/main.c    **** /*
 209:Src/main.c    ****   int16_t bg_x = mpu1.Gyroscope_X;
 210:Src/main.c    ****   int16_t bg_y = mpu1.Gyroscope_Y;
 211:Src/main.c    ****   int16_t bg_z = mpu1.Gyroscope_Z;
 212:Src/main.c    **** */
 213:Src/main.c    ****   float bg_x = 0;
 214:Src/main.c    ****   float bg_y = 0;
 215:Src/main.c    ****   float bg_z = 0;
 216:Src/main.c    **** 
 217:Src/main.c    ****   float ba_x = 0;
 218:Src/main.c    ****   float ba_y = 0;
 219:Src/main.c    ****   float ba_z = 0;
 220:Src/main.c    **** 
 221:Src/main.c    ****   float g_x = 0;
 222:Src/main.c    ****   float g_y = 0;
 223:Src/main.c    ****   float g_z = 0;
 224:Src/main.c    **** 
 225:Src/main.c    ****   int16_t gy;
 226:Src/main.c    ****   int16_t gx;
 227:Src/main.c    ****   int16_t ex;
 228:Src/main.c    ****   int16_t ey;
 229:Src/main.c    **** 
 230:Src/main.c    ****   bg_x = mpu1.Gyroscope_X;
 231:Src/main.c    ****   bg_y = mpu1.Gyroscope_Y;
 232:Src/main.c    ****   bg_z = mpu1.Gyroscope_Z;
 233:Src/main.c    **** 
 234:Src/main.c    ****   lp = 37;
 235:Src/main.c    **** 
 236:Src/main.c    ****   /* Infinite loop */
 237:Src/main.c    ****   while (1)
 238:Src/main.c    ****   {
 239:Src/main.c    ****     if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==GPIO_PIN_RESET){
 240:Src/main.c    ****       //B3M_RunNormal(huart1, SERVO_ID_1);
 241:Src/main.c    ****       B3M_RunNormal(huart6, SERVO_ID_1);
 242:Src/main.c    ****       HAL_Delay(100);
 243:Src/main.c    ****     }
 244:Src/main.c    **** 
 245:Src/main.c    **** 
 246:Src/main.c    ****     //for(i=0; i<5; i++){
 247:Src/main.c    ****       //SD_MPU6050_ReadGyroscope(&hi2c1,&mpu1);
 248:Src/main.c    ****       B3M_SetDesirePostion(huart6, SERVO_ID_1, 0);
 249:Src/main.c    ****       //HAL_Delay(100);
 250:Src/main.c    ****       //B3M_SetDesirePostion(huart6, SERVO_ID_1, 500);
 251:Src/main.c    ****       //HAL_Delay(100);
 252:Src/main.c    ****     //}
 253:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 254:Src/main.c    **** 
 255:Src/main.c    ****   }
 256:Src/main.c    **** 
 257:Src/main.c    **** }
 258:Src/main.c    **** 
ARM GAS  /tmp/cc5rO5YX.s 			page 6


 259:Src/main.c    **** /** System Clock Configuration　
 260:Src/main.c    **** */
 261:Src/main.c    **** void SystemClock_Config(void)
 262:Src/main.c    **** {
 263:Src/main.c    **** 
 264:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 265:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 266:Src/main.c    **** 
 267:Src/main.c    ****     /**Configure the main internal regulator output voltage
 268:Src/main.c    ****     */
 269:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 270:Src/main.c    **** 
 271:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);//voltage smooth
 272:Src/main.c    **** 
 273:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 274:Src/main.c    ****     */
 275:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 276:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 277:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 278:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 279:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 280:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 281:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 282:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 283:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 284:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 285:Src/main.c    ****   {
 286:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 287:Src/main.c    ****   }
 288:Src/main.c    **** 
 289:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 290:Src/main.c    ****     */
 291:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 292:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 293:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 294:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 295:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 296:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 297:Src/main.c    **** 
 298:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 299:Src/main.c    ****   {
 300:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 301:Src/main.c    ****   }
 302:Src/main.c    **** 
 303:Src/main.c    ****     /**Configure the Systick interrupt time
 304:Src/main.c    ****     */
 305:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 306:Src/main.c    **** 
 307:Src/main.c    ****     /**Configure the Systick
 308:Src/main.c    ****     */
 309:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 310:Src/main.c    **** 
 311:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 312:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 313:Src/main.c    **** }
 314:Src/main.c    **** 
 315:Src/main.c    **** /* I2C1 init function */
ARM GAS  /tmp/cc5rO5YX.s 			page 7


 316:Src/main.c    **** static void MX_I2C1_Init(void)
 317:Src/main.c    **** {
 318:Src/main.c    **** 
 319:Src/main.c    ****   hi2c1.Instance = I2C1;
 320:Src/main.c    ****   hi2c1.Init.ClockSpeed = 400000;
 321:Src/main.c    ****   //hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 322:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 323:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 324:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 325:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 326:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 327:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 328:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 329:Src/main.c    ****   {
 330:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 331:Src/main.c    ****   }
 332:Src/main.c    **** 
 333:Src/main.c    ****   HAL_I2CEx_AnalogFilter_Config(&hi2c1, I2C_ANALOGFILTER_ENABLED);
 334:Src/main.c    **** 
 335:Src/main.c    **** }
 336:Src/main.c    **** 
 337:Src/main.c    **** /* USART1 init function */
 338:Src/main.c    **** static void MX_USART1_UART_Init(void)
 339:Src/main.c    **** {
 340:Src/main.c    **** 
 341:Src/main.c    ****   huart1.Instance = USART1;
 342:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 343:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 344:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 345:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 346:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 347:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 348:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 349:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 350:Src/main.c    ****   {
 351:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 352:Src/main.c    ****   }
 353:Src/main.c    **** 
 354:Src/main.c    **** }
 355:Src/main.c    **** 
 356:Src/main.c    **** /* USART2 init function */
 357:Src/main.c    **** 
 358:Src/main.c    **** static void MX_USART2_UART_Init(void)
 359:Src/main.c    **** {
 360:Src/main.c    **** 
 361:Src/main.c    ****   huart2.Instance = USART2;
 362:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 363:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 364:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 365:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 366:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 367:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 368:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 369:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 370:Src/main.c    ****   {
 371:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 372:Src/main.c    ****   }
ARM GAS  /tmp/cc5rO5YX.s 			page 8


 373:Src/main.c    **** 
 374:Src/main.c    **** }
 375:Src/main.c    **** 
 376:Src/main.c    **** 
 377:Src/main.c    **** /* USART6 init function */
 378:Src/main.c    **** static void MX_USART6_UART_Init(void)
 379:Src/main.c    **** {
 380:Src/main.c    **** 
 381:Src/main.c    ****   huart6.Instance = USART6;
 382:Src/main.c    ****   huart6.Init.BaudRate = 1500000;
 383:Src/main.c    ****   huart6.Init.WordLength = UART_WORDLENGTH_8B;
 384:Src/main.c    ****   huart6.Init.StopBits = UART_STOPBITS_1;
 385:Src/main.c    ****   huart6.Init.Parity = UART_PARITY_NONE;
 386:Src/main.c    ****   huart6.Init.Mode = UART_MODE_TX_RX;
 387:Src/main.c    ****   huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 388:Src/main.c    ****   huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 389:Src/main.c    ****   if (HAL_UART_Init(&huart6) != HAL_OK)
 390:Src/main.c    ****   {
 391:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 392:Src/main.c    ****   }
 393:Src/main.c    **** 
 394:Src/main.c    **** }
 395:Src/main.c    **** 
 396:Src/main.c    **** /* WWDG init function */
 397:Src/main.c    **** //static void MX_WWDG_Init(void)
 398:Src/main.c    **** //{
 399:Src/main.c    **** //
 400:Src/main.c    **** //  hwwdg.Instance = WWDG;
 401:Src/main.c    **** //  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 402:Src/main.c    **** //  hwwdg.Init.Window = 64;
 403:Src/main.c    **** //  hwwdg.Init.Counter = 64;
 404:Src/main.c    **** //  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 405:Src/main.c    **** //  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 406:Src/main.c    **** //  {
 407:Src/main.c    **** //    _Error_Handler(__FILE__, __LINE__);
 408:Src/main.c    **** //  }
 409:Src/main.c    **** //
 410:Src/main.c    **** //}
 411:Src/main.c    **** 
 412:Src/main.c    **** /** Configure pins as
 413:Src/main.c    ****         * Analog
 414:Src/main.c    ****         * Input
 415:Src/main.c    ****         * Output
 416:Src/main.c    ****         * EVENT_OUT
 417:Src/main.c    ****         * EXTI
 418:Src/main.c    **** */
 419:Src/main.c    **** static void MX_GPIO_Init(void)
 420:Src/main.c    **** {
  29              		.loc 1 420 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 40
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 28
  36              		.cfi_offset 4, -28
  37              		.cfi_offset 5, -24
ARM GAS  /tmp/cc5rO5YX.s 			page 9


  38              		.cfi_offset 6, -20
  39              		.cfi_offset 7, -16
  40              		.cfi_offset 8, -12
  41              		.cfi_offset 9, -8
  42              		.cfi_offset 14, -4
  43 0004 8BB0     		sub	sp, sp, #44
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 72
  46              	.LBB2:
 421:Src/main.c    **** 
 422:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 423:Src/main.c    **** 
 424:Src/main.c    ****   /* GPIO Ports Clock Enable */
 425:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  47              		.loc 1 425 0
  48 0006 0024     		movs	r4, #0
  49 0008 0194     		str	r4, [sp, #4]
  50 000a 3C4B     		ldr	r3, .L3
  51 000c 1A6B     		ldr	r2, [r3, #48]
  52 000e 42F00402 		orr	r2, r2, #4
  53 0012 1A63     		str	r2, [r3, #48]
  54 0014 1A6B     		ldr	r2, [r3, #48]
  55 0016 02F00402 		and	r2, r2, #4
  56 001a 0192     		str	r2, [sp, #4]
  57 001c 019A     		ldr	r2, [sp, #4]
  58              	.LBE2:
  59              	.LBB3:
 426:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  60              		.loc 1 426 0
  61 001e 0294     		str	r4, [sp, #8]
  62 0020 1A6B     		ldr	r2, [r3, #48]
  63 0022 42F08002 		orr	r2, r2, #128
  64 0026 1A63     		str	r2, [r3, #48]
  65 0028 1A6B     		ldr	r2, [r3, #48]
  66 002a 02F08002 		and	r2, r2, #128
  67 002e 0292     		str	r2, [sp, #8]
  68 0030 029A     		ldr	r2, [sp, #8]
  69              	.LBE3:
  70              	.LBB4:
 427:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  71              		.loc 1 427 0
  72 0032 0394     		str	r4, [sp, #12]
  73 0034 1A6B     		ldr	r2, [r3, #48]
  74 0036 42F00102 		orr	r2, r2, #1
  75 003a 1A63     		str	r2, [r3, #48]
  76 003c 1A6B     		ldr	r2, [r3, #48]
  77 003e 02F00102 		and	r2, r2, #1
  78 0042 0392     		str	r2, [sp, #12]
  79 0044 039A     		ldr	r2, [sp, #12]
  80              	.LBE4:
  81              	.LBB5:
 428:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  82              		.loc 1 428 0
  83 0046 0494     		str	r4, [sp, #16]
  84 0048 1A6B     		ldr	r2, [r3, #48]
  85 004a 42F00202 		orr	r2, r2, #2
  86 004e 1A63     		str	r2, [r3, #48]
ARM GAS  /tmp/cc5rO5YX.s 			page 10


  87 0050 1B6B     		ldr	r3, [r3, #48]
  88 0052 03F00203 		and	r3, r3, #2
  89 0056 0493     		str	r3, [sp, #16]
  90 0058 049B     		ldr	r3, [sp, #16]
  91              	.LBE5:
 429:Src/main.c    **** 
 430:Src/main.c    ****   /*Configure GPIO pin Output Level */
 431:Src/main.c    ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
  92              		.loc 1 431 0
  93 005a DFF8AC90 		ldr	r9, .L3+12
  94 005e 2246     		mov	r2, r4
  95 0060 2021     		movs	r1, #32
  96 0062 4846     		mov	r0, r9
  97 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
  98              	.LVL0:
 432:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
  99              		.loc 1 432 0
 100 0068 DFF8A080 		ldr	r8, .L3+16
 101 006c 2246     		mov	r2, r4
 102 006e 0821     		movs	r1, #8
 103 0070 4046     		mov	r0, r8
 104 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 105              	.LVL1:
 433:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 106              		.loc 1 433 0
 107 0076 224D     		ldr	r5, .L3+4
 108 0078 2246     		mov	r2, r4
 109 007a 4FF48071 		mov	r1, #256
 110 007e 2846     		mov	r0, r5
 111 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 112              	.LVL2:
 434:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 113              		.loc 1 434 0
 114 0084 2246     		mov	r2, r4
 115 0086 4FF40071 		mov	r1, #512
 116 008a 2846     		mov	r0, r5
 117 008c FFF7FEFF 		bl	HAL_GPIO_WritePin
 118              	.LVL3:
 435:Src/main.c    **** 
 436:Src/main.c    ****   /*Configure GPIO pin : B1_Pin */
 437:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin;
 119              		.loc 1 437 0
 120 0090 4FF40053 		mov	r3, #8192
 121 0094 0593     		str	r3, [sp, #20]
 438:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 122              		.loc 1 438 0
 123 0096 1B4B     		ldr	r3, .L3+8
 124 0098 0693     		str	r3, [sp, #24]
 439:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 125              		.loc 1 439 0
 126 009a 0794     		str	r4, [sp, #28]
 440:Src/main.c    ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 127              		.loc 1 440 0
 128 009c 05A9     		add	r1, sp, #20
 129 009e 2846     		mov	r0, r5
 130 00a0 FFF7FEFF 		bl	HAL_GPIO_Init
 131              	.LVL4:
ARM GAS  /tmp/cc5rO5YX.s 			page 11


 441:Src/main.c    **** 
 442:Src/main.c    ****   /*Configure GPIO pin : LD2_Pin */
 443:Src/main.c    ****   GPIO_InitStruct.Pin = LD2_Pin;
 132              		.loc 1 443 0
 133 00a4 2023     		movs	r3, #32
 134 00a6 0593     		str	r3, [sp, #20]
 444:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 135              		.loc 1 444 0
 136 00a8 0127     		movs	r7, #1
 137 00aa 0697     		str	r7, [sp, #24]
 445:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 138              		.loc 1 445 0
 139 00ac 0794     		str	r4, [sp, #28]
 446:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 140              		.loc 1 446 0
 141 00ae 0226     		movs	r6, #2
 142 00b0 0896     		str	r6, [sp, #32]
 447:Src/main.c    ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 143              		.loc 1 447 0
 144 00b2 05A9     		add	r1, sp, #20
 145 00b4 4846     		mov	r0, r9
 146 00b6 FFF7FEFF 		bl	HAL_GPIO_Init
 147              	.LVL5:
 448:Src/main.c    **** 
 449:Src/main.c    ****     /*Configure GPIO pin : PC8 */
 450:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_8;
 148              		.loc 1 450 0
 149 00ba 4FF48073 		mov	r3, #256
 150 00be 0593     		str	r3, [sp, #20]
 451:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 151              		.loc 1 451 0
 152 00c0 0697     		str	r7, [sp, #24]
 452:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 153              		.loc 1 452 0
 154 00c2 0794     		str	r4, [sp, #28]
 453:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 155              		.loc 1 453 0
 156 00c4 0896     		str	r6, [sp, #32]
 454:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 157              		.loc 1 454 0
 158 00c6 05A9     		add	r1, sp, #20
 159 00c8 2846     		mov	r0, r5
 160 00ca FFF7FEFF 		bl	HAL_GPIO_Init
 161              	.LVL6:
 455:Src/main.c    **** 
 456:Src/main.c    ****     /*Configure GPIO pin : PB3 */
 457:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_3;
 162              		.loc 1 457 0
 163 00ce 0823     		movs	r3, #8
 164 00d0 0593     		str	r3, [sp, #20]
 458:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 165              		.loc 1 458 0
 166 00d2 0697     		str	r7, [sp, #24]
 459:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 167              		.loc 1 459 0
 168 00d4 0794     		str	r4, [sp, #28]
 460:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
ARM GAS  /tmp/cc5rO5YX.s 			page 12


 169              		.loc 1 460 0
 170 00d6 0896     		str	r6, [sp, #32]
 461:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 171              		.loc 1 461 0
 172 00d8 05A9     		add	r1, sp, #20
 173 00da 4046     		mov	r0, r8
 174 00dc FFF7FEFF 		bl	HAL_GPIO_Init
 175              	.LVL7:
 462:Src/main.c    **** 
 463:Src/main.c    ****     /*Configure GPIO pin : PC9 */
 464:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_9;
 176              		.loc 1 464 0
 177 00e0 4FF40073 		mov	r3, #512
 178 00e4 0593     		str	r3, [sp, #20]
 465:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 179              		.loc 1 465 0
 180 00e6 0697     		str	r7, [sp, #24]
 466:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 181              		.loc 1 466 0
 182 00e8 0794     		str	r4, [sp, #28]
 467:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 183              		.loc 1 467 0
 184 00ea 0896     		str	r6, [sp, #32]
 468:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 185              		.loc 1 468 0
 186 00ec 05A9     		add	r1, sp, #20
 187 00ee 2846     		mov	r0, r5
 188 00f0 FFF7FEFF 		bl	HAL_GPIO_Init
 189              	.LVL8:
 469:Src/main.c    **** 
 470:Src/main.c    **** }
 190              		.loc 1 470 0
 191 00f4 0BB0     		add	sp, sp, #44
 192              	.LCFI2:
 193              		.cfi_def_cfa_offset 28
 194              		@ sp needed
 195 00f6 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 196              	.L4:
 197 00fa 00BF     		.align	2
 198              	.L3:
 199 00fc 00380240 		.word	1073887232
 200 0100 00080240 		.word	1073874944
 201 0104 00002110 		.word	270598144
 202 0108 00000240 		.word	1073872896
 203 010c 00040240 		.word	1073873920
 204              		.cfi_endproc
 205              	.LFE133:
 207              		.section	.text.setModeToNormal,"ax",%progbits
 208              		.align	2
 209              		.global	setModeToNormal
 210              		.thumb
 211              		.thumb_func
 213              	setModeToNormal:
 214              	.LFB124:
  70:Src/main.c    ****     uint8_t TxData[8];   // TransmitByteData [1 byte]
 215              		.loc 1 70 0
 216              		.cfi_startproc
ARM GAS  /tmp/cc5rO5YX.s 			page 13


 217              		@ args = 0, pretend = 0, frame = 8
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219 0000 10B5     		push	{r4, lr}
 220              	.LCFI3:
 221              		.cfi_def_cfa_offset 8
 222              		.cfi_offset 4, -8
 223              		.cfi_offset 14, -4
 224 0002 82B0     		sub	sp, sp, #8
 225              	.LCFI4:
 226              		.cfi_def_cfa_offset 16
  74:Src/main.c    ****     TxData[1] = 0x04;   // Command
 227              		.loc 1 74 0
 228 0004 0822     		movs	r2, #8
 229 0006 8DF80020 		strb	r2, [sp]
  75:Src/main.c    ****     TxData[2] = 0x00;   // Option/Status
 230              		.loc 1 75 0
 231 000a 0423     		movs	r3, #4
 232 000c 8DF80130 		strb	r3, [sp, #1]
  76:Src/main.c    ****     TxData[3] = 0x00;   // ID
 233              		.loc 1 76 0
 234 0010 0023     		movs	r3, #0
 235 0012 8DF80230 		strb	r3, [sp, #2]
  77:Src/main.c    ****     TxData[4] = 0x00;   // mode
 236              		.loc 1 77 0
 237 0016 8DF80330 		strb	r3, [sp, #3]
  78:Src/main.c    ****     TxData[5] = 0x28;   // address
 238              		.loc 1 78 0
 239 001a 8DF80430 		strb	r3, [sp, #4]
  79:Src/main.c    ****     TxData[6] = 0x01; // device number
 240              		.loc 1 79 0
 241 001e 2823     		movs	r3, #40
 242 0020 8DF80530 		strb	r3, [sp, #5]
  80:Src/main.c    ****     TxData[7] = 0x35;   // Sum
 243              		.loc 1 80 0
 244 0024 0124     		movs	r4, #1
 245 0026 8DF80640 		strb	r4, [sp, #6]
  81:Src/main.c    **** 
 246              		.loc 1 81 0
 247 002a 3523     		movs	r3, #53
 248 002c 8DF80730 		strb	r3, [sp, #7]
  83:Src/main.c    ****     HAL_Delay(1);
 249              		.loc 1 83 0
 250 0030 4FF0FF33 		mov	r3, #-1
 251 0034 6946     		mov	r1, sp
 252 0036 0448     		ldr	r0, .L7
 253 0038 FFF7FEFF 		bl	HAL_UART_Transmit
 254              	.LVL9:
  84:Src/main.c    **** 
 255              		.loc 1 84 0
 256 003c 2046     		mov	r0, r4
 257 003e FFF7FEFF 		bl	HAL_Delay
 258              	.LVL10:
  86:Src/main.c    **** 
 259              		.loc 1 86 0
 260 0042 02B0     		add	sp, sp, #8
 261              	.LCFI5:
 262              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc5rO5YX.s 			page 14


 263              		@ sp needed
 264 0044 10BD     		pop	{r4, pc}
 265              	.L8:
 266 0046 00BF     		.align	2
 267              	.L7:
 268 0048 00000000 		.word	huart1
 269              		.cfi_endproc
 270              	.LFE124:
 272              		.section	.text.setAngle,"ax",%progbits
 273              		.align	2
 274              		.global	setAngle
 275              		.thumb
 276              		.thumb_func
 278              	setAngle:
 279              	.LFB125:
  89:Src/main.c    ****     uint8_t TxData[9];   // TransmitByteData [9 bits]
 280              		.loc 1 89 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 24
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              	.LVL11:
 285 0000 10B5     		push	{r4, lr}
 286              	.LCFI6:
 287              		.cfi_def_cfa_offset 8
 288              		.cfi_offset 4, -8
 289              		.cfi_offset 14, -4
 290 0002 86B0     		sub	sp, sp, #24
 291              	.LCFI7:
 292              		.cfi_def_cfa_offset 32
 293              	.LVL12:
  97:Src/main.c    ****     TxData[1] = 0x04;                       // Command
 294              		.loc 1 97 0
 295 0004 0923     		movs	r3, #9
 296 0006 8DF80C30 		strb	r3, [sp, #12]
  98:Src/main.c    ****     TxData[2] = 0x00;                       // Option/Status
 297              		.loc 1 98 0
 298 000a 0423     		movs	r3, #4
 299 000c 8DF80D30 		strb	r3, [sp, #13]
  99:Src/main.c    ****     TxData[3] = 0x00;                         // ID
 300              		.loc 1 99 0
 301 0010 0022     		movs	r2, #0
 302 0012 8DF80E20 		strb	r2, [sp, #14]
 100:Src/main.c    ****     TxData[4] = (uint8_t)0x00FF & angle;              //  mode
 303              		.loc 1 100 0
 304 0016 8DF80F20 		strb	r2, [sp, #15]
 101:Src/main.c    ****     TxData[5] = (uint8_t)0x00FF & (angle >> 8);       // address
 305              		.loc 1 101 0
 306 001a 8DF81000 		strb	r0, [sp, #16]
 102:Src/main.c    ****     TxData[6] = 0x2A;                         // device number
 307              		.loc 1 102 0
 308 001e C0F30720 		ubfx	r0, r0, #8, #8
 309              	.LVL13:
 310 0022 8DF81100 		strb	r0, [sp, #17]
 103:Src/main.c    ****     TxData[7] = 0x01;                     // Count
 311              		.loc 1 103 0
 312 0026 2A23     		movs	r3, #42
 313 0028 8DF81230 		strb	r3, [sp, #18]
ARM GAS  /tmp/cc5rO5YX.s 			page 15


 104:Src/main.c    **** 
 314              		.loc 1 104 0
 315 002c 0123     		movs	r3, #1
 316 002e 8DF81330 		strb	r3, [sp, #19]
 317              	.LVL14:
 318              	.LBB6:
 107:Src/main.c    ****         CheckSum = CheckSum + TxData[i];                // XOR from ID to Data
 319              		.loc 1 107 0
 320 0032 1346     		mov	r3, r2
 321 0034 07E0     		b	.L10
 322              	.LVL15:
 323              	.L11:
 108:Src/main.c    ****     }
 324              		.loc 1 108 0 discriminator 3
 325 0036 06A9     		add	r1, sp, #24
 326 0038 1944     		add	r1, r1, r3
 327 003a 11F80C1C 		ldrb	r1, [r1, #-12]	@ zero_extendqisi2
 328 003e 0A44     		add	r2, r2, r1
 329              	.LVL16:
 330 0040 D2B2     		uxtb	r2, r2
 331              	.LVL17:
 107:Src/main.c    ****         CheckSum = CheckSum + TxData[i];                // XOR from ID to Data
 332              		.loc 1 107 0 discriminator 3
 333 0042 0133     		adds	r3, r3, #1
 334              	.LVL18:
 335 0044 DBB2     		uxtb	r3, r3
 336              	.LVL19:
 337              	.L10:
 107:Src/main.c    ****         CheckSum = CheckSum + TxData[i];                // XOR from ID to Data
 338              		.loc 1 107 0 is_stmt 0 discriminator 1
 339 0046 072B     		cmp	r3, #7
 340 0048 F5D9     		bls	.L11
 341              	.LBE6:
 112:Src/main.c    **** 
 342              		.loc 1 112 0 is_stmt 1
 343 004a 8DF81420 		strb	r2, [sp, #20]
 114:Src/main.c    ****     HAL_Delay(1);
 344              		.loc 1 114 0
 345 004e 164C     		ldr	r4, .L13
 346 0050 4FF0FF33 		mov	r3, #-1
 347              	.LVL20:
 348 0054 0922     		movs	r2, #9
 349              	.LVL21:
 350 0056 03A9     		add	r1, sp, #12
 351 0058 2046     		mov	r0, r4
 352 005a FFF7FEFF 		bl	HAL_UART_Transmit
 353              	.LVL22:
 115:Src/main.c    ****     HAL_UART_Receive(&huart1, (uint8_t*)RxData, 9, HAL_MAX_DELAY);
 354              		.loc 1 115 0
 355 005e 0120     		movs	r0, #1
 356 0060 FFF7FEFF 		bl	HAL_Delay
 357              	.LVL23:
 116:Src/main.c    ****     HAL_Delay(1);
 358              		.loc 1 116 0
 359 0064 4FF0FF33 		mov	r3, #-1
 360 0068 0922     		movs	r2, #9
 361 006a 6946     		mov	r1, sp
ARM GAS  /tmp/cc5rO5YX.s 			page 16


 362 006c 2046     		mov	r0, r4
 363 006e FFF7FEFF 		bl	HAL_UART_Receive
 364              	.LVL24:
 117:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)RxData, 9, HAL_MAX_DELAY);
 365              		.loc 1 117 0
 366 0072 0120     		movs	r0, #1
 367 0074 FFF7FEFF 		bl	HAL_Delay
 368              	.LVL25:
 118:Src/main.c    ****     HAl_Delay(1);
 369              		.loc 1 118 0
 370 0078 0C4C     		ldr	r4, .L13+4
 371 007a 4FF0FF33 		mov	r3, #-1
 372 007e 0922     		movs	r2, #9
 373 0080 6946     		mov	r1, sp
 374 0082 2046     		mov	r0, r4
 375 0084 FFF7FEFF 		bl	HAL_UART_Transmit
 376              	.LVL26:
 119:Src/main.c    ****     /*追加*/
 377              		.loc 1 119 0
 378 0088 0120     		movs	r0, #1
 379 008a FFF7FEFF 		bl	HAl_Delay
 380              	.LVL27:
 121:Src/main.c    ****     HAL_Delay(1);
 381              		.loc 1 121 0
 382 008e 4FF0FF33 		mov	r3, #-1
 383 0092 0922     		movs	r2, #9
 384 0094 03A9     		add	r1, sp, #12
 385 0096 2046     		mov	r0, r4
 386 0098 FFF7FEFF 		bl	HAL_UART_Transmit
 387              	.LVL28:
 122:Src/main.c    **** }
 388              		.loc 1 122 0
 389 009c 0120     		movs	r0, #1
 390 009e FFF7FEFF 		bl	HAL_Delay
 391              	.LVL29:
 123:Src/main.c    **** 
 392              		.loc 1 123 0
 393 00a2 06B0     		add	sp, sp, #24
 394              	.LCFI8:
 395              		.cfi_def_cfa_offset 8
 396              		@ sp needed
 397 00a4 10BD     		pop	{r4, pc}
 398              	.L14:
 399 00a6 00BF     		.align	2
 400              	.L13:
 401 00a8 00000000 		.word	huart1
 402 00ac 00000000 		.word	huart2
 403              		.cfi_endproc
 404              	.LFE125:
 406              		.section	.text.setFree,"ax",%progbits
 407              		.align	2
 408              		.global	setFree
 409              		.thumb
 410              		.thumb_func
 412              	setFree:
 413              	.LFB126:
 126:Src/main.c    ****     uint8_t TxData[8];   // TransmitByteData [1byte]
ARM GAS  /tmp/cc5rO5YX.s 			page 17


 414              		.loc 1 126 0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 8
 417              		@ frame_needed = 0, uses_anonymous_args = 0
 418 0000 30B5     		push	{r4, r5, lr}
 419              	.LCFI9:
 420              		.cfi_def_cfa_offset 12
 421              		.cfi_offset 4, -12
 422              		.cfi_offset 5, -8
 423              		.cfi_offset 14, -4
 424 0002 83B0     		sub	sp, sp, #12
 425              	.LCFI10:
 426              		.cfi_def_cfa_offset 24
 129:Src/main.c    ****     TxData[1] = 0x04;          // Command
 427              		.loc 1 129 0
 428 0004 0824     		movs	r4, #8
 429 0006 8DF80040 		strb	r4, [sp]
 130:Src/main.c    ****     TxData[2] = 0x00;          // Option/Status
 430              		.loc 1 130 0
 431 000a 0423     		movs	r3, #4
 432 000c 8DF80130 		strb	r3, [sp, #1]
 131:Src/main.c    ****     TxData[3] = 0x00;          // ID
 433              		.loc 1 131 0
 434 0010 0023     		movs	r3, #0
 435 0012 8DF80230 		strb	r3, [sp, #2]
 132:Src/main.c    ****     TxData[4] = 0x02;          //  mode
 436              		.loc 1 132 0
 437 0016 8DF80330 		strb	r3, [sp, #3]
 133:Src/main.c    ****     TxData[5] = 0x28;          // address
 438              		.loc 1 133 0
 439 001a 0223     		movs	r3, #2
 440 001c 8DF80430 		strb	r3, [sp, #4]
 134:Src/main.c    ****     TxData[6] = 0x01;          // device number
 441              		.loc 1 134 0
 442 0020 2823     		movs	r3, #40
 443 0022 8DF80530 		strb	r3, [sp, #5]
 135:Src/main.c    ****     TxData[7] = 0x37;          // Sum
 444              		.loc 1 135 0
 445 0026 0125     		movs	r5, #1
 446 0028 8DF80650 		strb	r5, [sp, #6]
 136:Src/main.c    **** 
 447              		.loc 1 136 0
 448 002c 3723     		movs	r3, #55
 449 002e 8DF80730 		strb	r3, [sp, #7]
 138:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)TxData, 8, HAL_MAX_DELAY);
 450              		.loc 1 138 0
 451 0032 4FF0FF33 		mov	r3, #-1
 452 0036 2246     		mov	r2, r4
 453 0038 6946     		mov	r1, sp
 454 003a 0748     		ldr	r0, .L17
 455 003c FFF7FEFF 		bl	HAL_UART_Transmit
 456              	.LVL30:
 139:Src/main.c    ****     HAL_Delay(1);
 457              		.loc 1 139 0
 458 0040 4FF0FF33 		mov	r3, #-1
 459 0044 2246     		mov	r2, r4
 460 0046 6946     		mov	r1, sp
ARM GAS  /tmp/cc5rO5YX.s 			page 18


 461 0048 0448     		ldr	r0, .L17+4
 462 004a FFF7FEFF 		bl	HAL_UART_Transmit
 463              	.LVL31:
 140:Src/main.c    **** }
 464              		.loc 1 140 0
 465 004e 2846     		mov	r0, r5
 466 0050 FFF7FEFF 		bl	HAL_Delay
 467              	.LVL32:
 141:Src/main.c    **** 
 468              		.loc 1 141 0
 469 0054 03B0     		add	sp, sp, #12
 470              	.LCFI11:
 471              		.cfi_def_cfa_offset 12
 472              		@ sp needed
 473 0056 30BD     		pop	{r4, r5, pc}
 474              	.L18:
 475              		.align	2
 476              	.L17:
 477 0058 00000000 		.word	huart1
 478 005c 00000000 		.word	huart2
 479              		.cfi_endproc
 480              	.LFE126:
 482              		.section	.text._Error_Handler,"ax",%progbits
 483              		.align	2
 484              		.global	_Error_Handler
 485              		.thumb
 486              		.thumb_func
 488              	_Error_Handler:
 489              	.LFB134:
 471:Src/main.c    **** 
 472:Src/main.c    **** 
 473:Src/main.c    **** /**
 474:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 475:Src/main.c    ****   * @param  None
 476:Src/main.c    ****   * @retval None
 477:Src/main.c    ****   */
 478:Src/main.c    **** void _Error_Handler(char * file, int line)
 479:Src/main.c    **** {
 490              		.loc 1 479 0
 491              		.cfi_startproc
 492              		@ Volatile: function does not return.
 493              		@ args = 0, pretend = 0, frame = 0
 494              		@ frame_needed = 0, uses_anonymous_args = 0
 495              		@ link register save eliminated.
 496              	.LVL33:
 497              	.L20:
 498 0000 FEE7     		b	.L20
 499              		.cfi_endproc
 500              	.LFE134:
 502 0002 00BF     		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 503              		.align	2
 504              		.thumb
 505              		.thumb_func
 507              	MX_USART1_UART_Init:
 508              	.LFB130:
 339:Src/main.c    **** 
 509              		.loc 1 339 0
ARM GAS  /tmp/cc5rO5YX.s 			page 19


 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 339:Src/main.c    **** 
 513              		.loc 1 339 0
 514 0000 08B5     		push	{r3, lr}
 515              	.LCFI12:
 516              		.cfi_def_cfa_offset 8
 517              		.cfi_offset 3, -8
 518              		.cfi_offset 14, -4
 341:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 519              		.loc 1 341 0
 520 0002 0B48     		ldr	r0, .L24
 521 0004 0B4B     		ldr	r3, .L24+4
 522 0006 0360     		str	r3, [r0]
 342:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 523              		.loc 1 342 0
 524 0008 4FF4E133 		mov	r3, #115200
 525 000c 4360     		str	r3, [r0, #4]
 343:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 526              		.loc 1 343 0
 527 000e 0023     		movs	r3, #0
 528 0010 8360     		str	r3, [r0, #8]
 344:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 529              		.loc 1 344 0
 530 0012 C360     		str	r3, [r0, #12]
 345:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 531              		.loc 1 345 0
 532 0014 0361     		str	r3, [r0, #16]
 346:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 533              		.loc 1 346 0
 534 0016 0C22     		movs	r2, #12
 535 0018 4261     		str	r2, [r0, #20]
 347:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 536              		.loc 1 347 0
 537 001a 8361     		str	r3, [r0, #24]
 348:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 538              		.loc 1 348 0
 539 001c C361     		str	r3, [r0, #28]
 349:Src/main.c    ****   {
 540              		.loc 1 349 0
 541 001e FFF7FEFF 		bl	HAL_UART_Init
 542              	.LVL34:
 543 0022 20B1     		cbz	r0, .L21
 351:Src/main.c    ****   }
 544              		.loc 1 351 0
 545 0024 40F25F11 		movw	r1, #351
 546 0028 0348     		ldr	r0, .L24+8
 547 002a FFF7FEFF 		bl	_Error_Handler
 548              	.LVL35:
 549              	.L21:
 550 002e 08BD     		pop	{r3, pc}
 551              	.L25:
 552              		.align	2
 553              	.L24:
 554 0030 00000000 		.word	huart1
 555 0034 00100140 		.word	1073811456
ARM GAS  /tmp/cc5rO5YX.s 			page 20


 556 0038 00000000 		.word	.LC0
 557              		.cfi_endproc
 558              	.LFE130:
 560              		.section	.text.MX_USART6_UART_Init,"ax",%progbits
 561              		.align	2
 562              		.thumb
 563              		.thumb_func
 565              	MX_USART6_UART_Init:
 566              	.LFB132:
 379:Src/main.c    **** 
 567              		.loc 1 379 0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571 0000 08B5     		push	{r3, lr}
 572              	.LCFI13:
 573              		.cfi_def_cfa_offset 8
 574              		.cfi_offset 3, -8
 575              		.cfi_offset 14, -4
 381:Src/main.c    ****   huart6.Init.BaudRate = 1500000;
 576              		.loc 1 381 0
 577 0002 0B48     		ldr	r0, .L29
 578 0004 0B4B     		ldr	r3, .L29+4
 579 0006 0360     		str	r3, [r0]
 382:Src/main.c    ****   huart6.Init.WordLength = UART_WORDLENGTH_8B;
 580              		.loc 1 382 0
 581 0008 0B4B     		ldr	r3, .L29+8
 582 000a 4360     		str	r3, [r0, #4]
 383:Src/main.c    ****   huart6.Init.StopBits = UART_STOPBITS_1;
 583              		.loc 1 383 0
 584 000c 0023     		movs	r3, #0
 585 000e 8360     		str	r3, [r0, #8]
 384:Src/main.c    ****   huart6.Init.Parity = UART_PARITY_NONE;
 586              		.loc 1 384 0
 587 0010 C360     		str	r3, [r0, #12]
 385:Src/main.c    ****   huart6.Init.Mode = UART_MODE_TX_RX;
 588              		.loc 1 385 0
 589 0012 0361     		str	r3, [r0, #16]
 386:Src/main.c    ****   huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 590              		.loc 1 386 0
 591 0014 0C22     		movs	r2, #12
 592 0016 4261     		str	r2, [r0, #20]
 387:Src/main.c    ****   huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 593              		.loc 1 387 0
 594 0018 8361     		str	r3, [r0, #24]
 388:Src/main.c    ****   if (HAL_UART_Init(&huart6) != HAL_OK)
 595              		.loc 1 388 0
 596 001a C361     		str	r3, [r0, #28]
 389:Src/main.c    ****   {
 597              		.loc 1 389 0
 598 001c FFF7FEFF 		bl	HAL_UART_Init
 599              	.LVL36:
 600 0020 20B1     		cbz	r0, .L26
 391:Src/main.c    ****   }
 601              		.loc 1 391 0
 602 0022 40F28711 		movw	r1, #391
 603 0026 0548     		ldr	r0, .L29+12
ARM GAS  /tmp/cc5rO5YX.s 			page 21


 604 0028 FFF7FEFF 		bl	_Error_Handler
 605              	.LVL37:
 606              	.L26:
 607 002c 08BD     		pop	{r3, pc}
 608              	.L30:
 609 002e 00BF     		.align	2
 610              	.L29:
 611 0030 00000000 		.word	huart6
 612 0034 00140140 		.word	1073812480
 613 0038 60E31600 		.word	1500000
 614 003c 00000000 		.word	.LC0
 615              		.cfi_endproc
 616              	.LFE132:
 618              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 619              		.align	2
 620              		.thumb
 621              		.thumb_func
 623              	MX_USART2_UART_Init:
 624              	.LFB131:
 359:Src/main.c    **** 
 625              		.loc 1 359 0
 626              		.cfi_startproc
 627              		@ args = 0, pretend = 0, frame = 0
 628              		@ frame_needed = 0, uses_anonymous_args = 0
 629 0000 08B5     		push	{r3, lr}
 630              	.LCFI14:
 631              		.cfi_def_cfa_offset 8
 632              		.cfi_offset 3, -8
 633              		.cfi_offset 14, -4
 361:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 634              		.loc 1 361 0
 635 0002 0B48     		ldr	r0, .L34
 636 0004 0B4B     		ldr	r3, .L34+4
 637 0006 0360     		str	r3, [r0]
 362:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 638              		.loc 1 362 0
 639 0008 4FF4E133 		mov	r3, #115200
 640 000c 4360     		str	r3, [r0, #4]
 363:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 641              		.loc 1 363 0
 642 000e 0023     		movs	r3, #0
 643 0010 8360     		str	r3, [r0, #8]
 364:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 644              		.loc 1 364 0
 645 0012 C360     		str	r3, [r0, #12]
 365:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 646              		.loc 1 365 0
 647 0014 0361     		str	r3, [r0, #16]
 366:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 648              		.loc 1 366 0
 649 0016 0C22     		movs	r2, #12
 650 0018 4261     		str	r2, [r0, #20]
 367:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 651              		.loc 1 367 0
 652 001a 8361     		str	r3, [r0, #24]
 368:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 653              		.loc 1 368 0
ARM GAS  /tmp/cc5rO5YX.s 			page 22


 654 001c C361     		str	r3, [r0, #28]
 369:Src/main.c    ****   {
 655              		.loc 1 369 0
 656 001e FFF7FEFF 		bl	HAL_UART_Init
 657              	.LVL38:
 658 0022 20B1     		cbz	r0, .L31
 371:Src/main.c    ****   }
 659              		.loc 1 371 0
 660 0024 40F27311 		movw	r1, #371
 661 0028 0348     		ldr	r0, .L34+8
 662 002a FFF7FEFF 		bl	_Error_Handler
 663              	.LVL39:
 664              	.L31:
 665 002e 08BD     		pop	{r3, pc}
 666              	.L35:
 667              		.align	2
 668              	.L34:
 669 0030 00000000 		.word	huart2
 670 0034 00440040 		.word	1073759232
 671 0038 00000000 		.word	.LC0
 672              		.cfi_endproc
 673              	.LFE131:
 675              		.section	.text.MX_I2C1_Init,"ax",%progbits
 676              		.align	2
 677              		.thumb
 678              		.thumb_func
 680              	MX_I2C1_Init:
 681              	.LFB129:
 317:Src/main.c    **** 
 682              		.loc 1 317 0
 683              		.cfi_startproc
 684              		@ args = 0, pretend = 0, frame = 0
 685              		@ frame_needed = 0, uses_anonymous_args = 0
 686 0000 08B5     		push	{r3, lr}
 687              	.LCFI15:
 688              		.cfi_def_cfa_offset 8
 689              		.cfi_offset 3, -8
 690              		.cfi_offset 14, -4
 319:Src/main.c    ****   hi2c1.Init.ClockSpeed = 400000;
 691              		.loc 1 319 0
 692 0002 0D48     		ldr	r0, .L39
 693 0004 0D4B     		ldr	r3, .L39+4
 694 0006 0360     		str	r3, [r0]
 320:Src/main.c    ****   //hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 695              		.loc 1 320 0
 696 0008 0D4B     		ldr	r3, .L39+8
 697 000a 4360     		str	r3, [r0, #4]
 322:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 698              		.loc 1 322 0
 699 000c 0023     		movs	r3, #0
 700 000e C360     		str	r3, [r0, #12]
 323:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 701              		.loc 1 323 0
 702 0010 4FF48042 		mov	r2, #16384
 703 0014 0261     		str	r2, [r0, #16]
 324:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 704              		.loc 1 324 0
ARM GAS  /tmp/cc5rO5YX.s 			page 23


 705 0016 4361     		str	r3, [r0, #20]
 325:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 706              		.loc 1 325 0
 707 0018 8361     		str	r3, [r0, #24]
 326:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 708              		.loc 1 326 0
 709 001a C361     		str	r3, [r0, #28]
 327:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 710              		.loc 1 327 0
 711 001c 0362     		str	r3, [r0, #32]
 328:Src/main.c    ****   {
 712              		.loc 1 328 0
 713 001e FFF7FEFF 		bl	HAL_I2C_Init
 714              	.LVL40:
 715 0022 20B1     		cbz	r0, .L37
 330:Src/main.c    ****   }
 716              		.loc 1 330 0
 717 0024 4FF4A571 		mov	r1, #330
 718 0028 0648     		ldr	r0, .L39+12
 719 002a FFF7FEFF 		bl	_Error_Handler
 720              	.LVL41:
 721              	.L37:
 333:Src/main.c    **** 
 722              		.loc 1 333 0
 723 002e 0021     		movs	r1, #0
 724 0030 0148     		ldr	r0, .L39
 725 0032 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 726              	.LVL42:
 727 0036 08BD     		pop	{r3, pc}
 728              	.L40:
 729              		.align	2
 730              	.L39:
 731 0038 00000000 		.word	hi2c1
 732 003c 00540040 		.word	1073763328
 733 0040 801A0600 		.word	400000
 734 0044 00000000 		.word	.LC0
 735              		.cfi_endproc
 736              	.LFE129:
 738              		.section	.text.SystemClock_Config,"ax",%progbits
 739              		.align	2
 740              		.global	SystemClock_Config
 741              		.thumb
 742              		.thumb_func
 744              	SystemClock_Config:
 745              	.LFB128:
 262:Src/main.c    **** 
 746              		.loc 1 262 0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 80
 749              		@ frame_needed = 0, uses_anonymous_args = 0
 750 0000 00B5     		push	{lr}
 751              	.LCFI16:
 752              		.cfi_def_cfa_offset 4
 753              		.cfi_offset 14, -4
 754 0002 95B0     		sub	sp, sp, #84
 755              	.LCFI17:
 756              		.cfi_def_cfa_offset 88
ARM GAS  /tmp/cc5rO5YX.s 			page 24


 757              	.LBB7:
 269:Src/main.c    **** 
 758              		.loc 1 269 0
 759 0004 0022     		movs	r2, #0
 760 0006 0192     		str	r2, [sp, #4]
 761 0008 2B4B     		ldr	r3, .L45
 762 000a 196C     		ldr	r1, [r3, #64]
 763 000c 41F08051 		orr	r1, r1, #268435456
 764 0010 1964     		str	r1, [r3, #64]
 765 0012 1B6C     		ldr	r3, [r3, #64]
 766 0014 03F08053 		and	r3, r3, #268435456
 767 0018 0193     		str	r3, [sp, #4]
 768 001a 019B     		ldr	r3, [sp, #4]
 769              	.LBE7:
 770              	.LBB8:
 271:Src/main.c    **** 
 771              		.loc 1 271 0
 772 001c 0292     		str	r2, [sp, #8]
 773 001e 2749     		ldr	r1, .L45+4
 774 0020 0B68     		ldr	r3, [r1]
 775 0022 23F44043 		bic	r3, r3, #49152
 776 0026 43F40043 		orr	r3, r3, #32768
 777 002a 0B60     		str	r3, [r1]
 778 002c 0B68     		ldr	r3, [r1]
 779 002e 03F44043 		and	r3, r3, #49152
 780 0032 0293     		str	r3, [sp, #8]
 781 0034 029B     		ldr	r3, [sp, #8]
 782              	.LBE8:
 275:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 783              		.loc 1 275 0
 784 0036 0221     		movs	r1, #2
 785 0038 0891     		str	r1, [sp, #32]
 276:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 786              		.loc 1 276 0
 787 003a 0123     		movs	r3, #1
 788 003c 0B93     		str	r3, [sp, #44]
 277:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 789              		.loc 1 277 0
 790 003e 1023     		movs	r3, #16
 791 0040 0C93     		str	r3, [sp, #48]
 278:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 792              		.loc 1 278 0
 793 0042 0E91     		str	r1, [sp, #56]
 279:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 794              		.loc 1 279 0
 795 0044 0F92     		str	r2, [sp, #60]
 280:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 796              		.loc 1 280 0
 797 0046 1093     		str	r3, [sp, #64]
 281:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 798              		.loc 1 281 0
 799 0048 4FF4A873 		mov	r3, #336
 800 004c 1193     		str	r3, [sp, #68]
 282:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 801              		.loc 1 282 0
 802 004e 0423     		movs	r3, #4
 803 0050 1293     		str	r3, [sp, #72]
ARM GAS  /tmp/cc5rO5YX.s 			page 25


 283:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804              		.loc 1 283 0
 805 0052 0723     		movs	r3, #7
 806 0054 1393     		str	r3, [sp, #76]
 284:Src/main.c    ****   {
 807              		.loc 1 284 0
 808 0056 08A8     		add	r0, sp, #32
 809 0058 FFF7FEFF 		bl	HAL_RCC_OscConfig
 810              	.LVL43:
 811 005c 20B1     		cbz	r0, .L42
 286:Src/main.c    ****   }
 812              		.loc 1 286 0
 813 005e 4FF48F71 		mov	r1, #286
 814 0062 1748     		ldr	r0, .L45+8
 815 0064 FFF7FEFF 		bl	_Error_Handler
 816              	.LVL44:
 817              	.L42:
 291:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 818              		.loc 1 291 0
 819 0068 0F23     		movs	r3, #15
 820 006a 0393     		str	r3, [sp, #12]
 293:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 821              		.loc 1 293 0
 822 006c 0221     		movs	r1, #2
 823 006e 0491     		str	r1, [sp, #16]
 294:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 824              		.loc 1 294 0
 825 0070 0023     		movs	r3, #0
 826 0072 0593     		str	r3, [sp, #20]
 295:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 827              		.loc 1 295 0
 828 0074 4FF48052 		mov	r2, #4096
 829 0078 0692     		str	r2, [sp, #24]
 296:Src/main.c    **** 
 830              		.loc 1 296 0
 831 007a 0793     		str	r3, [sp, #28]
 298:Src/main.c    ****   {
 832              		.loc 1 298 0
 833 007c 03A8     		add	r0, sp, #12
 834 007e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 835              	.LVL45:
 836 0082 20B1     		cbz	r0, .L43
 300:Src/main.c    ****   }
 837              		.loc 1 300 0
 838 0084 4FF49671 		mov	r1, #300
 839 0088 0D48     		ldr	r0, .L45+8
 840 008a FFF7FEFF 		bl	_Error_Handler
 841              	.LVL46:
 842              	.L43:
 305:Src/main.c    **** 
 843              		.loc 1 305 0
 844 008e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 845              	.LVL47:
 846 0092 0C4B     		ldr	r3, .L45+12
 847 0094 A3FB0030 		umull	r3, r0, r3, r0
 848 0098 8009     		lsrs	r0, r0, #6
 849 009a FFF7FEFF 		bl	HAL_SYSTICK_Config
ARM GAS  /tmp/cc5rO5YX.s 			page 26


 850              	.LVL48:
 309:Src/main.c    **** 
 851              		.loc 1 309 0
 852 009e 0420     		movs	r0, #4
 853 00a0 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 854              	.LVL49:
 312:Src/main.c    **** }
 855              		.loc 1 312 0
 856 00a4 0022     		movs	r2, #0
 857 00a6 1146     		mov	r1, r2
 858 00a8 4FF0FF30 		mov	r0, #-1
 859 00ac FFF7FEFF 		bl	HAL_NVIC_SetPriority
 860              	.LVL50:
 313:Src/main.c    **** 
 861              		.loc 1 313 0
 862 00b0 15B0     		add	sp, sp, #84
 863              	.LCFI18:
 864              		.cfi_def_cfa_offset 4
 865              		@ sp needed
 866 00b2 5DF804FB 		ldr	pc, [sp], #4
 867              	.L46:
 868 00b6 00BF     		.align	2
 869              	.L45:
 870 00b8 00380240 		.word	1073887232
 871 00bc 00700040 		.word	1073770496
 872 00c0 00000000 		.word	.LC0
 873 00c4 D34D6210 		.word	274877907
 874              		.cfi_endproc
 875              	.LFE128:
 877              		.section	.text.main,"ax",%progbits
 878              		.align	2
 879              		.global	main
 880              		.thumb
 881              		.thumb_func
 883              	main:
 884              	.LFB127:
 162:Src/main.c    ****   SD_MPU6050_Result result ;
 885              		.loc 1 162 0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 40
 888              		@ frame_needed = 0, uses_anonymous_args = 0
 889 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 890              	.LCFI19:
 891              		.cfi_def_cfa_offset 20
 892              		.cfi_offset 4, -20
 893              		.cfi_offset 5, -16
 894              		.cfi_offset 6, -12
 895              		.cfi_offset 7, -8
 896              		.cfi_offset 14, -4
 897 0002 99B0     		sub	sp, sp, #100
 898              	.LCFI20:
 899              		.cfi_def_cfa_offset 120
 164:Src/main.c    ****   uint8_t mpu_not[17] = {"MPU NOT WORKING\n"};
 900              		.loc 1 164 0
 901 0004 4D4B     		ldr	r3, .L53
 902 0006 14AC     		add	r4, sp, #80
 903 0008 0FCB     		ldmia	r3, {r0, r1, r2, r3}
ARM GAS  /tmp/cc5rO5YX.s 			page 27


 904 000a 07C4     		stmia	r4!, {r0, r1, r2}
 905 000c 24F8023B 		strh	r3, [r4], #2	@ movhi
 906 0010 1B0C     		lsrs	r3, r3, #16
 907 0012 2370     		strb	r3, [r4]
 165:Src/main.c    **** 
 908              		.loc 1 165 0
 909 0014 0FAC     		add	r4, sp, #60
 910 0016 4A4D     		ldr	r5, .L53+4
 911 0018 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 912 001a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 913 001c 2B68     		ldr	r3, [r5]
 914 001e 2370     		strb	r3, [r4]
 915              	.LVL51:
 176:Src/main.c    **** 
 916              		.loc 1 176 0
 917 0020 FFF7FEFF 		bl	HAL_Init
 918              	.LVL52:
 179:Src/main.c    **** 
 919              		.loc 1 179 0
 920 0024 FFF7FEFF 		bl	SystemClock_Config
 921              	.LVL53:
 182:Src/main.c    ****   MX_USART1_UART_Init();
 922              		.loc 1 182 0
 923 0028 FFF7FEFF 		bl	MX_GPIO_Init
 924              	.LVL54:
 183:Src/main.c    ****   //MX_WWDG_Init();
 925              		.loc 1 183 0
 926 002c FFF7FEFF 		bl	MX_USART1_UART_Init
 927              	.LVL55:
 185:Src/main.c    ****   MX_USART2_UART_Init();
 928              		.loc 1 185 0
 929 0030 FFF7FEFF 		bl	MX_USART6_UART_Init
 930              	.LVL56:
 186:Src/main.c    ****   MX_I2C1_Init();
 931              		.loc 1 186 0
 932 0034 FFF7FEFF 		bl	MX_USART2_UART_Init
 933              	.LVL57:
 187:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 934              		.loc 1 187 0
 935 0038 FFF7FEFF 		bl	MX_I2C1_Init
 936              	.LVL58:
 188:Src/main.c    **** 
 937              		.loc 1 188 0
 938 003c 0122     		movs	r2, #1
 939 003e 4FF48071 		mov	r1, #256
 940 0042 4048     		ldr	r0, .L53+8
 941 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
 942              	.LVL59:
 191:Src/main.c    **** 
 943              		.loc 1 191 0
 944 0048 0323     		movs	r3, #3
 945 004a 0093     		str	r3, [sp]
 946 004c 0022     		movs	r2, #0
 947 004e 3E49     		ldr	r1, .L53+12
 948 0050 3E48     		ldr	r0, .L53+16
 949 0052 FFF7FEFF 		bl	SD_MPU6050_Init
 950              	.LVL60:
ARM GAS  /tmp/cc5rO5YX.s 			page 28


 193:Src/main.c    ****   {
 951              		.loc 1 193 0
 952 0056 38B9     		cbnz	r0, .L48
 195:Src/main.c    ****   }
 953              		.loc 1 195 0
 954 0058 4FF0FF33 		mov	r3, #-1
 955 005c 0F22     		movs	r2, #15
 956 005e 14A9     		add	r1, sp, #80
 957 0060 3B48     		ldr	r0, .L53+20
 958              	.LVL61:
 959 0062 FFF7FEFF 		bl	HAL_UART_Transmit
 960              	.LVL62:
 961 0066 06E0     		b	.L49
 962              	.LVL63:
 963              	.L48:
 199:Src/main.c    ****   }
 964              		.loc 1 199 0
 965 0068 4FF0FF33 		mov	r3, #-1
 966 006c 1122     		movs	r2, #17
 967 006e 0FA9     		add	r1, sp, #60
 968 0070 3748     		ldr	r0, .L53+20
 969              	.LVL64:
 970 0072 FFF7FEFF 		bl	HAL_UART_Transmit
 971              	.LVL65:
 972              	.L49:
 202:Src/main.c    ****   B3M_RunNormal(huart6, SERVO_ID_1);
 973              		.loc 1 202 0
 974 0076 374E     		ldr	r6, .L53+24
 975 0078 0127     		movs	r7, #1
 976 007a 0C97     		str	r7, [sp, #48]
 977 007c 6C46     		mov	r4, sp
 978 007e 06F11005 		add	r5, r6, #16
 979 0082 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 980 0084 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 981 0086 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 982 0088 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 983 008a 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 984 008e 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 985 0092 96E80F00 		ldmia	r6, {r0, r1, r2, r3}
 986 0096 FFF7FEFF 		bl	B3M_RunNormal
 987              	.LVL66:
 203:Src/main.c    **** 
 988              		.loc 1 203 0
 989 009a 2F4E     		ldr	r6, .L53+28
 990 009c 0C97     		str	r7, [sp, #48]
 991 009e 6C46     		mov	r4, sp
 992 00a0 06F11005 		add	r5, r6, #16
 993 00a4 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 994 00a6 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 995 00a8 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 996 00aa 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 997 00ac 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 998 00b0 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 999 00b4 96E80F00 		ldmia	r6, {r0, r1, r2, r3}
 1000 00b8 FFF7FEFF 		bl	B3M_RunNormal
 1001              	.LVL67:
 205:Src/main.c    ****   SD_MPU6050_ReadGyroscope(&hi2c1,&mpu1);
ARM GAS  /tmp/cc5rO5YX.s 			page 29


 1002              		.loc 1 205 0
 1003 00bc 224D     		ldr	r5, .L53+12
 1004 00be 234C     		ldr	r4, .L53+16
 1005 00c0 2946     		mov	r1, r5
 1006 00c2 2046     		mov	r0, r4
 1007 00c4 FFF7FEFF 		bl	SD_MPU6050_ReadAccelerometer
 1008              	.LVL68:
 206:Src/main.c    **** 
 1009              		.loc 1 206 0
 1010 00c8 2946     		mov	r1, r5
 1011 00ca 2046     		mov	r0, r4
 1012 00cc FFF7FEFF 		bl	SD_MPU6050_ReadGyroscope
 1013              	.LVL69:
 1014              	.L51:
 239:Src/main.c    ****       //B3M_RunNormal(huart1, SERVO_ID_1);
 1015              		.loc 1 239 0
 1016 00d0 4FF40051 		mov	r1, #8192
 1017 00d4 1B48     		ldr	r0, .L53+8
 1018 00d6 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1019              	.LVL70:
 1020 00da A0B9     		cbnz	r0, .L50
 241:Src/main.c    ****       HAL_Delay(100);
 1021              		.loc 1 241 0
 1022 00dc 1E4E     		ldr	r6, .L53+28
 1023 00de 0123     		movs	r3, #1
 1024 00e0 0C93     		str	r3, [sp, #48]
 1025 00e2 6C46     		mov	r4, sp
 1026 00e4 06F11005 		add	r5, r6, #16
 1027 00e8 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1028 00ea 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1029 00ec 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1030 00ee 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1031 00f0 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1032 00f4 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 1033 00f8 96E80F00 		ldmia	r6, {r0, r1, r2, r3}
 1034 00fc FFF7FEFF 		bl	B3M_RunNormal
 1035              	.LVL71:
 242:Src/main.c    ****     }
 1036              		.loc 1 242 0
 1037 0100 6420     		movs	r0, #100
 1038 0102 FFF7FEFF 		bl	HAL_Delay
 1039              	.LVL72:
 1040              	.L50:
 248:Src/main.c    ****       //HAL_Delay(100);
 1041              		.loc 1 248 0
 1042 0106 144E     		ldr	r6, .L53+28
 1043 0108 0023     		movs	r3, #0
 1044 010a 0D93     		str	r3, [sp, #52]
 1045 010c 0123     		movs	r3, #1
 1046 010e 0C93     		str	r3, [sp, #48]
 1047 0110 6C46     		mov	r4, sp
 1048 0112 06F11005 		add	r5, r6, #16
 1049 0116 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1050 0118 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1051 011a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1052 011c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1053 011e 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
ARM GAS  /tmp/cc5rO5YX.s 			page 30


 1054 0122 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 1055 0126 96E80F00 		ldmia	r6, {r0, r1, r2, r3}
 1056 012a FFF7FEFF 		bl	B3M_SetDesirePostion
 1057              	.LVL73:
 253:Src/main.c    **** 
 1058              		.loc 1 253 0
 1059 012e 4FF40071 		mov	r1, #512
 1060 0132 0448     		ldr	r0, .L53+8
 1061 0134 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1062              	.LVL74:
 255:Src/main.c    **** 
 1063              		.loc 1 255 0
 1064 0138 CAE7     		b	.L51
 1065              	.L54:
 1066 013a 00BF     		.align	2
 1067              	.L53:
 1068 013c 0C000000 		.word	.LC1
 1069 0140 1C000000 		.word	.LC2
 1070 0144 00080240 		.word	1073874944
 1071 0148 00000000 		.word	mpu1
 1072 014c 00000000 		.word	hi2c1
 1073 0150 00000000 		.word	huart2
 1074 0154 00000000 		.word	huart1
 1075 0158 00000000 		.word	huart6
 1076              		.cfi_endproc
 1077              	.LFE127:
 1079              		.comm	mpu1,28,4
 1080              		.comm	hi2c1,84,4
 1081              		.comm	huart6,64,4
 1082              		.comm	huart2,64,4
 1083              		.comm	huart1,64,4
 1084              		.section	.rodata.str1.4,"aMS",%progbits,1
 1085              		.align	2
 1086              	.LC0:
 1087 0000 5372632F 		.ascii	"Src/main.c\000"
 1087      6D61696E 
 1087      2E6300
 1088 000b 00       		.space	1
 1089              	.LC1:
 1090 000c 4D505520 		.ascii	"MPU WORK FINE\012\000"
 1090      574F524B 
 1090      2046494E 
 1090      450A00
 1091 001b 00       		.space	1
 1092              	.LC2:
 1093 001c 4D505520 		.ascii	"MPU NOT WORKING\012\000"
 1093      4E4F5420 
 1093      574F524B 
 1093      494E470A 
 1093      00
 1094              		.text
 1095              	.Letext0:
 1096              		.file 2 "/home/ryouya/STM32Toolchain/gcc-arm-none-eabi-5_4-2016q3.2/arm-none-eabi/include/machine/
 1097              		.file 3 "/home/ryouya/STM32Toolchain/gcc-arm-none-eabi-5_4-2016q3.2/arm-none-eabi/include/sys/_std
 1098              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1099              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1100              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
ARM GAS  /tmp/cc5rO5YX.s 			page 31


 1101              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1102              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1103              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1104              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 1105              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1106              		.file 12 "Inc/sd_hal_mpu6050.h"
 1107              		.file 13 "Drivers/CMSIS/Include/core_cm4.h"
 1108              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1109              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c_ex.h"
 1110              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1111              		.file 17 "Inc/B3M.h"
ARM GAS  /tmp/cc5rO5YX.s 			page 32


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc5rO5YX.s:22     .text.MX_GPIO_Init:00000000 $t
     /tmp/cc5rO5YX.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/cc5rO5YX.s:199    .text.MX_GPIO_Init:000000fc $d
     /tmp/cc5rO5YX.s:208    .text.setModeToNormal:00000000 $t
     /tmp/cc5rO5YX.s:213    .text.setModeToNormal:00000000 setModeToNormal
     /tmp/cc5rO5YX.s:268    .text.setModeToNormal:00000048 $d
                            *COM*:00000040 huart1
     /tmp/cc5rO5YX.s:273    .text.setAngle:00000000 $t
     /tmp/cc5rO5YX.s:278    .text.setAngle:00000000 setAngle
     /tmp/cc5rO5YX.s:401    .text.setAngle:000000a8 $d
                            *COM*:00000040 huart2
     /tmp/cc5rO5YX.s:407    .text.setFree:00000000 $t
     /tmp/cc5rO5YX.s:412    .text.setFree:00000000 setFree
     /tmp/cc5rO5YX.s:477    .text.setFree:00000058 $d
     /tmp/cc5rO5YX.s:483    .text._Error_Handler:00000000 $t
     /tmp/cc5rO5YX.s:488    .text._Error_Handler:00000000 _Error_Handler
     /tmp/cc5rO5YX.s:503    .text.MX_USART1_UART_Init:00000000 $t
     /tmp/cc5rO5YX.s:507    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
     /tmp/cc5rO5YX.s:554    .text.MX_USART1_UART_Init:00000030 $d
     /tmp/cc5rO5YX.s:561    .text.MX_USART6_UART_Init:00000000 $t
     /tmp/cc5rO5YX.s:565    .text.MX_USART6_UART_Init:00000000 MX_USART6_UART_Init
     /tmp/cc5rO5YX.s:611    .text.MX_USART6_UART_Init:00000030 $d
                            *COM*:00000040 huart6
     /tmp/cc5rO5YX.s:619    .text.MX_USART2_UART_Init:00000000 $t
     /tmp/cc5rO5YX.s:623    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
     /tmp/cc5rO5YX.s:669    .text.MX_USART2_UART_Init:00000030 $d
     /tmp/cc5rO5YX.s:676    .text.MX_I2C1_Init:00000000 $t
     /tmp/cc5rO5YX.s:680    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
     /tmp/cc5rO5YX.s:731    .text.MX_I2C1_Init:00000038 $d
                            *COM*:00000054 hi2c1
     /tmp/cc5rO5YX.s:739    .text.SystemClock_Config:00000000 $t
     /tmp/cc5rO5YX.s:744    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cc5rO5YX.s:870    .text.SystemClock_Config:000000b8 $d
     /tmp/cc5rO5YX.s:878    .text.main:00000000 $t
     /tmp/cc5rO5YX.s:883    .text.main:00000000 main
     /tmp/cc5rO5YX.s:1068   .text.main:0000013c $d
                            *COM*:0000001c mpu1
     /tmp/cc5rO5YX.s:1085   .rodata.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Transmit
HAL_Delay
HAL_UART_Receive
HAl_Delay
HAL_UART_Init
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
ARM GAS  /tmp/cc5rO5YX.s 			page 33


HAL_NVIC_SetPriority
HAL_Init
SD_MPU6050_Init
B3M_RunNormal
SD_MPU6050_ReadAccelerometer
SD_MPU6050_ReadGyroscope
HAL_GPIO_ReadPin
B3M_SetDesirePostion
HAL_GPIO_TogglePin
